
out/sistemaoperativo.elf:     file format elf32-littlearm
out/sistemaoperativo.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a0015ad

Program Header:
0x70000001 off    0x00012704 vaddr 0x1a002704 paddr 0x1a002704 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00010000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x00000000 memsz 0x00000aa8 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x0000270c memsz 0x0000270c flags r-x
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002704  1a000000  1a000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  10000000  10000000  0001270c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  0001270c  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  0001270c  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  0001270c  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  0001270c  2**2
                  CONTENTS
  6 .bss          00000aa8  10000000  10000000  00010000  2**2
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  0001270c  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  0001270c  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  0001270c  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  0001270c  2**2
                  CONTENTS
 11 .ARM.exidx    00000008  1a002704  1a002704  00012704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .uninit_RESERVED 00000000  10000000  10000000  0001270c  2**2
                  CONTENTS
 13 .noinit_RAM2  00000000  10080000  10080000  0001270c  2**2
                  CONTENTS
 14 .noinit_RAM3  00000000  20000000  20000000  0001270c  2**2
                  CONTENTS
 15 .noinit_RAM4  00000000  20008000  20008000  0001270c  2**2
                  CONTENTS
 16 .noinit_RAM5  00000000  2000c000  2000c000  0001270c  2**2
                  CONTENTS
 17 .noinit       00000000  10000aa8  10000aa8  0001270c  2**2
                  CONTENTS
 18 .debug_info   0000ec03  00000000  00000000  0001270c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_abbrev 0000247f  00000000  00000000  0002130f  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_loc    00003d48  00000000  00000000  0002378e  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_aranges 00000568  00000000  00000000  000274d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_ranges 000004f8  00000000  00000000  00027a40  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_macro  000085d5  00000000  00000000  00027f38  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_line   000066e4  00000000  00000000  0003050d  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_str    0001d327  00000000  00000000  00036bf1  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .comment      0000007f  00000000  00000000  00053f18  2**0
                  CONTENTS, READONLY
 27 .ARM.attributes 00000037  00000000  00000000  00053f97  2**0
                  CONTENTS, READONLY
 28 .debug_frame  00000ddc  00000000  00000000  00053fd0  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000000 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a002704 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10000aa8 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 cr_startup_lpc43xx.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 semaphore.c
00000000 l    df *ABS*	00000000 os_core.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a000d30 l     F .text	0000002c Chip_UART_GetIndex
1a00247c l     O .text	00000008 UART_BClock
1a002484 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a000e98 l     F .text	000000a4 pll_calc_divs
1a000f3c l     F .text	00000100 pll_get_frac
1a00103c l     F .text	0000004c Chip_Clock_FindBaseClock
1a0012b0 l     F .text	00000022 Chip_Clock_GetDivRate
10000020 l     O .bss	00000008 audio_usb_pll_freq
1a002498 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a002504 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 fpu_init.c
00000000 l    df *ABS*	00000000 board_sysinit.c
1a00254c l     O .text	0000000c InitClkStates
1a002558 l     O .text	00000060 pinmuxing
00000000 l    df *ABS*	00000000 board.c
1a0016d8 l     F .text	00000044 Board_LED_Init
1a0025c0 l     O .text	0000000c gpioLEDBits
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a0017f8 l     F .text	00000034 gpioObtainPinConfig
00000000 l    df *ABS*	00000000 out/app/src/PendSV_Handler.o
1a001914 l       .text	00000000 return
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 memset.c
10000004 g     O .bss	00000004 cont_dos
1a0010d4 g     F .text	0000001c Chip_Clock_GetDividerSource
1a0009ec g     F .text	00000220 get_next_context
1a000188  w    F .text	00000002 TIMER2_IRQHandler
1a000184  w    F .text	00000002 DebugMon_Handler
1a000188  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a000188  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a000330 g     F .text	0000009c tomar_semaforo
1a000188  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a001c34 g     F .text	0000005a .hidden __floatdidf
1a000188  w    F .text	00000002 I2C0_IRQHandler
1a000700 g     F .text	0000004c init_stack
1a00017a  w    F .text	00000002 HardFault_Handler
1a000000 g       *ABS*	00000000 __vectors_start__
1a0006f4 g     F .text	0000000c SysTick_Handler
1a000188  w    F .text	00000002 SDIO_IRQHandler
1a000188  w    F .text	00000002 ATIMER_IRQHandler
1a0018ec g     F .text	00000002 PendSV_Handler
1a000178  w    F .text	00000002 NMI_Handler
1a00270c g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a000458 g     F .text	00000044 initHardware
1a000188  w    F .text	00000002 I2C1_IRQHandler
1a000188  w    F .text	00000002 UART1_IRQHandler
1a000188  w    F .text	00000002 GPIO5_IRQHandler
1a000188  w    F .text	00000002 CAN1_IRQHandler
10000490 g     O .bss	00000200 stack1
10000018 g     O .bss	00000004 indice_p2
1a00270c g       .ARM.exidx	00000000 _etext
1a000188  w    F .text	00000002 USB1_IRQHandler
1a000188  w    F .text	00000002 I2S0_IRQHandler
1a000300 g     F .text	00000030 crear_semaforo_bin
10000028 g     O .bss	00000050 vector_semaforos
1a000188  w    F .text	00000002 TIMER3_IRQHandler
1a001352 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a000188  w    F .text	00000002 UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a000188  w    F .text	00000002 SGPIO_IRQHandler
1a0008ec g     F .text	00000094 selec_prioridad
1a000980 g     F .text	0000006c actualizar_vInicio
1a001bbc g     F .text	00000022 .hidden __floatsidf
1a002154 g     F .text	00000000 .hidden __aeabi_uldivmod
10000aa8 g       .noinit	00000000 _noinit
10000aa4 g     O .bss	00000004 SystemCoreClock
1a000d5c g     F .text	00000054 Chip_UART_Init
1a000188  w    F .text	00000002 ADC0_IRQHandler
1a000180  w    F .text	00000002 UsageFault_Handler
1a00139c g     F .text	0000004c Chip_Clock_GetRate
1a000188  w    F .text	00000002 GPIO6_IRQHandler
1a001660 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a001b9c g     F .text	0000001e .hidden __aeabi_ui2d
1a002184 g     F .text	000002cc .hidden __udivmoddi4
1a001918 g     F .text	00000000 .hidden __aeabi_drsub
1a0025b8 g     O .text	00000004 ExtRateIn
1a000188  w    F .text	00000002 IntDefaultHandler
1a00043c g     F .text	0000001c task_idle
1a000300 g       .text	00000000 __CRP_WORD_END__
1a000188  w    F .text	00000002 GPIO1_IRQHandler
1000001c g     O .bss	00000004 indice_p3
1a001be0 g     F .text	00000042 .hidden __extendsfdf2
1a001ee4 g     F .text	000001d0 .hidden __aeabi_ddiv
1a000188  w    F .text	00000002 SSP0_IRQHandler
1a001924 g     F .text	00000276 .hidden __adddf3
1a002704 g       .text	00000000 __exidx_start
1a001c90 g     F .text	00000254 .hidden __aeabi_dmul
1a0002fc g     O .text	00000004 CRP_WORD
1a00049c g     F .text	00000018 schedule
10000078 g     O .bss	00000200 stack0
1a001b9c g     F .text	0000001e .hidden __floatunsidf
1a000188  w    F .text	00000002 ADC1_IRQHandler
1a0017c4 g     F .text	00000028 Board_Init
1a000114 g       .text	00000000 __data_section_table
1a0020b4 g     F .text	0000009e .hidden __aeabi_d2f
10000000 g     O .bss	00000004 indice_vec_semaforo
1a000188  w    F .text	00000002 RTC_IRQHandler
10000aa8 g       .bss	00000000 _ebss
1a000188  w    F .text	00000002 TIMER0_IRQHandler
10000014 g     O .bss	00000004 indice_p1
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a000188  w    F .text	00000002 SPI_IRQHandler
10000690 g     O .bss	00000004 sp1
1a000188  w    F .text	00000002 LCD_IRQHandler
1a001088 g     F .text	0000004c Chip_Clock_EnableCrystal
10000694 g     O .bss	00000004 sp2
10000278 g     O .bss	00000078 vector_p_idle
10008000 g       *ABS*	00000000 __top_RamLoc32
1a001924 g     F .text	00000276 .hidden __aeabi_dadd
1a00018a g     F .text	0000001e data_init
1000000c g     O .bss	00000004 cont_tres
1a001c24 g     F .text	0000006a .hidden __aeabi_ul2d
1a000188  w    F .text	00000002 TIMER1_IRQHandler
1a00082c g     F .text	000000c0 iniciar_vtareas
1a000188  w    F .text	00000002 UART2_IRQHandler
1a001244 g     F .text	0000006c Chip_Clock_GetMainPLLHz
10000698 g     O .bss	00000200 stack2
1a0018d6 g     F .text	00000016 gpioToggle
1a000188  w    F .text	00000002 GPIO2_IRQHandler
1a000c64 g     F .text	00000020 task1
1a00132c g     F .text	00000026 Chip_Clock_GetBaseClock
10000000 g       .bss	00000000 _bss
1a001920 g     F .text	0000027a .hidden __aeabi_dsub
1a000c84 g     F .text	00000020 task2
1a001c24 g     F .text	0000006a .hidden __floatundidf
1a000188  w    F .text	00000002 I2S1_IRQHandler
1a001540 g     F .text	00000002 Chip_GPIO_Init
1a0025bc g     O .text	00000004 OscRateIn
10000aa8 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
10000898 g     O .bss	00000004 semaforo1
1a000188  w    F .text	00000002 SSP1_IRQHandler
1a000178 g       .text	00000000 __bss_section_table_end
1a001bbc g     F .text	00000022 .hidden __aeabi_i2d
1000089c g     O .bss	00000001 register1_global
1a00062c g     F .text	000000c8 actualizar_cuenta
1a002450  w    F .text	00000002 .hidden __aeabi_ldiv0
1a001ee4 g     F .text	000001d0 .hidden __divdf3
100002f0 g     O .bss	00000078 vector_p2
1a001c90 g     F .text	00000254 .hidden __muldf3
1a000188  w    F .text	00000002 USB0_IRQHandler
1a000188  w    F .text	00000002 GPIO3_IRQHandler
1a000188  w    F .text	00000002 SCT_IRQHandler
1a0010f0 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
10000368 g     O .bss	00000030 vector_cambio
10000398 g     O .bss	00000078 vector_p1
100008a0 g     O .bss	00000004 sp3
1a002454 g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a000ca4 g     F .text	0000008c main
1a000438 g     F .text	00000004 task_return_hook
1a000188  w    F .text	00000002 WDT_IRQHandler
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a000182  w    F .text	00000002 SVC_Handler
1a0020b4 g     F .text	0000009e .hidden __truncdfsf2
1a0017ac g     F .text	00000016 Board_LED_Toggle
1a001c34 g     F .text	0000005a .hidden __aeabi_l2d
1a0004b4 g     F .text	00000060 t_delay
1a000188  w    F .text	00000002 GPIO7_IRQHandler
1a001360 g     F .text	0000003c Chip_Clock_EnableOpts
1a0025cc g     O .text	00000136 gpioPinsConfig
1a00110c g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a001558 g     F .text	00000054 fpuInit
1a001780 g     F .text	0000002c Board_LED_Test
1a0011c4 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
10000008 g     O .bss	00000001 cont_prioridad
1a0017ec g     F .text	0000000c SystemInit
1a000188  w    F .text	00000002 SPIFI_IRQHandler
1a000188  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a00182c g     F .text	00000056 gpioWrite
1a001628 g     F .text	00000038 Board_SetupMuxing
1a000db0 g     F .text	000000e8 Chip_UART_SetBaudFDR
1a000188  w    F .text	00000002 ETH_IRQHandler
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
10000010 g     O .bss	00000004 cont_uno
1a000188  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
10000aa8 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a000514 g     F .text	00000118 MEF_tareas
1a000188  w    F .text	00000002 GINT0_IRQHandler
1a0003cc g     F .text	0000006c liberar_semaforo
1a000188  w    F .text	00000002 DAC_IRQHandler
1a001730 g     F .text	00000028 Board_Debug_Init
10000000 g       .data	00000000 _edata
10000410 g     O .bss	00000078 vector_p3
1a000188  w    F .text	00000002 M0SUB_IRQHandler
100008a4 g     O .bss	00000200 stack3
1a0013e8 g     F .text	00000158 Chip_SetupCoreClock
1a000188  w    F .text	00000002 GPIO0_IRQHandler
1a000000 g     O .text	00000114 g_pfnVectors
1a0015ac g     F .text	0000007c ResetISR
1a001544 g     F .text	00000014 SystemCoreClockUpdate
1a000188  w    F .text	00000002 DMA_IRQHandler
10000488 g     O .bss	00000004 sp0
1a000188  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a002450  w    F .text	00000002 .hidden __aeabi_idiv0
1a00017e  w    F .text	00000002 BusFault_Handler
1a000188  w    F .text	00000002 UART3_IRQHandler
1a000188  w    F .text	00000002 MCPWM_IRQHandler
1a00074c g     F .text	000000e0 crear_tarea
1a001758 g     F .text	00000028 Board_LED_Set
1a000188  w    F .text	00000002 M0APP_IRQHandler
1a001882 g     F .text	00000054 gpioRead
1a001be0 g     F .text	00000042 .hidden __aeabi_f2d
1a000c10 g     F .text	00000054 task3
1000048c g     O .bss	00000004 next_sp
1a001920 g     F .text	0000027a .hidden __subdf3
1a000188  w    F .text	00000002 GINT1_IRQHandler
1a00171c g     F .text	00000014 Board_UART_Init
1a0012d4 g     F .text	00000058 Chip_Clock_SetBaseClock
1a000188  w    F .text	00000002 GPIO4_IRQHandler
1a0016cc g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 ad 15 00 1a 79 01 00 1a 7b 01 00 1a     ........y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a 00 00 00 00     }...............
	...
1a00002c:	83 01 00 1a 85 01 00 1a 00 00 00 00 ed 18 00 1a     ................
1a00003c:	f5 06 00 1a 89 01 00 1a 89 01 00 1a 89 01 00 1a     ................
1a00004c:	00 00 00 00 89 01 00 1a 89 01 00 1a 89 01 00 1a     ................
1a00005c:	89 01 00 1a 89 01 00 1a 89 01 00 1a 89 01 00 1a     ................
1a00006c:	89 01 00 1a 89 01 00 1a 89 01 00 1a 89 01 00 1a     ................
1a00007c:	89 01 00 1a 89 01 00 1a 89 01 00 1a 89 01 00 1a     ................
1a00008c:	89 01 00 1a 89 01 00 1a 89 01 00 1a 89 01 00 1a     ................
1a00009c:	89 01 00 1a 89 01 00 1a 89 01 00 1a 89 01 00 1a     ................
1a0000ac:	89 01 00 1a 89 01 00 1a 89 01 00 1a 89 01 00 1a     ................
1a0000bc:	89 01 00 1a 89 01 00 1a 89 01 00 1a 89 01 00 1a     ................
1a0000cc:	89 01 00 1a 89 01 00 1a 89 01 00 1a 89 01 00 1a     ................
1a0000dc:	89 01 00 1a 89 01 00 1a 89 01 00 1a 89 01 00 1a     ................
1a0000ec:	89 01 00 1a 00 00 00 00 89 01 00 1a 89 01 00 1a     ................
1a0000fc:	89 01 00 1a 00 00 00 00 89 01 00 1a 89 01 00 1a     ................
1a00010c:	89 01 00 1a 89 01 00 1a                             ........

1a000114 <__data_section_table>:
1a000114:	1a00270c 	.word	0x1a00270c
1a000118:	10000000 	.word	0x10000000
1a00011c:	00000000 	.word	0x00000000
1a000120:	1a00270c 	.word	0x1a00270c
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a00270c 	.word	0x1a00270c
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a00270c 	.word	0x1a00270c
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a00270c 	.word	0x1a00270c
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000000 	.word	0x10000000
1a000154:	00000aa8 	.word	0x00000aa8
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
//*****************************************************************************
// Default exception handlers. Override the ones here by defining your own
// handler routines in your application code.
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>

1a000182 <SVC_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
1a000182:	e7fe      	b.n	1a000182 <SVC_Handler>

1a000184 <DebugMon_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
1a000186:	e7fe      	b.n	1a000186 <DebugMon_Handler+0x2>

1a000188 <ADC0_IRQHandler>:
// Processor ends up here if an unexpected interrupt occurs or a specific
// handler is not present in the application code.
//
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
1a000188:	e7fe      	b.n	1a000188 <ADC0_IRQHandler>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	6804      	ldr	r4, [r0, #0]
1a000194:	600c      	str	r4, [r1, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a000196:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a000198:	3004      	adds	r0, #4
1a00019a:	3104      	adds	r1, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	e003      	b.n	1a0001b4 <bss_init+0xc>
        *pulDest++ = 0;
1a0001ac:	2200      	movs	r2, #0
1a0001ae:	6002      	str	r2, [r0, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b0:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001b2:	3004      	adds	r0, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	428b      	cmp	r3, r1
1a0001b6:	d3f9      	bcc.n	1a0001ac <bss_init+0x4>
}
1a0001b8:	4770      	bx	lr
1a0001ba:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001be:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fe:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000202:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000206:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000212:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000216:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000222:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000226:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000232:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000236:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000242:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000246:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000252:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000256:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000262:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000266:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000272:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000276:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000282:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000286:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000292:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000296:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002aa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ae:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ba:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002be:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002fa:	Address 0x000000001a0002fa is out of bounds.


1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <crear_semaforo_bin>:

/*==================[internal functions definition]==========================*/
uint32_t crear_semaforo_bin(void){
	uint32_t id;

	if(indice_vec_semaforo<MAX_SEMAFORO){
1a000300:	4b09      	ldr	r3, [pc, #36]	; (1a000328 <crear_semaforo_bin+0x28>)
1a000302:	6818      	ldr	r0, [r3, #0]
1a000304:	2804      	cmp	r0, #4
1a000306:	d80c      	bhi.n	1a000322 <crear_semaforo_bin+0x22>
uint32_t crear_semaforo_bin(void){
1a000308:	b410      	push	{r4}
		vector_semaforos[indice_vec_semaforo].estado=tomado;
1a00030a:	4a08      	ldr	r2, [pc, #32]	; (1a00032c <crear_semaforo_bin+0x2c>)
1a00030c:	0103      	lsls	r3, r0, #4
1a00030e:	18d1      	adds	r1, r2, r3
1a000310:	2400      	movs	r4, #0
1a000312:	710c      	strb	r4, [r1, #4]
		vector_semaforos[indice_vec_semaforo].id=indice_vec_semaforo;
1a000314:	50d0      	str	r0, [r2, r3]
		id=indice_vec_semaforo;
		indice_vec_semaforo++;
1a000316:	1c43      	adds	r3, r0, #1
1a000318:	4a03      	ldr	r2, [pc, #12]	; (1a000328 <crear_semaforo_bin+0x28>)
1a00031a:	6013      	str	r3, [r2, #0]
	}else{
		//error no se puede crear el semaforo
		return MAX_SEMAFORO;
	}

}
1a00031c:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000320:	4770      	bx	lr
		return MAX_SEMAFORO;
1a000322:	2005      	movs	r0, #5
}
1a000324:	4770      	bx	lr
1a000326:	bf00      	nop
1a000328:	10000000 	.word	0x10000000
1a00032c:	10000028 	.word	0x10000028

1a000330 <tomar_semaforo>:

void tomar_semaforo(uint32_t id_semaforo){

	uint32_t prioridad,id;
	prioridad=vector_cambio[0].prioridad;
1a000330:	4b21      	ldr	r3, [pc, #132]	; (1a0003b8 <tomar_semaforo+0x88>)
1a000332:	689a      	ldr	r2, [r3, #8]
	id=vector_cambio[0].id;
1a000334:	6959      	ldr	r1, [r3, #20]

	switch(vector_semaforos[id_semaforo].estado){
1a000336:	4b21      	ldr	r3, [pc, #132]	; (1a0003bc <tomar_semaforo+0x8c>)
1a000338:	eb03 1300 	add.w	r3, r3, r0, lsl #4
1a00033c:	791b      	ldrb	r3, [r3, #4]
1a00033e:	b113      	cbz	r3, 1a000346 <tomar_semaforo+0x16>
1a000340:	2b01      	cmp	r3, #1
1a000342:	d030      	beq.n	1a0003a6 <tomar_semaforo+0x76>
1a000344:	4770      	bx	lr
void tomar_semaforo(uint32_t id_semaforo){
1a000346:	b510      	push	{r4, lr}
	case tomado:
		vector_semaforos[id_semaforo].id_tarea_tomada=id;
1a000348:	4b1c      	ldr	r3, [pc, #112]	; (1a0003bc <tomar_semaforo+0x8c>)
1a00034a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
1a00034e:	60c1      	str	r1, [r0, #12]
		vector_semaforos[id_semaforo].prioridad_tarea_tomada=prioridad;
1a000350:	6082      	str	r2, [r0, #8]

		switch(prioridad){
1a000352:	2a02      	cmp	r2, #2
1a000354:	d011      	beq.n	1a00037a <tomar_semaforo+0x4a>
1a000356:	2a03      	cmp	r2, #3
1a000358:	d01a      	beq.n	1a000390 <tomar_semaforo+0x60>
1a00035a:	2a01      	cmp	r2, #1
1a00035c:	d002      	beq.n	1a000364 <tomar_semaforo+0x34>
			vector_p3[id].contador=-1;
			break;
		default:
			break;
		}
		schedule();
1a00035e:	f000 f89d 	bl	1a00049c <schedule>
		break;
	default:
		break;
	}

}
1a000362:	bd10      	pop	{r4, pc}
			vector_p1[id].estado=blocked;
1a000364:	4a16      	ldr	r2, [pc, #88]	; (1a0003c0 <tomar_semaforo+0x90>)
1a000366:	004b      	lsls	r3, r1, #1
1a000368:	185c      	adds	r4, r3, r1
1a00036a:	00e0      	lsls	r0, r4, #3
1a00036c:	4410      	add	r0, r2
1a00036e:	2402      	movs	r4, #2
1a000370:	7304      	strb	r4, [r0, #12]
			vector_p1[id].contador=-1;
1a000372:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a000376:	6103      	str	r3, [r0, #16]
			break;
1a000378:	e7f1      	b.n	1a00035e <tomar_semaforo+0x2e>
			vector_p2[id].estado=blocked;
1a00037a:	4a12      	ldr	r2, [pc, #72]	; (1a0003c4 <tomar_semaforo+0x94>)
1a00037c:	004b      	lsls	r3, r1, #1
1a00037e:	185c      	adds	r4, r3, r1
1a000380:	00e0      	lsls	r0, r4, #3
1a000382:	4410      	add	r0, r2
1a000384:	2402      	movs	r4, #2
1a000386:	7304      	strb	r4, [r0, #12]
			vector_p2[id].contador=-1;
1a000388:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a00038c:	6103      	str	r3, [r0, #16]
			break;
1a00038e:	e7e6      	b.n	1a00035e <tomar_semaforo+0x2e>
			vector_p3[id].estado=blocked;
1a000390:	4a0d      	ldr	r2, [pc, #52]	; (1a0003c8 <tomar_semaforo+0x98>)
1a000392:	004b      	lsls	r3, r1, #1
1a000394:	185c      	adds	r4, r3, r1
1a000396:	00e0      	lsls	r0, r4, #3
1a000398:	4410      	add	r0, r2
1a00039a:	2402      	movs	r4, #2
1a00039c:	7304      	strb	r4, [r0, #12]
			vector_p3[id].contador=-1;
1a00039e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a0003a2:	6103      	str	r3, [r0, #16]
			break;
1a0003a4:	e7db      	b.n	1a00035e <tomar_semaforo+0x2e>
		vector_semaforos[id_semaforo].estado=tomado;
1a0003a6:	4b05      	ldr	r3, [pc, #20]	; (1a0003bc <tomar_semaforo+0x8c>)
1a0003a8:	eb03 1000 	add.w	r0, r3, r0, lsl #4
1a0003ac:	2300      	movs	r3, #0
1a0003ae:	7103      	strb	r3, [r0, #4]
		vector_semaforos[id_semaforo].id_tarea_tomada=id;
1a0003b0:	60c1      	str	r1, [r0, #12]
		vector_semaforos[id_semaforo].prioridad_tarea_tomada=prioridad;
1a0003b2:	6082      	str	r2, [r0, #8]
1a0003b4:	4770      	bx	lr
1a0003b6:	bf00      	nop
1a0003b8:	10000368 	.word	0x10000368
1a0003bc:	10000028 	.word	0x10000028
1a0003c0:	10000398 	.word	0x10000398
1a0003c4:	100002f0 	.word	0x100002f0
1a0003c8:	10000410 	.word	0x10000410

1a0003cc <liberar_semaforo>:

uint32_t liberar_semaforo(uint32_t id_semaforo){
1a0003cc:	b410      	push	{r4}
	uint32_t prioridad,id;


	vector_semaforos[id_semaforo].estado=libre;
1a0003ce:	4b16      	ldr	r3, [pc, #88]	; (1a000428 <liberar_semaforo+0x5c>)
1a0003d0:	eb03 1000 	add.w	r0, r3, r0, lsl #4
1a0003d4:	2301      	movs	r3, #1
1a0003d6:	7103      	strb	r3, [r0, #4]

	prioridad=vector_semaforos[id_semaforo].prioridad_tarea_tomada;
1a0003d8:	6882      	ldr	r2, [r0, #8]
	id=vector_semaforos[id_semaforo].id_tarea_tomada;
1a0003da:	68c3      	ldr	r3, [r0, #12]

	switch(prioridad){
1a0003dc:	2a02      	cmp	r2, #2
1a0003de:	d010      	beq.n	1a000402 <liberar_semaforo+0x36>
1a0003e0:	2a03      	cmp	r2, #3
1a0003e2:	d017      	beq.n	1a000414 <liberar_semaforo+0x48>
1a0003e4:	2a01      	cmp	r2, #1
1a0003e6:	d003      	beq.n	1a0003f0 <liberar_semaforo+0x24>
	default:
		break;
	}

	return 0;
}
1a0003e8:	2000      	movs	r0, #0
1a0003ea:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0003ee:	4770      	bx	lr
		vector_p1[id].estado=ready;
1a0003f0:	490e      	ldr	r1, [pc, #56]	; (1a00042c <liberar_semaforo+0x60>)
1a0003f2:	005a      	lsls	r2, r3, #1
1a0003f4:	18d4      	adds	r4, r2, r3
1a0003f6:	00e0      	lsls	r0, r4, #3
1a0003f8:	4408      	add	r0, r1
1a0003fa:	2400      	movs	r4, #0
1a0003fc:	7304      	strb	r4, [r0, #12]
		vector_p1[id].contador=0;
1a0003fe:	6104      	str	r4, [r0, #16]
		break;
1a000400:	e7f2      	b.n	1a0003e8 <liberar_semaforo+0x1c>
		vector_p2[id].estado=ready;
1a000402:	490b      	ldr	r1, [pc, #44]	; (1a000430 <liberar_semaforo+0x64>)
1a000404:	005a      	lsls	r2, r3, #1
1a000406:	18d4      	adds	r4, r2, r3
1a000408:	00e0      	lsls	r0, r4, #3
1a00040a:	4408      	add	r0, r1
1a00040c:	2400      	movs	r4, #0
1a00040e:	7304      	strb	r4, [r0, #12]
		vector_p2[id].contador=0;
1a000410:	6104      	str	r4, [r0, #16]
		break;
1a000412:	e7e9      	b.n	1a0003e8 <liberar_semaforo+0x1c>
		vector_p3[id].estado=ready;
1a000414:	4907      	ldr	r1, [pc, #28]	; (1a000434 <liberar_semaforo+0x68>)
1a000416:	005a      	lsls	r2, r3, #1
1a000418:	18d4      	adds	r4, r2, r3
1a00041a:	00e0      	lsls	r0, r4, #3
1a00041c:	4408      	add	r0, r1
1a00041e:	2400      	movs	r4, #0
1a000420:	7304      	strb	r4, [r0, #12]
		vector_p3[id].contador=0;
1a000422:	6104      	str	r4, [r0, #16]
		break;
1a000424:	e7e0      	b.n	1a0003e8 <liberar_semaforo+0x1c>
1a000426:	bf00      	nop
1a000428:	10000028 	.word	0x10000028
1a00042c:	10000398 	.word	0x10000398
1a000430:	100002f0 	.word	0x100002f0
1a000434:	10000410 	.word	0x10000410

1a000438 <task_return_hook>:
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
1a000438:	bf30      	wfi
1a00043a:	e7fd      	b.n	1a000438 <task_return_hook>

1a00043c <task_idle>:
	}

	return 0;
}

void * task_idle(void *arg){
1a00043c:	b508      	push	{r3, lr}
1a00043e:	e006      	b.n	1a00044e <task_idle+0x12>
	uint32_t i;

	while(1){
		for(i=0;i<500000;i++){
1a000440:	3301      	adds	r3, #1
1a000442:	4a04      	ldr	r2, [pc, #16]	; (1a000454 <task_idle+0x18>)
1a000444:	4293      	cmp	r3, r2
1a000446:	d9fb      	bls.n	1a000440 <task_idle+0x4>
			//delay por software basico
		}
		Board_LED_Toggle(LED_BLUE);
1a000448:	2005      	movs	r0, #5
1a00044a:	f001 f9af 	bl	1a0017ac <Board_LED_Toggle>
		for(i=0;i<500000;i++){
1a00044e:	2300      	movs	r3, #0
1a000450:	e7f7      	b.n	1a000442 <task_idle+0x6>
1a000452:	bf00      	nop
1a000454:	0007a11f 	.word	0x0007a11f

1a000458 <initHardware>:
{
1a000458:	b508      	push	{r3, lr}
	Board_Init();
1a00045a:	f001 f9b3 	bl	1a0017c4 <Board_Init>
	SystemCoreClockUpdate();
1a00045e:	f001 f871 	bl	1a001544 <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock / MAX_TICK_TIME_FOR_DELAY);
1a000462:	4b0a      	ldr	r3, [pc, #40]	; (1a00048c <initHardware+0x34>)
1a000464:	681b      	ldr	r3, [r3, #0]
1a000466:	4a0a      	ldr	r2, [pc, #40]	; (1a000490 <initHardware+0x38>)
1a000468:	fba2 2303 	umull	r2, r3, r2, r3
1a00046c:	099b      	lsrs	r3, r3, #6
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
1a00046e:	3b01      	subs	r3, #1
1a000470:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
1a000474:	d209      	bcs.n	1a00048a <initHardware+0x32>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
1a000476:	4a07      	ldr	r2, [pc, #28]	; (1a000494 <initHardware+0x3c>)
1a000478:	6053      	str	r3, [r2, #4]
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
1a00047a:	4b07      	ldr	r3, [pc, #28]	; (1a000498 <initHardware+0x40>)
1a00047c:	21e0      	movs	r1, #224	; 0xe0
1a00047e:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
1a000482:	2300      	movs	r3, #0
1a000484:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a000486:	2307      	movs	r3, #7
1a000488:	6013      	str	r3, [r2, #0]
}
1a00048a:	bd08      	pop	{r3, pc}
1a00048c:	10000aa4 	.word	0x10000aa4
1a000490:	10624dd3 	.word	0x10624dd3
1a000494:	e000e010 	.word	0xe000e010
1a000498:	e000ed00 	.word	0xe000ed00

1a00049c <schedule>:
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
1a00049c:	4a04      	ldr	r2, [pc, #16]	; (1a0004b0 <schedule+0x14>)
1a00049e:	6853      	ldr	r3, [r2, #4]
1a0004a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
1a0004a4:	6053      	str	r3, [r2, #4]
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
1a0004a6:	f3bf 8f6f 	isb	sy
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
1a0004aa:	f3bf 8f4f 	dsb	sy
}
1a0004ae:	4770      	bx	lr
1a0004b0:	e000ed00 	.word	0xe000ed00

1a0004b4 <t_delay>:
void t_delay(uint32_t tiempo){
1a0004b4:	b538      	push	{r3, r4, r5, lr}
	prioridad=vector_cambio[0].prioridad;
1a0004b6:	4b13      	ldr	r3, [pc, #76]	; (1a000504 <t_delay+0x50>)
1a0004b8:	689a      	ldr	r2, [r3, #8]
	id=vector_cambio[0].id;
1a0004ba:	695b      	ldr	r3, [r3, #20]
	switch(prioridad){
1a0004bc:	2a02      	cmp	r2, #2
1a0004be:	d00f      	beq.n	1a0004e0 <t_delay+0x2c>
1a0004c0:	2a03      	cmp	r2, #3
1a0004c2:	d016      	beq.n	1a0004f2 <t_delay+0x3e>
1a0004c4:	2a01      	cmp	r2, #1
1a0004c6:	d002      	beq.n	1a0004ce <t_delay+0x1a>
	schedule();//llama al cambio de contexto
1a0004c8:	f7ff ffe8 	bl	1a00049c <schedule>
}
1a0004cc:	bd38      	pop	{r3, r4, r5, pc}
		vector_p1[id].contador=tiempo;
1a0004ce:	490e      	ldr	r1, [pc, #56]	; (1a000508 <t_delay+0x54>)
1a0004d0:	005a      	lsls	r2, r3, #1
1a0004d2:	18d5      	adds	r5, r2, r3
1a0004d4:	00ec      	lsls	r4, r5, #3
1a0004d6:	440c      	add	r4, r1
1a0004d8:	6120      	str	r0, [r4, #16]
		vector_p1[id].estado=blocked;
1a0004da:	2302      	movs	r3, #2
1a0004dc:	7323      	strb	r3, [r4, #12]
		break;
1a0004de:	e7f3      	b.n	1a0004c8 <t_delay+0x14>
		vector_p2[id].contador=tiempo;
1a0004e0:	490a      	ldr	r1, [pc, #40]	; (1a00050c <t_delay+0x58>)
1a0004e2:	005a      	lsls	r2, r3, #1
1a0004e4:	18d5      	adds	r5, r2, r3
1a0004e6:	00ec      	lsls	r4, r5, #3
1a0004e8:	440c      	add	r4, r1
1a0004ea:	6120      	str	r0, [r4, #16]
		vector_p2[id].estado=blocked;
1a0004ec:	2302      	movs	r3, #2
1a0004ee:	7323      	strb	r3, [r4, #12]
		break;
1a0004f0:	e7ea      	b.n	1a0004c8 <t_delay+0x14>
		vector_p3[id].contador=tiempo;
1a0004f2:	4907      	ldr	r1, [pc, #28]	; (1a000510 <t_delay+0x5c>)
1a0004f4:	005a      	lsls	r2, r3, #1
1a0004f6:	18d5      	adds	r5, r2, r3
1a0004f8:	00ec      	lsls	r4, r5, #3
1a0004fa:	440c      	add	r4, r1
1a0004fc:	6120      	str	r0, [r4, #16]
		vector_p3[id].estado=blocked;
1a0004fe:	2302      	movs	r3, #2
1a000500:	7323      	strb	r3, [r4, #12]
		break;
1a000502:	e7e1      	b.n	1a0004c8 <t_delay+0x14>
1a000504:	10000368 	.word	0x10000368
1a000508:	10000398 	.word	0x10000398
1a00050c:	100002f0 	.word	0x100002f0
1a000510:	10000410 	.word	0x10000410

1a000514 <MEF_tareas>:
	switch(prio){
1a000514:	3801      	subs	r0, #1
1a000516:	2803      	cmp	r0, #3
1a000518:	d87f      	bhi.n	1a00061a <MEF_tareas+0x106>
1a00051a:	e8df f000 	tbb	[pc, r0]
1a00051e:	2b02      	.short	0x2b02
1a000520:	7b53      	.short	0x7b53
		switch(vector_p1[ind].estado){
1a000522:	eb01 0341 	add.w	r3, r1, r1, lsl #1
1a000526:	00da      	lsls	r2, r3, #3
1a000528:	4b3c      	ldr	r3, [pc, #240]	; (1a00061c <MEF_tareas+0x108>)
1a00052a:	4413      	add	r3, r2
1a00052c:	7b1b      	ldrb	r3, [r3, #12]
1a00052e:	2b01      	cmp	r3, #1
1a000530:	d00b      	beq.n	1a00054a <MEF_tareas+0x36>
1a000532:	b113      	cbz	r3, 1a00053a <MEF_tareas+0x26>
1a000534:	2b02      	cmp	r3, #2
1a000536:	d010      	beq.n	1a00055a <MEF_tareas+0x46>
1a000538:	4770      	bx	lr
			vector_p1[ind].estado=running;
1a00053a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
1a00053e:	00ca      	lsls	r2, r1, #3
1a000540:	4b36      	ldr	r3, [pc, #216]	; (1a00061c <MEF_tareas+0x108>)
1a000542:	4413      	add	r3, r2
1a000544:	2201      	movs	r2, #1
1a000546:	731a      	strb	r2, [r3, #12]
			break;
1a000548:	4770      	bx	lr
			vector_p1[ind].estado=ready;
1a00054a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
1a00054e:	00ca      	lsls	r2, r1, #3
1a000550:	4b32      	ldr	r3, [pc, #200]	; (1a00061c <MEF_tareas+0x108>)
1a000552:	4413      	add	r3, r2
1a000554:	2200      	movs	r2, #0
1a000556:	731a      	strb	r2, [r3, #12]
			break;
1a000558:	4770      	bx	lr
			if(vector_p1[ind].contador==0){
1a00055a:	eb01 0341 	add.w	r3, r1, r1, lsl #1
1a00055e:	00da      	lsls	r2, r3, #3
1a000560:	4b2e      	ldr	r3, [pc, #184]	; (1a00061c <MEF_tareas+0x108>)
1a000562:	4413      	add	r3, r2
1a000564:	691b      	ldr	r3, [r3, #16]
1a000566:	2b00      	cmp	r3, #0
1a000568:	d157      	bne.n	1a00061a <MEF_tareas+0x106>
				vector_p1[ind].estado=ready;
1a00056a:	4b2c      	ldr	r3, [pc, #176]	; (1a00061c <MEF_tareas+0x108>)
1a00056c:	4413      	add	r3, r2
1a00056e:	2200      	movs	r2, #0
1a000570:	731a      	strb	r2, [r3, #12]
1a000572:	4770      	bx	lr
		switch(vector_p2[ind].estado){
1a000574:	eb01 0341 	add.w	r3, r1, r1, lsl #1
1a000578:	00da      	lsls	r2, r3, #3
1a00057a:	4b29      	ldr	r3, [pc, #164]	; (1a000620 <MEF_tareas+0x10c>)
1a00057c:	4413      	add	r3, r2
1a00057e:	7b1b      	ldrb	r3, [r3, #12]
1a000580:	2b01      	cmp	r3, #1
1a000582:	d00b      	beq.n	1a00059c <MEF_tareas+0x88>
1a000584:	b113      	cbz	r3, 1a00058c <MEF_tareas+0x78>
1a000586:	2b02      	cmp	r3, #2
1a000588:	d010      	beq.n	1a0005ac <MEF_tareas+0x98>
1a00058a:	4770      	bx	lr
			vector_p2[ind].estado=running;
1a00058c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
1a000590:	00ca      	lsls	r2, r1, #3
1a000592:	4b23      	ldr	r3, [pc, #140]	; (1a000620 <MEF_tareas+0x10c>)
1a000594:	4413      	add	r3, r2
1a000596:	2201      	movs	r2, #1
1a000598:	731a      	strb	r2, [r3, #12]
			break;
1a00059a:	4770      	bx	lr
			vector_p2[ind].estado=ready;
1a00059c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
1a0005a0:	00ca      	lsls	r2, r1, #3
1a0005a2:	4b1f      	ldr	r3, [pc, #124]	; (1a000620 <MEF_tareas+0x10c>)
1a0005a4:	4413      	add	r3, r2
1a0005a6:	2200      	movs	r2, #0
1a0005a8:	731a      	strb	r2, [r3, #12]
			break;
1a0005aa:	4770      	bx	lr
			if(vector_p2[ind].contador==0){
1a0005ac:	eb01 0341 	add.w	r3, r1, r1, lsl #1
1a0005b0:	00da      	lsls	r2, r3, #3
1a0005b2:	4b1b      	ldr	r3, [pc, #108]	; (1a000620 <MEF_tareas+0x10c>)
1a0005b4:	4413      	add	r3, r2
1a0005b6:	691b      	ldr	r3, [r3, #16]
1a0005b8:	bb7b      	cbnz	r3, 1a00061a <MEF_tareas+0x106>
				vector_p2[ind].estado=ready;
1a0005ba:	4b19      	ldr	r3, [pc, #100]	; (1a000620 <MEF_tareas+0x10c>)
1a0005bc:	4413      	add	r3, r2
1a0005be:	2200      	movs	r2, #0
1a0005c0:	731a      	strb	r2, [r3, #12]
1a0005c2:	4770      	bx	lr
		switch(vector_p3[ind].estado){
1a0005c4:	eb01 0341 	add.w	r3, r1, r1, lsl #1
1a0005c8:	00da      	lsls	r2, r3, #3
1a0005ca:	4b16      	ldr	r3, [pc, #88]	; (1a000624 <MEF_tareas+0x110>)
1a0005cc:	4413      	add	r3, r2
1a0005ce:	7b1b      	ldrb	r3, [r3, #12]
1a0005d0:	2b01      	cmp	r3, #1
1a0005d2:	d00b      	beq.n	1a0005ec <MEF_tareas+0xd8>
1a0005d4:	b113      	cbz	r3, 1a0005dc <MEF_tareas+0xc8>
1a0005d6:	2b02      	cmp	r3, #2
1a0005d8:	d010      	beq.n	1a0005fc <MEF_tareas+0xe8>
1a0005da:	4770      	bx	lr
			vector_p3[ind].estado=running;
1a0005dc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
1a0005e0:	00ca      	lsls	r2, r1, #3
1a0005e2:	4b10      	ldr	r3, [pc, #64]	; (1a000624 <MEF_tareas+0x110>)
1a0005e4:	4413      	add	r3, r2
1a0005e6:	2201      	movs	r2, #1
1a0005e8:	731a      	strb	r2, [r3, #12]
			break;
1a0005ea:	4770      	bx	lr
			vector_p3[ind].estado=ready;
1a0005ec:	eb01 0141 	add.w	r1, r1, r1, lsl #1
1a0005f0:	00ca      	lsls	r2, r1, #3
1a0005f2:	4b0c      	ldr	r3, [pc, #48]	; (1a000624 <MEF_tareas+0x110>)
1a0005f4:	4413      	add	r3, r2
1a0005f6:	2200      	movs	r2, #0
1a0005f8:	731a      	strb	r2, [r3, #12]
			break;
1a0005fa:	4770      	bx	lr
			if(vector_p3[ind].contador==0){
1a0005fc:	eb01 0341 	add.w	r3, r1, r1, lsl #1
1a000600:	00da      	lsls	r2, r3, #3
1a000602:	4b08      	ldr	r3, [pc, #32]	; (1a000624 <MEF_tareas+0x110>)
1a000604:	4413      	add	r3, r2
1a000606:	691b      	ldr	r3, [r3, #16]
1a000608:	b93b      	cbnz	r3, 1a00061a <MEF_tareas+0x106>
				vector_p3[ind].estado=ready;
1a00060a:	4b06      	ldr	r3, [pc, #24]	; (1a000624 <MEF_tareas+0x110>)
1a00060c:	4413      	add	r3, r2
1a00060e:	2200      	movs	r2, #0
1a000610:	731a      	strb	r2, [r3, #12]
1a000612:	4770      	bx	lr
		vector_p_idle[0].estado=ready;
1a000614:	4b04      	ldr	r3, [pc, #16]	; (1a000628 <MEF_tareas+0x114>)
1a000616:	2200      	movs	r2, #0
1a000618:	731a      	strb	r2, [r3, #12]
}
1a00061a:	4770      	bx	lr
1a00061c:	10000398 	.word	0x10000398
1a000620:	100002f0 	.word	0x100002f0
1a000624:	10000410 	.word	0x10000410
1a000628:	10000278 	.word	0x10000278

1a00062c <actualizar_cuenta>:
void actualizar_cuenta(void){
1a00062c:	b538      	push	{r3, r4, r5, lr}
	for(i=1;i<MAX_VECTOR_SIZE-1;i++){
1a00062e:	2501      	movs	r5, #1
1a000630:	e04f      	b.n	1a0006d2 <actualizar_cuenta+0xa6>
			for(j=0;j<MAX_VECTOR_SIZE;j++){
1a000632:	3401      	adds	r4, #1
1a000634:	2c04      	cmp	r4, #4
1a000636:	d84b      	bhi.n	1a0006d0 <actualizar_cuenta+0xa4>
				if(vector_p1[j].contador>0){
1a000638:	eb04 0344 	add.w	r3, r4, r4, lsl #1
1a00063c:	00da      	lsls	r2, r3, #3
1a00063e:	4b2a      	ldr	r3, [pc, #168]	; (1a0006e8 <actualizar_cuenta+0xbc>)
1a000640:	4413      	add	r3, r2
1a000642:	691b      	ldr	r3, [r3, #16]
1a000644:	2b00      	cmp	r3, #0
1a000646:	ddf4      	ble.n	1a000632 <actualizar_cuenta+0x6>
					vector_p1[j].contador--;
1a000648:	3b01      	subs	r3, #1
1a00064a:	eb04 0244 	add.w	r2, r4, r4, lsl #1
1a00064e:	00d1      	lsls	r1, r2, #3
1a000650:	4a25      	ldr	r2, [pc, #148]	; (1a0006e8 <actualizar_cuenta+0xbc>)
1a000652:	440a      	add	r2, r1
1a000654:	6113      	str	r3, [r2, #16]
					if(vector_p1[j].contador==0){//
1a000656:	2b00      	cmp	r3, #0
1a000658:	d1eb      	bne.n	1a000632 <actualizar_cuenta+0x6>
						MEF_tareas(i,j);//
1a00065a:	4621      	mov	r1, r4
1a00065c:	4628      	mov	r0, r5
1a00065e:	f7ff ff59 	bl	1a000514 <MEF_tareas>
1a000662:	e7e6      	b.n	1a000632 <actualizar_cuenta+0x6>
			for(j=0;j<MAX_VECTOR_SIZE;j++){
1a000664:	3401      	adds	r4, #1
1a000666:	2c04      	cmp	r4, #4
1a000668:	d832      	bhi.n	1a0006d0 <actualizar_cuenta+0xa4>
				if(vector_p2[j].contador>0){
1a00066a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
1a00066e:	00da      	lsls	r2, r3, #3
1a000670:	4b1e      	ldr	r3, [pc, #120]	; (1a0006ec <actualizar_cuenta+0xc0>)
1a000672:	4413      	add	r3, r2
1a000674:	691b      	ldr	r3, [r3, #16]
1a000676:	2b00      	cmp	r3, #0
1a000678:	ddf4      	ble.n	1a000664 <actualizar_cuenta+0x38>
					vector_p2[j].contador--;
1a00067a:	3b01      	subs	r3, #1
1a00067c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
1a000680:	00d1      	lsls	r1, r2, #3
1a000682:	4a1a      	ldr	r2, [pc, #104]	; (1a0006ec <actualizar_cuenta+0xc0>)
1a000684:	440a      	add	r2, r1
1a000686:	6113      	str	r3, [r2, #16]
					if(vector_p2[j].contador==0){//
1a000688:	2b00      	cmp	r3, #0
1a00068a:	d1eb      	bne.n	1a000664 <actualizar_cuenta+0x38>
						MEF_tareas(i,j);//
1a00068c:	4621      	mov	r1, r4
1a00068e:	4628      	mov	r0, r5
1a000690:	f7ff ff40 	bl	1a000514 <MEF_tareas>
1a000694:	e7e6      	b.n	1a000664 <actualizar_cuenta+0x38>
			for(j=0;j<MAX_VECTOR_SIZE;j++){
1a000696:	2400      	movs	r4, #0
1a000698:	e7e5      	b.n	1a000666 <actualizar_cuenta+0x3a>
			for(j=0;j<MAX_VECTOR_SIZE;j++){
1a00069a:	3401      	adds	r4, #1
1a00069c:	2c04      	cmp	r4, #4
1a00069e:	d817      	bhi.n	1a0006d0 <actualizar_cuenta+0xa4>
				if(vector_p3[j].contador>0){
1a0006a0:	eb04 0344 	add.w	r3, r4, r4, lsl #1
1a0006a4:	00da      	lsls	r2, r3, #3
1a0006a6:	4b12      	ldr	r3, [pc, #72]	; (1a0006f0 <actualizar_cuenta+0xc4>)
1a0006a8:	4413      	add	r3, r2
1a0006aa:	691b      	ldr	r3, [r3, #16]
1a0006ac:	2b00      	cmp	r3, #0
1a0006ae:	ddf4      	ble.n	1a00069a <actualizar_cuenta+0x6e>
					vector_p3[j].contador--;
1a0006b0:	3b01      	subs	r3, #1
1a0006b2:	eb04 0244 	add.w	r2, r4, r4, lsl #1
1a0006b6:	00d1      	lsls	r1, r2, #3
1a0006b8:	4a0d      	ldr	r2, [pc, #52]	; (1a0006f0 <actualizar_cuenta+0xc4>)
1a0006ba:	440a      	add	r2, r1
1a0006bc:	6113      	str	r3, [r2, #16]
					if(vector_p3[j].contador==0){//
1a0006be:	2b00      	cmp	r3, #0
1a0006c0:	d1eb      	bne.n	1a00069a <actualizar_cuenta+0x6e>
						MEF_tareas(i,j);//
1a0006c2:	4621      	mov	r1, r4
1a0006c4:	4628      	mov	r0, r5
1a0006c6:	f7ff ff25 	bl	1a000514 <MEF_tareas>
1a0006ca:	e7e6      	b.n	1a00069a <actualizar_cuenta+0x6e>
			for(j=0;j<MAX_VECTOR_SIZE;j++){
1a0006cc:	2400      	movs	r4, #0
1a0006ce:	e7e5      	b.n	1a00069c <actualizar_cuenta+0x70>
	for(i=1;i<MAX_VECTOR_SIZE-1;i++){
1a0006d0:	3501      	adds	r5, #1
1a0006d2:	2d03      	cmp	r5, #3
1a0006d4:	d807      	bhi.n	1a0006e6 <actualizar_cuenta+0xba>
		switch(i){
1a0006d6:	2d02      	cmp	r5, #2
1a0006d8:	d0dd      	beq.n	1a000696 <actualizar_cuenta+0x6a>
1a0006da:	2d03      	cmp	r5, #3
1a0006dc:	d0f6      	beq.n	1a0006cc <actualizar_cuenta+0xa0>
1a0006de:	2d01      	cmp	r5, #1
1a0006e0:	d1f6      	bne.n	1a0006d0 <actualizar_cuenta+0xa4>
			for(j=0;j<MAX_VECTOR_SIZE;j++){
1a0006e2:	2400      	movs	r4, #0
1a0006e4:	e7a6      	b.n	1a000634 <actualizar_cuenta+0x8>
}
1a0006e6:	bd38      	pop	{r3, r4, r5, pc}
1a0006e8:	10000398 	.word	0x10000398
1a0006ec:	100002f0 	.word	0x100002f0
1a0006f0:	10000410 	.word	0x10000410

1a0006f4 <SysTick_Handler>:
void SysTick_Handler(void){
1a0006f4:	b508      	push	{r3, lr}
	actualizar_cuenta();					//actualiza los contadores de los delays
1a0006f6:	f7ff ff99 	bl	1a00062c <actualizar_cuenta>
	schedule();
1a0006fa:	f7ff fecf 	bl	1a00049c <schedule>
}
1a0006fe:	bd08      	pop	{r3, pc}

1a000700 <init_stack>:
{
1a000700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a000702:	4605      	mov	r5, r0
1a000704:	460c      	mov	r4, r1
1a000706:	4616      	mov	r6, r2
1a000708:	461f      	mov	r7, r3
	bzero(stack,stack_size);							//se inicializa(limpia) el stack
1a00070a:	460a      	mov	r2, r1
1a00070c:	2100      	movs	r1, #0
1a00070e:	f001 fea1 	bl	1a002454 <memset>
	stack[stack_size/4-1]=1<<24;						//xpsr en 1 modo tumb
1a000712:	f024 0103 	bic.w	r1, r4, #3
1a000716:	1f0b      	subs	r3, r1, #4
1a000718:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
1a00071c:	50ea      	str	r2, [r5, r3]
	stack[stack_size/4-2]=(uint32_t)entry_point;		//PC
1a00071e:	f1a1 0308 	sub.w	r3, r1, #8
1a000722:	50ef      	str	r7, [r5, r3]
	stack[stack_size/4-3]=(uint32_t)task_return_hook;	//LR task_return_hook
1a000724:	f1a1 030c 	sub.w	r3, r1, #12
1a000728:	4a07      	ldr	r2, [pc, #28]	; (1a000748 <init_stack+0x48>)
1a00072a:	50ea      	str	r2, [r5, r3]
	stack[stack_size/4-8]=(uint32_t)arg;				//R0, se apunta a R0
1a00072c:	f1a1 0320 	sub.w	r3, r1, #32
1a000730:	9a06      	ldr	r2, [sp, #24]
1a000732:	50ea      	str	r2, [r5, r3]
	stack[stack_size/4-9]=0xFFFFFFF9;					//LR IRQ
1a000734:	f1a1 0324 	sub.w	r3, r1, #36	; 0x24
1a000738:	f06f 0206 	mvn.w	r2, #6
1a00073c:	50ea      	str	r2, [r5, r3]
	*sp=(uint32_t)&(stack[stack_size/4-17]);			//se apunta(guarda) a 8 registros mas luego de R0
1a00073e:	3944      	subs	r1, #68	; 0x44
1a000740:	4429      	add	r1, r5
1a000742:	6031      	str	r1, [r6, #0]
}
1a000744:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a000746:	bf00      	nop
1a000748:	1a000439 	.word	0x1a000439

1a00074c <crear_tarea>:
{
1a00074c:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00074e:	b083      	sub	sp, #12
1a000750:	461d      	mov	r5, r3
1a000752:	9c08      	ldr	r4, [sp, #32]
	switch(prioridad){
1a000754:	2c02      	cmp	r4, #2
1a000756:	d023      	beq.n	1a0007a0 <crear_tarea+0x54>
1a000758:	2c03      	cmp	r4, #3
1a00075a:	d03e      	beq.n	1a0007da <crear_tarea+0x8e>
1a00075c:	2c01      	cmp	r4, #1
1a00075e:	d002      	beq.n	1a000766 <crear_tarea+0x1a>
}
1a000760:	2000      	movs	r0, #0
1a000762:	b003      	add	sp, #12
1a000764:	bdf0      	pop	{r4, r5, r6, r7, pc}
		init_stack(stack,size,&vector_p1[cont_uno].sp,p_tarea,(void *)arg);
1a000766:	4f2b      	ldr	r7, [pc, #172]	; (1a000814 <crear_tarea+0xc8>)
1a000768:	683b      	ldr	r3, [r7, #0]
1a00076a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
1a00076e:	00da      	lsls	r2, r3, #3
1a000770:	4e29      	ldr	r6, [pc, #164]	; (1a000818 <crear_tarea+0xcc>)
1a000772:	4432      	add	r2, r6
1a000774:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a000776:	9300      	str	r3, [sp, #0]
1a000778:	460b      	mov	r3, r1
1a00077a:	3204      	adds	r2, #4
1a00077c:	4629      	mov	r1, r5
1a00077e:	f7ff ffbf 	bl	1a000700 <init_stack>
		vector_p1[cont_uno].prioridad=prioridad;
1a000782:	683b      	ldr	r3, [r7, #0]
1a000784:	005a      	lsls	r2, r3, #1
1a000786:	441a      	add	r2, r3
1a000788:	00d1      	lsls	r1, r2, #3
1a00078a:	1872      	adds	r2, r6, r1
1a00078c:	6094      	str	r4, [r2, #8]
		vector_p1[cont_uno].tamano=size;
1a00078e:	5075      	str	r5, [r6, r1]
		vector_p1[cont_uno].id=cont_uno;
1a000790:	6153      	str	r3, [r2, #20]
		vector_p1[cont_uno].estado=ready;
1a000792:	2100      	movs	r1, #0
1a000794:	7311      	strb	r1, [r2, #12]
		if(cont_uno<MAX_VECTOR_SIZE-1){
1a000796:	2b03      	cmp	r3, #3
1a000798:	d8e2      	bhi.n	1a000760 <crear_tarea+0x14>
			cont_uno++;
1a00079a:	3301      	adds	r3, #1
1a00079c:	603b      	str	r3, [r7, #0]
1a00079e:	e7df      	b.n	1a000760 <crear_tarea+0x14>
		init_stack(stack,size,&vector_p2[cont_dos].sp,p_tarea,(void *)arg);
1a0007a0:	4f1e      	ldr	r7, [pc, #120]	; (1a00081c <crear_tarea+0xd0>)
1a0007a2:	683b      	ldr	r3, [r7, #0]
1a0007a4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
1a0007a8:	00da      	lsls	r2, r3, #3
1a0007aa:	4e1d      	ldr	r6, [pc, #116]	; (1a000820 <crear_tarea+0xd4>)
1a0007ac:	4432      	add	r2, r6
1a0007ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0007b0:	9300      	str	r3, [sp, #0]
1a0007b2:	460b      	mov	r3, r1
1a0007b4:	3204      	adds	r2, #4
1a0007b6:	4629      	mov	r1, r5
1a0007b8:	f7ff ffa2 	bl	1a000700 <init_stack>
		vector_p2[cont_dos].prioridad=prioridad;
1a0007bc:	683b      	ldr	r3, [r7, #0]
1a0007be:	005a      	lsls	r2, r3, #1
1a0007c0:	441a      	add	r2, r3
1a0007c2:	00d1      	lsls	r1, r2, #3
1a0007c4:	1872      	adds	r2, r6, r1
1a0007c6:	6094      	str	r4, [r2, #8]
		vector_p2[cont_dos].tamano=size;
1a0007c8:	5075      	str	r5, [r6, r1]
		vector_p2[cont_dos].id=cont_dos;
1a0007ca:	6153      	str	r3, [r2, #20]
		vector_p2[cont_dos].estado=ready;
1a0007cc:	2100      	movs	r1, #0
1a0007ce:	7311      	strb	r1, [r2, #12]
		if(cont_dos<MAX_VECTOR_SIZE-1){
1a0007d0:	2b03      	cmp	r3, #3
1a0007d2:	d8c5      	bhi.n	1a000760 <crear_tarea+0x14>
			cont_dos++;
1a0007d4:	3301      	adds	r3, #1
1a0007d6:	603b      	str	r3, [r7, #0]
1a0007d8:	e7c2      	b.n	1a000760 <crear_tarea+0x14>
		init_stack(stack,size,&vector_p3[cont_tres].sp,p_tarea,(void *)arg);
1a0007da:	4f12      	ldr	r7, [pc, #72]	; (1a000824 <crear_tarea+0xd8>)
1a0007dc:	683b      	ldr	r3, [r7, #0]
1a0007de:	eb03 0343 	add.w	r3, r3, r3, lsl #1
1a0007e2:	00da      	lsls	r2, r3, #3
1a0007e4:	4e10      	ldr	r6, [pc, #64]	; (1a000828 <crear_tarea+0xdc>)
1a0007e6:	4432      	add	r2, r6
1a0007e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0007ea:	9300      	str	r3, [sp, #0]
1a0007ec:	460b      	mov	r3, r1
1a0007ee:	3204      	adds	r2, #4
1a0007f0:	4629      	mov	r1, r5
1a0007f2:	f7ff ff85 	bl	1a000700 <init_stack>
		vector_p3[cont_tres].prioridad=prioridad;
1a0007f6:	683b      	ldr	r3, [r7, #0]
1a0007f8:	005a      	lsls	r2, r3, #1
1a0007fa:	441a      	add	r2, r3
1a0007fc:	00d1      	lsls	r1, r2, #3
1a0007fe:	1872      	adds	r2, r6, r1
1a000800:	6094      	str	r4, [r2, #8]
		vector_p3[cont_tres].tamano=size;
1a000802:	5075      	str	r5, [r6, r1]
		vector_p3[cont_tres].id=cont_tres;
1a000804:	6153      	str	r3, [r2, #20]
		vector_p3[cont_tres].estado=ready;
1a000806:	2100      	movs	r1, #0
1a000808:	7311      	strb	r1, [r2, #12]
		if(cont_tres<MAX_VECTOR_SIZE-1){
1a00080a:	2b03      	cmp	r3, #3
1a00080c:	d8a8      	bhi.n	1a000760 <crear_tarea+0x14>
			cont_tres++;
1a00080e:	3301      	adds	r3, #1
1a000810:	603b      	str	r3, [r7, #0]
1a000812:	e7a5      	b.n	1a000760 <crear_tarea+0x14>
1a000814:	10000010 	.word	0x10000010
1a000818:	10000398 	.word	0x10000398
1a00081c:	10000004 	.word	0x10000004
1a000820:	100002f0 	.word	0x100002f0
1a000824:	1000000c 	.word	0x1000000c
1a000828:	10000410 	.word	0x10000410

1a00082c <iniciar_vtareas>:
	}
	return NULL;
}

void iniciar_vtareas(void){
1a00082c:	b530      	push	{r4, r5, lr}
1a00082e:	b083      	sub	sp, #12
	uint32_t i;

	for(i=0;i<MAX_VECTOR_SIZE;i++)
1a000830:	2300      	movs	r3, #0
1a000832:	e00e      	b.n	1a000852 <iniciar_vtareas+0x26>
	{
		vector_p1[i].contador=0;
1a000834:	4c25      	ldr	r4, [pc, #148]	; (1a0008cc <iniciar_vtareas+0xa0>)
1a000836:	005a      	lsls	r2, r3, #1
1a000838:	441a      	add	r2, r3
1a00083a:	00d1      	lsls	r1, r2, #3
1a00083c:	1862      	adds	r2, r4, r1
1a00083e:	2000      	movs	r0, #0
1a000840:	6110      	str	r0, [r2, #16]
		vector_p1[i].estado=suspended;
1a000842:	2503      	movs	r5, #3
1a000844:	7315      	strb	r5, [r2, #12]
		vector_p1[i].prioridad=1;
1a000846:	2501      	movs	r5, #1
1a000848:	6095      	str	r5, [r2, #8]
		vector_p1[i].sp=0;
1a00084a:	6050      	str	r0, [r2, #4]
		vector_p1[i].tamano=0;
1a00084c:	5060      	str	r0, [r4, r1]
		vector_p1[i].id=i;
1a00084e:	6153      	str	r3, [r2, #20]
	for(i=0;i<MAX_VECTOR_SIZE;i++)
1a000850:	442b      	add	r3, r5
1a000852:	2b04      	cmp	r3, #4
1a000854:	d9ee      	bls.n	1a000834 <iniciar_vtareas+0x8>
	}
	for(i=0;i<MAX_VECTOR_SIZE;i++)
1a000856:	2300      	movs	r3, #0
1a000858:	e00e      	b.n	1a000878 <iniciar_vtareas+0x4c>
	{
		vector_p2[i].contador=0;
1a00085a:	4c1d      	ldr	r4, [pc, #116]	; (1a0008d0 <iniciar_vtareas+0xa4>)
1a00085c:	005a      	lsls	r2, r3, #1
1a00085e:	441a      	add	r2, r3
1a000860:	00d1      	lsls	r1, r2, #3
1a000862:	1862      	adds	r2, r4, r1
1a000864:	2000      	movs	r0, #0
1a000866:	6110      	str	r0, [r2, #16]
		vector_p2[i].estado=suspended;
1a000868:	2503      	movs	r5, #3
1a00086a:	7315      	strb	r5, [r2, #12]
		vector_p2[i].prioridad=2;
1a00086c:	2502      	movs	r5, #2
1a00086e:	6095      	str	r5, [r2, #8]
		vector_p2[i].sp=0;
1a000870:	6050      	str	r0, [r2, #4]
		vector_p2[i].tamano=0;
1a000872:	5060      	str	r0, [r4, r1]
		vector_p2[i].id=i;
1a000874:	6153      	str	r3, [r2, #20]
	for(i=0;i<MAX_VECTOR_SIZE;i++)
1a000876:	3301      	adds	r3, #1
1a000878:	2b04      	cmp	r3, #4
1a00087a:	d9ee      	bls.n	1a00085a <iniciar_vtareas+0x2e>
	}
	for(i=0;i<MAX_VECTOR_SIZE;i++)
1a00087c:	2300      	movs	r3, #0
1a00087e:	e00d      	b.n	1a00089c <iniciar_vtareas+0x70>
	{
		vector_p3[i].contador=0;
1a000880:	4c14      	ldr	r4, [pc, #80]	; (1a0008d4 <iniciar_vtareas+0xa8>)
1a000882:	005a      	lsls	r2, r3, #1
1a000884:	441a      	add	r2, r3
1a000886:	00d1      	lsls	r1, r2, #3
1a000888:	1862      	adds	r2, r4, r1
1a00088a:	2000      	movs	r0, #0
1a00088c:	6110      	str	r0, [r2, #16]
		vector_p3[i].estado=suspended;
1a00088e:	2503      	movs	r5, #3
1a000890:	7315      	strb	r5, [r2, #12]
		vector_p3[i].prioridad=3;
1a000892:	6095      	str	r5, [r2, #8]
		vector_p3[i].sp=0;
1a000894:	6050      	str	r0, [r2, #4]
		vector_p3[i].tamano=0;
1a000896:	5060      	str	r0, [r4, r1]
		vector_p3[i].id=i;
1a000898:	6153      	str	r3, [r2, #20]
	for(i=0;i<MAX_VECTOR_SIZE;i++)
1a00089a:	3301      	adds	r3, #1
1a00089c:	2b04      	cmp	r3, #4
1a00089e:	d9ef      	bls.n	1a000880 <iniciar_vtareas+0x54>
	}
	//inicializar tarea idle
	init_stack(stack0,STACK_SIZE,&sp0,task_idle,(void *)0x11223344);
1a0008a0:	4c0d      	ldr	r4, [pc, #52]	; (1a0008d8 <iniciar_vtareas+0xac>)
1a0008a2:	4b0e      	ldr	r3, [pc, #56]	; (1a0008dc <iniciar_vtareas+0xb0>)
1a0008a4:	9300      	str	r3, [sp, #0]
1a0008a6:	4b0e      	ldr	r3, [pc, #56]	; (1a0008e0 <iniciar_vtareas+0xb4>)
1a0008a8:	4622      	mov	r2, r4
1a0008aa:	f44f 7100 	mov.w	r1, #512	; 0x200
1a0008ae:	480d      	ldr	r0, [pc, #52]	; (1a0008e4 <iniciar_vtareas+0xb8>)
1a0008b0:	f7ff ff26 	bl	1a000700 <init_stack>
	vector_p_idle[0].contador=0;
1a0008b4:	4b0c      	ldr	r3, [pc, #48]	; (1a0008e8 <iniciar_vtareas+0xbc>)
1a0008b6:	2200      	movs	r2, #0
1a0008b8:	611a      	str	r2, [r3, #16]
	vector_p_idle[0].estado=ready;
1a0008ba:	731a      	strb	r2, [r3, #12]
	vector_p_idle[0].prioridad=4;
1a0008bc:	2104      	movs	r1, #4
1a0008be:	6099      	str	r1, [r3, #8]
	vector_p_idle[0].sp=sp0;
1a0008c0:	6821      	ldr	r1, [r4, #0]
1a0008c2:	6059      	str	r1, [r3, #4]
	vector_p_idle[0].id=0;
1a0008c4:	615a      	str	r2, [r3, #20]

}
1a0008c6:	b003      	add	sp, #12
1a0008c8:	bd30      	pop	{r4, r5, pc}
1a0008ca:	bf00      	nop
1a0008cc:	10000398 	.word	0x10000398
1a0008d0:	100002f0 	.word	0x100002f0
1a0008d4:	10000410 	.word	0x10000410
1a0008d8:	10000488 	.word	0x10000488
1a0008dc:	11223344 	.word	0x11223344
1a0008e0:	1a00043d 	.word	0x1a00043d
1a0008e4:	10000078 	.word	0x10000078
1a0008e8:	10000278 	.word	0x10000278

1a0008ec <selec_prioridad>:
uint32_t selec_prioridad(void){
	uint32_t i,j;
	uint32_t ready_p1=0,ready_p2=0,ready_p3=0;
1a0008ec:	2200      	movs	r2, #0

	for(j=0;j<MAX_VECTOR_SIZE;j++){
1a0008ee:	4613      	mov	r3, r2
1a0008f0:	e000      	b.n	1a0008f4 <selec_prioridad+0x8>
1a0008f2:	3301      	adds	r3, #1
1a0008f4:	2b04      	cmp	r3, #4
1a0008f6:	d809      	bhi.n	1a00090c <selec_prioridad+0x20>
		if(vector_p1[j].estado==ready){
1a0008f8:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a0008fc:	00c8      	lsls	r0, r1, #3
1a0008fe:	491c      	ldr	r1, [pc, #112]	; (1a000970 <selec_prioridad+0x84>)
1a000900:	4401      	add	r1, r0
1a000902:	7b09      	ldrb	r1, [r1, #12]
1a000904:	2900      	cmp	r1, #0
1a000906:	d1f4      	bne.n	1a0008f2 <selec_prioridad+0x6>
			ready_p1++;
1a000908:	3201      	adds	r2, #1
1a00090a:	e7f2      	b.n	1a0008f2 <selec_prioridad+0x6>
		}
	}

	if(ready_p1>0){
1a00090c:	b90a      	cbnz	r2, 1a000912 <selec_prioridad+0x26>
	uint32_t ready_p1=0,ready_p2=0,ready_p3=0;
1a00090e:	4613      	mov	r3, r2
1a000910:	e005      	b.n	1a00091e <selec_prioridad+0x32>
		cont_prioridad=alta;
1a000912:	4b18      	ldr	r3, [pc, #96]	; (1a000974 <selec_prioridad+0x88>)
1a000914:	2200      	movs	r2, #0
1a000916:	701a      	strb	r2, [r3, #0]
					}
			}
	}

	return 0;
}
1a000918:	2000      	movs	r0, #0
1a00091a:	4770      	bx	lr
			for(j=0;j<MAX_VECTOR_SIZE;j++){
1a00091c:	3201      	adds	r2, #1
1a00091e:	2a04      	cmp	r2, #4
1a000920:	d809      	bhi.n	1a000936 <selec_prioridad+0x4a>
				if(vector_p2[j].estado==ready){
1a000922:	eb02 0142 	add.w	r1, r2, r2, lsl #1
1a000926:	00c8      	lsls	r0, r1, #3
1a000928:	4913      	ldr	r1, [pc, #76]	; (1a000978 <selec_prioridad+0x8c>)
1a00092a:	4401      	add	r1, r0
1a00092c:	7b09      	ldrb	r1, [r1, #12]
1a00092e:	2900      	cmp	r1, #0
1a000930:	d1f4      	bne.n	1a00091c <selec_prioridad+0x30>
				ready_p2++;
1a000932:	3301      	adds	r3, #1
1a000934:	e7f2      	b.n	1a00091c <selec_prioridad+0x30>
			if(ready_p2>0){
1a000936:	b90b      	cbnz	r3, 1a00093c <selec_prioridad+0x50>
	uint32_t ready_p1=0,ready_p2=0,ready_p3=0;
1a000938:	4618      	mov	r0, r3
1a00093a:	e004      	b.n	1a000946 <selec_prioridad+0x5a>
				cont_prioridad=media;
1a00093c:	4b0d      	ldr	r3, [pc, #52]	; (1a000974 <selec_prioridad+0x88>)
1a00093e:	2201      	movs	r2, #1
1a000940:	701a      	strb	r2, [r3, #0]
1a000942:	e7e9      	b.n	1a000918 <selec_prioridad+0x2c>
					for(j=0;j<MAX_VECTOR_SIZE;j++){
1a000944:	3301      	adds	r3, #1
1a000946:	2b04      	cmp	r3, #4
1a000948:	d809      	bhi.n	1a00095e <selec_prioridad+0x72>
						if(vector_p3[j].estado==ready){
1a00094a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a00094e:	00d1      	lsls	r1, r2, #3
1a000950:	4a0a      	ldr	r2, [pc, #40]	; (1a00097c <selec_prioridad+0x90>)
1a000952:	440a      	add	r2, r1
1a000954:	7b12      	ldrb	r2, [r2, #12]
1a000956:	2a00      	cmp	r2, #0
1a000958:	d1f4      	bne.n	1a000944 <selec_prioridad+0x58>
							ready_p3++;
1a00095a:	3001      	adds	r0, #1
1a00095c:	e7f2      	b.n	1a000944 <selec_prioridad+0x58>
					if(ready_p3>0){
1a00095e:	b918      	cbnz	r0, 1a000968 <selec_prioridad+0x7c>
						cont_prioridad=idle;
1a000960:	4b04      	ldr	r3, [pc, #16]	; (1a000974 <selec_prioridad+0x88>)
1a000962:	2203      	movs	r2, #3
1a000964:	701a      	strb	r2, [r3, #0]
1a000966:	e7d7      	b.n	1a000918 <selec_prioridad+0x2c>
						cont_prioridad=baja;
1a000968:	4b02      	ldr	r3, [pc, #8]	; (1a000974 <selec_prioridad+0x88>)
1a00096a:	2202      	movs	r2, #2
1a00096c:	701a      	strb	r2, [r3, #0]
1a00096e:	e7d3      	b.n	1a000918 <selec_prioridad+0x2c>
1a000970:	10000398 	.word	0x10000398
1a000974:	10000008 	.word	0x10000008
1a000978:	100002f0 	.word	0x100002f0
1a00097c:	10000410 	.word	0x10000410

1a000980 <actualizar_vInicio>:
void actualizar_vInicio(uint32_t id,uint32_t prioridad){


	switch(prioridad){
1a000980:	3901      	subs	r1, #1
1a000982:	2903      	cmp	r1, #3
1a000984:	d826      	bhi.n	1a0009d4 <actualizar_vInicio+0x54>
1a000986:	e8df f001 	tbb	[pc, r1]
1a00098a:	0b02      	.short	0x0b02
1a00098c:	1d14      	.short	0x1d14
	case 1:
		vector_p1[id].sp=vector_cambio[0].sp;
1a00098e:	4b12      	ldr	r3, [pc, #72]	; (1a0009d8 <actualizar_vInicio+0x58>)
1a000990:	6859      	ldr	r1, [r3, #4]
1a000992:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a000996:	00c2      	lsls	r2, r0, #3
1a000998:	4b10      	ldr	r3, [pc, #64]	; (1a0009dc <actualizar_vInicio+0x5c>)
1a00099a:	4413      	add	r3, r2
1a00099c:	6059      	str	r1, [r3, #4]
		break;
1a00099e:	4770      	bx	lr
	case 2:
		vector_p2[id].sp=vector_cambio[0].sp;
1a0009a0:	4b0d      	ldr	r3, [pc, #52]	; (1a0009d8 <actualizar_vInicio+0x58>)
1a0009a2:	6859      	ldr	r1, [r3, #4]
1a0009a4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0009a8:	00c2      	lsls	r2, r0, #3
1a0009aa:	4b0d      	ldr	r3, [pc, #52]	; (1a0009e0 <actualizar_vInicio+0x60>)
1a0009ac:	4413      	add	r3, r2
1a0009ae:	6059      	str	r1, [r3, #4]
		break;
1a0009b0:	4770      	bx	lr
	case 3:
		vector_p3[id].sp=vector_cambio[0].sp;
1a0009b2:	4b09      	ldr	r3, [pc, #36]	; (1a0009d8 <actualizar_vInicio+0x58>)
1a0009b4:	6859      	ldr	r1, [r3, #4]
1a0009b6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0009ba:	00c2      	lsls	r2, r0, #3
1a0009bc:	4b09      	ldr	r3, [pc, #36]	; (1a0009e4 <actualizar_vInicio+0x64>)
1a0009be:	4413      	add	r3, r2
1a0009c0:	6059      	str	r1, [r3, #4]
		break;
1a0009c2:	4770      	bx	lr
	case 4:
		vector_p_idle[id].sp=vector_cambio[0].sp;
1a0009c4:	4b04      	ldr	r3, [pc, #16]	; (1a0009d8 <actualizar_vInicio+0x58>)
1a0009c6:	6859      	ldr	r1, [r3, #4]
1a0009c8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0009cc:	00c2      	lsls	r2, r0, #3
1a0009ce:	4b06      	ldr	r3, [pc, #24]	; (1a0009e8 <actualizar_vInicio+0x68>)
1a0009d0:	4413      	add	r3, r2
1a0009d2:	6059      	str	r1, [r3, #4]
		break;
	default:
		break;
	}

}
1a0009d4:	4770      	bx	lr
1a0009d6:	bf00      	nop
1a0009d8:	10000368 	.word	0x10000368
1a0009dc:	10000398 	.word	0x10000398
1a0009e0:	100002f0 	.word	0x100002f0
1a0009e4:	10000410 	.word	0x10000410
1a0009e8:	10000278 	.word	0x10000278

1a0009ec <get_next_context>:
uint32_t get_next_context(uint32_t current_sp){
1a0009ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a0009ee:	4605      	mov	r5, r0
	MEF_tareas(vector_cambio[0].prioridad,vector_cambio[0].id);
1a0009f0:	4b79      	ldr	r3, [pc, #484]	; (1a000bd8 <get_next_context+0x1ec>)
1a0009f2:	6959      	ldr	r1, [r3, #20]
1a0009f4:	6898      	ldr	r0, [r3, #8]
1a0009f6:	f7ff fd8d 	bl	1a000514 <MEF_tareas>
	selec_prioridad();
1a0009fa:	f7ff ff77 	bl	1a0008ec <selec_prioridad>
	switch(cont_prioridad){
1a0009fe:	4b77      	ldr	r3, [pc, #476]	; (1a000bdc <get_next_context+0x1f0>)
1a000a00:	781b      	ldrb	r3, [r3, #0]
1a000a02:	2b03      	cmp	r3, #3
1a000a04:	f200 80e4 	bhi.w	1a000bd0 <get_next_context+0x1e4>
1a000a08:	e8df f013 	tbh	[pc, r3, lsl #1]
1a000a0c:	00830043 	.word	0x00830043
1a000a10:	00c500c3 	.word	0x00c500c3
				vector_cambio[0].sp=current_sp;
1a000a14:	4c70      	ldr	r4, [pc, #448]	; (1a000bd8 <get_next_context+0x1ec>)
1a000a16:	6065      	str	r5, [r4, #4]
				actualizar_vInicio(vector_cambio[0].id,vector_cambio[0].prioridad);
1a000a18:	68a1      	ldr	r1, [r4, #8]
1a000a1a:	6960      	ldr	r0, [r4, #20]
1a000a1c:	f7ff ffb0 	bl	1a000980 <actualizar_vInicio>
				vector_cambio[1].id=vector_p1[indice_p1].id;
1a000a20:	4b6f      	ldr	r3, [pc, #444]	; (1a000be0 <get_next_context+0x1f4>)
1a000a22:	681f      	ldr	r7, [r3, #0]
1a000a24:	4e6f      	ldr	r6, [pc, #444]	; (1a000be4 <get_next_context+0x1f8>)
1a000a26:	007b      	lsls	r3, r7, #1
1a000a28:	19d9      	adds	r1, r3, r7
1a000a2a:	00ca      	lsls	r2, r1, #3
1a000a2c:	4432      	add	r2, r6
1a000a2e:	6951      	ldr	r1, [r2, #20]
1a000a30:	62e1      	str	r1, [r4, #44]	; 0x2c
				vector_cambio[1].prioridad=vector_p1[indice_p1].prioridad;
1a000a32:	6890      	ldr	r0, [r2, #8]
1a000a34:	6220      	str	r0, [r4, #32]
				vector_cambio[1].sp=vector_p1[indice_p1].sp;
1a000a36:	443b      	add	r3, r7
1a000a38:	00da      	lsls	r2, r3, #3
1a000a3a:	4416      	add	r6, r2
1a000a3c:	6873      	ldr	r3, [r6, #4]
1a000a3e:	61e3      	str	r3, [r4, #28]
				next_sp=vector_cambio[1].sp;
1a000a40:	4a69      	ldr	r2, [pc, #420]	; (1a000be8 <get_next_context+0x1fc>)
1a000a42:	6013      	str	r3, [r2, #0]
				MEF_tareas(vector_cambio[1].prioridad,vector_cambio[1].id);
1a000a44:	f7ff fd66 	bl	1a000514 <MEF_tareas>
				vector_cambio[0].id=vector_cambio[1].id;
1a000a48:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
1a000a4a:	6160      	str	r0, [r4, #20]
				vector_cambio[0].prioridad=vector_cambio[1].prioridad;
1a000a4c:	6a21      	ldr	r1, [r4, #32]
1a000a4e:	60a1      	str	r1, [r4, #8]
				vector_cambio[0].sp=vector_cambio[1].sp;
1a000a50:	69e3      	ldr	r3, [r4, #28]
1a000a52:	6063      	str	r3, [r4, #4]
				actualizar_vInicio(vector_cambio[1].id,vector_cambio[1].prioridad);
1a000a54:	f7ff ff94 	bl	1a000980 <actualizar_vInicio>
				libre=1;
1a000a58:	2101      	movs	r1, #1
1a000a5a:	e00f      	b.n	1a000a7c <get_next_context+0x90>
				indice_p1=0;
1a000a5c:	4b60      	ldr	r3, [pc, #384]	; (1a000be0 <get_next_context+0x1f4>)
1a000a5e:	2200      	movs	r2, #0
1a000a60:	601a      	str	r2, [r3, #0]
		while(libre==0){
1a000a62:	2900      	cmp	r1, #0
1a000a64:	f040 80b4 	bne.w	1a000bd0 <get_next_context+0x1e4>
			if(vector_p1[indice_p1].estado==ready){
1a000a68:	4b5d      	ldr	r3, [pc, #372]	; (1a000be0 <get_next_context+0x1f4>)
1a000a6a:	681b      	ldr	r3, [r3, #0]
1a000a6c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
1a000a70:	00da      	lsls	r2, r3, #3
1a000a72:	4b5c      	ldr	r3, [pc, #368]	; (1a000be4 <get_next_context+0x1f8>)
1a000a74:	4413      	add	r3, r2
1a000a76:	7b1b      	ldrb	r3, [r3, #12]
1a000a78:	2b00      	cmp	r3, #0
1a000a7a:	d0cb      	beq.n	1a000a14 <get_next_context+0x28>
			if(indice_p1<cont_uno-1){
1a000a7c:	4b5b      	ldr	r3, [pc, #364]	; (1a000bec <get_next_context+0x200>)
1a000a7e:	681b      	ldr	r3, [r3, #0]
1a000a80:	3b01      	subs	r3, #1
1a000a82:	4a57      	ldr	r2, [pc, #348]	; (1a000be0 <get_next_context+0x1f4>)
1a000a84:	6812      	ldr	r2, [r2, #0]
1a000a86:	4293      	cmp	r3, r2
1a000a88:	d9e8      	bls.n	1a000a5c <get_next_context+0x70>
				indice_p1++;
1a000a8a:	3201      	adds	r2, #1
1a000a8c:	4b54      	ldr	r3, [pc, #336]	; (1a000be0 <get_next_context+0x1f4>)
1a000a8e:	601a      	str	r2, [r3, #0]
1a000a90:	e7e7      	b.n	1a000a62 <get_next_context+0x76>
	uint32_t libre=0;
1a000a92:	2100      	movs	r1, #0
1a000a94:	e7e5      	b.n	1a000a62 <get_next_context+0x76>
				vector_cambio[0].sp=current_sp;
1a000a96:	4c50      	ldr	r4, [pc, #320]	; (1a000bd8 <get_next_context+0x1ec>)
1a000a98:	6065      	str	r5, [r4, #4]
				actualizar_vInicio(vector_cambio[0].id,vector_cambio[0].prioridad);
1a000a9a:	68a1      	ldr	r1, [r4, #8]
1a000a9c:	6960      	ldr	r0, [r4, #20]
1a000a9e:	f7ff ff6f 	bl	1a000980 <actualizar_vInicio>
				vector_cambio[1].id=vector_p2[indice_p2].id;
1a000aa2:	4b53      	ldr	r3, [pc, #332]	; (1a000bf0 <get_next_context+0x204>)
1a000aa4:	681f      	ldr	r7, [r3, #0]
1a000aa6:	4e53      	ldr	r6, [pc, #332]	; (1a000bf4 <get_next_context+0x208>)
1a000aa8:	007b      	lsls	r3, r7, #1
1a000aaa:	19d9      	adds	r1, r3, r7
1a000aac:	00ca      	lsls	r2, r1, #3
1a000aae:	4432      	add	r2, r6
1a000ab0:	6951      	ldr	r1, [r2, #20]
1a000ab2:	62e1      	str	r1, [r4, #44]	; 0x2c
				vector_cambio[1].prioridad=vector_p2[indice_p2].prioridad;
1a000ab4:	6890      	ldr	r0, [r2, #8]
1a000ab6:	6220      	str	r0, [r4, #32]
				vector_cambio[1].sp=vector_p2[indice_p2].sp;
1a000ab8:	443b      	add	r3, r7
1a000aba:	00da      	lsls	r2, r3, #3
1a000abc:	4416      	add	r6, r2
1a000abe:	6873      	ldr	r3, [r6, #4]
1a000ac0:	61e3      	str	r3, [r4, #28]
				next_sp=vector_cambio[1].sp;
1a000ac2:	4a49      	ldr	r2, [pc, #292]	; (1a000be8 <get_next_context+0x1fc>)
1a000ac4:	6013      	str	r3, [r2, #0]
				MEF_tareas(vector_cambio[1].prioridad,vector_cambio[1].id);
1a000ac6:	f7ff fd25 	bl	1a000514 <MEF_tareas>
				vector_cambio[0].id=vector_cambio[1].id;
1a000aca:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
1a000acc:	6160      	str	r0, [r4, #20]
				vector_cambio[0].prioridad=vector_cambio[1].prioridad;
1a000ace:	6a21      	ldr	r1, [r4, #32]
1a000ad0:	60a1      	str	r1, [r4, #8]
				vector_cambio[0].sp=vector_cambio[1].sp;
1a000ad2:	69e3      	ldr	r3, [r4, #28]
1a000ad4:	6063      	str	r3, [r4, #4]
				actualizar_vInicio(vector_cambio[1].id,vector_cambio[1].prioridad);
1a000ad6:	f7ff ff53 	bl	1a000980 <actualizar_vInicio>
				libre=1;
1a000ada:	2101      	movs	r1, #1
1a000adc:	e00e      	b.n	1a000afc <get_next_context+0x110>
				indice_p2=0;
1a000ade:	4b44      	ldr	r3, [pc, #272]	; (1a000bf0 <get_next_context+0x204>)
1a000ae0:	2200      	movs	r2, #0
1a000ae2:	601a      	str	r2, [r3, #0]
		while(libre==0){
1a000ae4:	2900      	cmp	r1, #0
1a000ae6:	d173      	bne.n	1a000bd0 <get_next_context+0x1e4>
			if(vector_p2[indice_p2].estado==ready){
1a000ae8:	4b41      	ldr	r3, [pc, #260]	; (1a000bf0 <get_next_context+0x204>)
1a000aea:	681b      	ldr	r3, [r3, #0]
1a000aec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
1a000af0:	00da      	lsls	r2, r3, #3
1a000af2:	4b40      	ldr	r3, [pc, #256]	; (1a000bf4 <get_next_context+0x208>)
1a000af4:	4413      	add	r3, r2
1a000af6:	7b1b      	ldrb	r3, [r3, #12]
1a000af8:	2b00      	cmp	r3, #0
1a000afa:	d0cc      	beq.n	1a000a96 <get_next_context+0xaa>
			if(indice_p2<cont_dos-1){
1a000afc:	4b3e      	ldr	r3, [pc, #248]	; (1a000bf8 <get_next_context+0x20c>)
1a000afe:	681b      	ldr	r3, [r3, #0]
1a000b00:	3b01      	subs	r3, #1
1a000b02:	4a3b      	ldr	r2, [pc, #236]	; (1a000bf0 <get_next_context+0x204>)
1a000b04:	6812      	ldr	r2, [r2, #0]
1a000b06:	4293      	cmp	r3, r2
1a000b08:	d9e9      	bls.n	1a000ade <get_next_context+0xf2>
				indice_p2++;
1a000b0a:	3201      	adds	r2, #1
1a000b0c:	4b38      	ldr	r3, [pc, #224]	; (1a000bf0 <get_next_context+0x204>)
1a000b0e:	601a      	str	r2, [r3, #0]
1a000b10:	e7e8      	b.n	1a000ae4 <get_next_context+0xf8>
	uint32_t libre=0;
1a000b12:	2100      	movs	r1, #0
1a000b14:	e7e6      	b.n	1a000ae4 <get_next_context+0xf8>
				vector_cambio[0].sp=current_sp;
1a000b16:	4c30      	ldr	r4, [pc, #192]	; (1a000bd8 <get_next_context+0x1ec>)
1a000b18:	6065      	str	r5, [r4, #4]
				actualizar_vInicio(vector_cambio[0].id,vector_cambio[0].prioridad);
1a000b1a:	68a1      	ldr	r1, [r4, #8]
1a000b1c:	6960      	ldr	r0, [r4, #20]
1a000b1e:	f7ff ff2f 	bl	1a000980 <actualizar_vInicio>
				vector_cambio[1].id=vector_p3[indice_p3].id;
1a000b22:	4b36      	ldr	r3, [pc, #216]	; (1a000bfc <get_next_context+0x210>)
1a000b24:	681f      	ldr	r7, [r3, #0]
1a000b26:	4e36      	ldr	r6, [pc, #216]	; (1a000c00 <get_next_context+0x214>)
1a000b28:	007b      	lsls	r3, r7, #1
1a000b2a:	19d9      	adds	r1, r3, r7
1a000b2c:	00ca      	lsls	r2, r1, #3
1a000b2e:	4432      	add	r2, r6
1a000b30:	6951      	ldr	r1, [r2, #20]
1a000b32:	62e1      	str	r1, [r4, #44]	; 0x2c
				vector_cambio[1].prioridad=vector_p3[indice_p3].prioridad;
1a000b34:	6890      	ldr	r0, [r2, #8]
1a000b36:	6220      	str	r0, [r4, #32]
				vector_cambio[1].sp=vector_p3[indice_p3].sp;
1a000b38:	443b      	add	r3, r7
1a000b3a:	00da      	lsls	r2, r3, #3
1a000b3c:	4416      	add	r6, r2
1a000b3e:	6873      	ldr	r3, [r6, #4]
1a000b40:	61e3      	str	r3, [r4, #28]
				next_sp=vector_cambio[1].sp;
1a000b42:	4a29      	ldr	r2, [pc, #164]	; (1a000be8 <get_next_context+0x1fc>)
1a000b44:	6013      	str	r3, [r2, #0]
				MEF_tareas(vector_cambio[1].prioridad,vector_cambio[1].id);
1a000b46:	f7ff fce5 	bl	1a000514 <MEF_tareas>
				vector_cambio[0].id=vector_cambio[1].id;
1a000b4a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
1a000b4c:	6160      	str	r0, [r4, #20]
				vector_cambio[0].prioridad=vector_cambio[1].prioridad;
1a000b4e:	6a21      	ldr	r1, [r4, #32]
1a000b50:	60a1      	str	r1, [r4, #8]
				vector_cambio[0].sp=vector_cambio[1].sp;
1a000b52:	69e3      	ldr	r3, [r4, #28]
1a000b54:	6063      	str	r3, [r4, #4]
				actualizar_vInicio(vector_cambio[1].id,vector_cambio[1].prioridad);
1a000b56:	f7ff ff13 	bl	1a000980 <actualizar_vInicio>
				libre=1;
1a000b5a:	2101      	movs	r1, #1
1a000b5c:	e00e      	b.n	1a000b7c <get_next_context+0x190>
				indice_p3=0;
1a000b5e:	4b27      	ldr	r3, [pc, #156]	; (1a000bfc <get_next_context+0x210>)
1a000b60:	2200      	movs	r2, #0
1a000b62:	601a      	str	r2, [r3, #0]
		while(libre==0){
1a000b64:	2900      	cmp	r1, #0
1a000b66:	d133      	bne.n	1a000bd0 <get_next_context+0x1e4>
			if(vector_p3[indice_p3].estado==ready){
1a000b68:	4b24      	ldr	r3, [pc, #144]	; (1a000bfc <get_next_context+0x210>)
1a000b6a:	681b      	ldr	r3, [r3, #0]
1a000b6c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
1a000b70:	00da      	lsls	r2, r3, #3
1a000b72:	4b23      	ldr	r3, [pc, #140]	; (1a000c00 <get_next_context+0x214>)
1a000b74:	4413      	add	r3, r2
1a000b76:	7b1b      	ldrb	r3, [r3, #12]
1a000b78:	2b00      	cmp	r3, #0
1a000b7a:	d0cc      	beq.n	1a000b16 <get_next_context+0x12a>
			if(indice_p3<cont_tres-1){
1a000b7c:	4b21      	ldr	r3, [pc, #132]	; (1a000c04 <get_next_context+0x218>)
1a000b7e:	681b      	ldr	r3, [r3, #0]
1a000b80:	3b01      	subs	r3, #1
1a000b82:	4a1e      	ldr	r2, [pc, #120]	; (1a000bfc <get_next_context+0x210>)
1a000b84:	6812      	ldr	r2, [r2, #0]
1a000b86:	4293      	cmp	r3, r2
1a000b88:	d9e9      	bls.n	1a000b5e <get_next_context+0x172>
				indice_p3++;
1a000b8a:	3201      	adds	r2, #1
1a000b8c:	4b1b      	ldr	r3, [pc, #108]	; (1a000bfc <get_next_context+0x210>)
1a000b8e:	601a      	str	r2, [r3, #0]
1a000b90:	e7e8      	b.n	1a000b64 <get_next_context+0x178>
	uint32_t libre=0;
1a000b92:	2100      	movs	r1, #0
1a000b94:	e7e6      	b.n	1a000b64 <get_next_context+0x178>
		vector_cambio[0].sp=current_sp;
1a000b96:	4c10      	ldr	r4, [pc, #64]	; (1a000bd8 <get_next_context+0x1ec>)
1a000b98:	6065      	str	r5, [r4, #4]
		MEF_tareas(vector_cambio[0].prioridad,vector_cambio[0].id);
1a000b9a:	6961      	ldr	r1, [r4, #20]
1a000b9c:	68a0      	ldr	r0, [r4, #8]
1a000b9e:	f7ff fcb9 	bl	1a000514 <MEF_tareas>
		actualizar_vInicio(vector_cambio[0].id,vector_cambio[0].prioridad);
1a000ba2:	68a1      	ldr	r1, [r4, #8]
1a000ba4:	6960      	ldr	r0, [r4, #20]
1a000ba6:	f7ff feeb 	bl	1a000980 <actualizar_vInicio>
		vector_cambio[1].id=vector_p_idle[0].id;
1a000baa:	4b17      	ldr	r3, [pc, #92]	; (1a000c08 <get_next_context+0x21c>)
1a000bac:	6959      	ldr	r1, [r3, #20]
1a000bae:	62e1      	str	r1, [r4, #44]	; 0x2c
		vector_cambio[1].prioridad=vector_p_idle[0].prioridad;
1a000bb0:	6898      	ldr	r0, [r3, #8]
1a000bb2:	6220      	str	r0, [r4, #32]
		vector_cambio[1].sp=vector_p_idle[0].sp;
1a000bb4:	685b      	ldr	r3, [r3, #4]
1a000bb6:	61e3      	str	r3, [r4, #28]
		next_sp=vector_cambio[1].sp;
1a000bb8:	4a0b      	ldr	r2, [pc, #44]	; (1a000be8 <get_next_context+0x1fc>)
1a000bba:	6013      	str	r3, [r2, #0]
		MEF_tareas(vector_cambio[1].prioridad,vector_cambio[1].id);
1a000bbc:	f7ff fcaa 	bl	1a000514 <MEF_tareas>
		vector_cambio[0].id=vector_cambio[1].id;
1a000bc0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
1a000bc2:	6160      	str	r0, [r4, #20]
		vector_cambio[0].prioridad=vector_cambio[1].prioridad;
1a000bc4:	6a21      	ldr	r1, [r4, #32]
1a000bc6:	60a1      	str	r1, [r4, #8]
		vector_cambio[0].sp=vector_cambio[1].sp;
1a000bc8:	69e3      	ldr	r3, [r4, #28]
1a000bca:	6063      	str	r3, [r4, #4]
		actualizar_vInicio(vector_cambio[1].id,vector_cambio[1].prioridad);
1a000bcc:	f7ff fed8 	bl	1a000980 <actualizar_vInicio>
}
1a000bd0:	4b05      	ldr	r3, [pc, #20]	; (1a000be8 <get_next_context+0x1fc>)
1a000bd2:	6818      	ldr	r0, [r3, #0]
1a000bd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a000bd6:	bf00      	nop
1a000bd8:	10000368 	.word	0x10000368
1a000bdc:	10000008 	.word	0x10000008
1a000be0:	10000014 	.word	0x10000014
1a000be4:	10000398 	.word	0x10000398
1a000be8:	1000048c 	.word	0x1000048c
1a000bec:	10000010 	.word	0x10000010
1a000bf0:	10000018 	.word	0x10000018
1a000bf4:	100002f0 	.word	0x100002f0
1a000bf8:	10000004 	.word	0x10000004
1a000bfc:	1000001c 	.word	0x1000001c
1a000c00:	10000410 	.word	0x10000410
1a000c04:	1000000c 	.word	0x1000000c
1a000c08:	10000278 	.word	0x10000278
1a000c0c:	ffffffff 	.word	0xffffffff

1a000c10 <task3>:
		t_delay(500);
		gpioToggle(LED2);
	}
	return NULL;
}
void * task3(void *arg){
1a000c10:	b508      	push	{r3, lr}
1a000c12:	ed2d 8b02 	vpush	{d8}

	float pi=3.1416;
1a000c16:	ed9f 8a12 	vldr	s16, [pc, #72]	; 1a000c60 <task3+0x50>

	while(pi!=0){
1a000c1a:	e013      	b.n	1a000c44 <task3+0x34>
		uint32_t i;
		t_delay(500);
1a000c1c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
1a000c20:	f7ff fc48 	bl	1a0004b4 <t_delay>
		Board_LED_Toggle(LED_3);
1a000c24:	2002      	movs	r0, #2
1a000c26:	f000 fdc1 	bl	1a0017ac <Board_LED_Toggle>
		pi*=1.1;
1a000c2a:	ee18 0a10 	vmov	r0, s16
1a000c2e:	f000 ffd7 	bl	1a001be0 <__aeabi_f2d>
1a000c32:	a309      	add	r3, pc, #36	; (adr r3, 1a000c58 <task3+0x48>)
1a000c34:	e9d3 2300 	ldrd	r2, r3, [r3]
1a000c38:	f001 f82a 	bl	1a001c90 <__aeabi_dmul>
1a000c3c:	f001 fa3a 	bl	1a0020b4 <__aeabi_d2f>
1a000c40:	ee08 0a10 	vmov	s16, r0
	while(pi!=0){
1a000c44:	eeb5 8a40 	vcmp.f32	s16, #0.0
1a000c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a000c4c:	d1e6      	bne.n	1a000c1c <task3+0xc>
	}
	return NULL;
}
1a000c4e:	2000      	movs	r0, #0
1a000c50:	ecbd 8b02 	vpop	{d8}
1a000c54:	bd08      	pop	{r3, pc}
1a000c56:	bf00      	nop
1a000c58:	9999999a 	.word	0x9999999a
1a000c5c:	3ff19999 	.word	0x3ff19999
1a000c60:	40490ff9 	.word	0x40490ff9

1a000c64 <task1>:
void * task1(void *arg){
1a000c64:	b508      	push	{r3, lr}
		t_delay(500);
1a000c66:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
1a000c6a:	f7ff fc23 	bl	1a0004b4 <t_delay>
		Board_LED_Toggle(LED_1);
1a000c6e:	2000      	movs	r0, #0
1a000c70:	f000 fd9c 	bl	1a0017ac <Board_LED_Toggle>
		liberar_semaforo(semaforo1);
1a000c74:	4b02      	ldr	r3, [pc, #8]	; (1a000c80 <task1+0x1c>)
1a000c76:	6818      	ldr	r0, [r3, #0]
1a000c78:	f7ff fba8 	bl	1a0003cc <liberar_semaforo>
1a000c7c:	e7f3      	b.n	1a000c66 <task1+0x2>
1a000c7e:	bf00      	nop
1a000c80:	10000898 	.word	0x10000898

1a000c84 <task2>:
void * task2(void *arg){
1a000c84:	b508      	push	{r3, lr}
		tomar_semaforo(semaforo1);
1a000c86:	4b06      	ldr	r3, [pc, #24]	; (1a000ca0 <task2+0x1c>)
1a000c88:	6818      	ldr	r0, [r3, #0]
1a000c8a:	f7ff fb51 	bl	1a000330 <tomar_semaforo>
		t_delay(500);
1a000c8e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
1a000c92:	f7ff fc0f 	bl	1a0004b4 <t_delay>
		gpioToggle(LED2);
1a000c96:	202c      	movs	r0, #44	; 0x2c
1a000c98:	f000 fe1d 	bl	1a0018d6 <gpioToggle>
1a000c9c:	e7f3      	b.n	1a000c86 <task2+0x2>
1a000c9e:	bf00      	nop
1a000ca0:	10000898 	.word	0x10000898

1a000ca4 <main>:

/*==================[external functions definition]==========================*/

int main(void)
{
1a000ca4:	b500      	push	{lr}
1a000ca6:	b083      	sub	sp, #12
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
1a000ca8:	4b15      	ldr	r3, [pc, #84]	; (1a000d00 <main+0x5c>)
1a000caa:	22e0      	movs	r2, #224	; 0xe0
1a000cac:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

	NVIC_SetPriority(PendSV_IRQn,(1<<__NVIC_PRIO_BITS)-1);

	iniciar_vtareas();
1a000cb0:	f7ff fdbc 	bl	1a00082c <iniciar_vtareas>

	crear_tarea(stack1,task1,"tarea1",STACK_SIZE,1,(void *)0x11223344);
1a000cb4:	4d13      	ldr	r5, [pc, #76]	; (1a000d04 <main+0x60>)
1a000cb6:	9501      	str	r5, [sp, #4]
1a000cb8:	2401      	movs	r4, #1
1a000cba:	9400      	str	r4, [sp, #0]
1a000cbc:	f44f 7300 	mov.w	r3, #512	; 0x200
1a000cc0:	4a11      	ldr	r2, [pc, #68]	; (1a000d08 <main+0x64>)
1a000cc2:	4912      	ldr	r1, [pc, #72]	; (1a000d0c <main+0x68>)
1a000cc4:	4812      	ldr	r0, [pc, #72]	; (1a000d10 <main+0x6c>)
1a000cc6:	f7ff fd41 	bl	1a00074c <crear_tarea>
	crear_tarea(stack2,task2,"tarea2",STACK_SIZE,1,(void *)0x11223344);
1a000cca:	9501      	str	r5, [sp, #4]
1a000ccc:	9400      	str	r4, [sp, #0]
1a000cce:	f44f 7300 	mov.w	r3, #512	; 0x200
1a000cd2:	4a10      	ldr	r2, [pc, #64]	; (1a000d14 <main+0x70>)
1a000cd4:	4910      	ldr	r1, [pc, #64]	; (1a000d18 <main+0x74>)
1a000cd6:	4811      	ldr	r0, [pc, #68]	; (1a000d1c <main+0x78>)
1a000cd8:	f7ff fd38 	bl	1a00074c <crear_tarea>
	crear_tarea(stack3,task3,"tarea3",STACK_SIZE,1,(void *)0x11223344);
1a000cdc:	9501      	str	r5, [sp, #4]
1a000cde:	9400      	str	r4, [sp, #0]
1a000ce0:	f44f 7300 	mov.w	r3, #512	; 0x200
1a000ce4:	4a0e      	ldr	r2, [pc, #56]	; (1a000d20 <main+0x7c>)
1a000ce6:	490f      	ldr	r1, [pc, #60]	; (1a000d24 <main+0x80>)
1a000ce8:	480f      	ldr	r0, [pc, #60]	; (1a000d28 <main+0x84>)
1a000cea:	f7ff fd2f 	bl	1a00074c <crear_tarea>

	semaforo1=crear_semaforo_bin();
1a000cee:	f7ff fb07 	bl	1a000300 <crear_semaforo_bin>
1a000cf2:	4b0e      	ldr	r3, [pc, #56]	; (1a000d2c <main+0x88>)
1a000cf4:	6018      	str	r0, [r3, #0]

	initHardware();
1a000cf6:	f7ff fbaf 	bl	1a000458 <initHardware>
  __ASM volatile ("wfi");
1a000cfa:	bf30      	wfi
1a000cfc:	e7fd      	b.n	1a000cfa <main+0x56>
1a000cfe:	bf00      	nop
1a000d00:	e000ed00 	.word	0xe000ed00
1a000d04:	11223344 	.word	0x11223344
1a000d08:	1a002464 	.word	0x1a002464
1a000d0c:	1a000c65 	.word	0x1a000c65
1a000d10:	10000490 	.word	0x10000490
1a000d14:	1a00246c 	.word	0x1a00246c
1a000d18:	1a000c85 	.word	0x1a000c85
1a000d1c:	10000698 	.word	0x10000698
1a000d20:	1a002474 	.word	0x1a002474
1a000d24:	1a000c11 	.word	0x1a000c11
1a000d28:	100008a4 	.word	0x100008a4
1a000d2c:	10000898 	.word	0x10000898

1a000d30 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
   uint32_t base = (uint32_t) pUART;
   switch(base) {
1a000d30:	4b09      	ldr	r3, [pc, #36]	; (1a000d58 <Chip_UART_GetIndex+0x28>)
1a000d32:	4298      	cmp	r0, r3
1a000d34:	d009      	beq.n	1a000d4a <Chip_UART_GetIndex+0x1a>
1a000d36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a000d3a:	4298      	cmp	r0, r3
1a000d3c:	d007      	beq.n	1a000d4e <Chip_UART_GetIndex+0x1e>
1a000d3e:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a000d42:	4298      	cmp	r0, r3
1a000d44:	d005      	beq.n	1a000d52 <Chip_UART_GetIndex+0x22>
       case LPC_USART0_BASE:
           return 0;
1a000d46:	2000      	movs	r0, #0
1a000d48:	4770      	bx	lr
       case LPC_UART1_BASE:
           return 1;
       case LPC_USART2_BASE:
           return 2;
1a000d4a:	2002      	movs	r0, #2
1a000d4c:	4770      	bx	lr
       case LPC_USART3_BASE:
           return 3;
1a000d4e:	2003      	movs	r0, #3
1a000d50:	4770      	bx	lr
           return 1;
1a000d52:	2001      	movs	r0, #1
       default:
           return 0; /* Should never come here */
   }
}
1a000d54:	4770      	bx	lr
1a000d56:	bf00      	nop
1a000d58:	400c1000 	.word	0x400c1000

1a000d5c <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a000d5c:	b530      	push	{r4, r5, lr}
1a000d5e:	b083      	sub	sp, #12
1a000d60:	4604      	mov	r4, r0
    volatile uint32_t tmp;

   /* Enable UART clocking. UART base clock(s) must already be enabled */
   Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a000d62:	f7ff ffe5 	bl	1a000d30 <Chip_UART_GetIndex>
1a000d66:	2301      	movs	r3, #1
1a000d68:	461a      	mov	r2, r3
1a000d6a:	4619      	mov	r1, r3
1a000d6c:	4d0e      	ldr	r5, [pc, #56]	; (1a000da8 <Chip_UART_Init+0x4c>)
1a000d6e:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a000d72:	f000 faf5 	bl	1a001360 <Chip_Clock_EnableOpts>
 *         with a RX trip level of 8 characters, use something like
 *         (UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2)
 */
STATIC INLINE void Chip_UART_SetupFIFOS(LPC_USART_T *pUART, uint32_t fcr)
{
   pUART->FCR = fcr;
1a000d76:	2307      	movs	r3, #7
1a000d78:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a000d7a:	2300      	movs	r3, #0
1a000d7c:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
   pUART->IER = 0;
1a000d7e:	6063      	str	r3, [r4, #4]
   /* Set LCR to default state */
   pUART->LCR = 0;
1a000d80:	60e3      	str	r3, [r4, #12]
   /* Set ACR to default state */
   pUART->ACR = 0;
1a000d82:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
   pUART->RS485CTRL = 0;
1a000d84:	64e3      	str	r3, [r4, #76]	; 0x4c
   /* Set RS485 delay timer to default state */
   pUART->RS485DLY = 0;
1a000d86:	6563      	str	r3, [r4, #84]	; 0x54
   /* Set RS485 addr match to default state */
   pUART->RS485ADRMATCH = 0;
1a000d88:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a000d8a:	4b08      	ldr	r3, [pc, #32]	; (1a000dac <Chip_UART_Init+0x50>)
1a000d8c:	429c      	cmp	r4, r3
1a000d8e:	d005      	beq.n	1a000d9c <Chip_UART_Init+0x40>
 *         stop bit, and even (enabled) parity would be
 *         (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
   pUART->LCR = config;
1a000d90:	2303      	movs	r3, #3
1a000d92:	60e3      	str	r3, [r4, #12]

   /* Default 8N1, with DLAB disabled */
   Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

   /* Disable fractional divider */
   pUART->FDR = 0x10;
1a000d94:	2310      	movs	r3, #16
1a000d96:	62a3      	str	r3, [r4, #40]	; 0x28
}
1a000d98:	b003      	add	sp, #12
1a000d9a:	bd30      	pop	{r4, r5, pc}
       pUART->MCR = 0;
1a000d9c:	2300      	movs	r3, #0
1a000d9e:	6123      	str	r3, [r4, #16]
       tmp = pUART->MSR;
1a000da0:	69a3      	ldr	r3, [r4, #24]
1a000da2:	9301      	str	r3, [sp, #4]
1a000da4:	e7f4      	b.n	1a000d90 <Chip_UART_Init+0x34>
1a000da6:	bf00      	nop
1a000da8:	1a002484 	.word	0x1a002484
1a000dac:	40082000 	.word	0x40082000

1a000db0 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a000db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a000db4:	b083      	sub	sp, #12
1a000db6:	4683      	mov	fp, r0
1a000db8:	4688      	mov	r8, r1
   uint32_t sdiv = 0, sm = 1, sd = 0;
   uint32_t pclk, m, d;
   uint32_t odiff = -1UL; /* old best diff */

   /* Get base clock for the corresponding UART */
   pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a000dba:	f7ff ffb9 	bl	1a000d30 <Chip_UART_GetIndex>
1a000dbe:	4b35      	ldr	r3, [pc, #212]	; (1a000e94 <Chip_UART_SetBaudFDR+0xe4>)
1a000dc0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a000dc4:	f000 faea 	bl	1a00139c <Chip_Clock_GetRate>
1a000dc8:	4606      	mov	r6, r0
   uint32_t odiff = -1UL; /* old best diff */
1a000dca:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

   /* Loop through all possible fractional divider values */
   for (m = 1; odiff && m < 16; m++) {
1a000dce:	2401      	movs	r4, #1
   uint32_t sdiv = 0, sm = 1, sd = 0;
1a000dd0:	2300      	movs	r3, #0
1a000dd2:	9301      	str	r3, [sp, #4]
1a000dd4:	46a2      	mov	sl, r4
1a000dd6:	4699      	mov	r9, r3
   for (m = 1; odiff && m < 16; m++) {
1a000dd8:	e02a      	b.n	1a000e30 <Chip_UART_SetBaudFDR+0x80>
           /* Upper 32-bit of dval has div */
           div = (uint32_t) (dval >> 32);

           /* Closer to next div */
           if ((int)diff < 0) {
               diff = -diff;
1a000dda:	4242      	negs	r2, r0
               div ++;
1a000ddc:	1c4b      	adds	r3, r1, #1
1a000dde:	e017      	b.n	1a000e10 <Chip_UART_SetBaudFDR+0x60>
           sd = d;
           sm = m;
           odiff = diff;

           /* On perfect match, break loop */
           if(!diff) {
1a000de0:	b30a      	cbz	r2, 1a000e26 <Chip_UART_SetBaudFDR+0x76>
           odiff = diff;
1a000de2:	4617      	mov	r7, r2
           sd = d;
1a000de4:	9501      	str	r5, [sp, #4]
           sm = m;
1a000de6:	46a2      	mov	sl, r4
           sdiv = div;
1a000de8:	4699      	mov	r9, r3
       for (d = 0; d < m; d++) {
1a000dea:	3501      	adds	r5, #1
1a000dec:	42ac      	cmp	r4, r5
1a000dee:	d91e      	bls.n	1a000e2e <Chip_UART_SetBaudFDR+0x7e>
           uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a000df0:	0933      	lsrs	r3, r6, #4
1a000df2:	0730      	lsls	r0, r6, #28
1a000df4:	fba4 0100 	umull	r0, r1, r4, r0
1a000df8:	fb04 1103 	mla	r1, r4, r3, r1
1a000dfc:	1962      	adds	r2, r4, r5
1a000dfe:	fb08 f202 	mul.w	r2, r8, r2
1a000e02:	2300      	movs	r3, #0
1a000e04:	f001 f9a6 	bl	1a002154 <__aeabi_uldivmod>
           diff = (uint32_t) dval;
1a000e08:	4602      	mov	r2, r0
           div = (uint32_t) (dval >> 32);
1a000e0a:	460b      	mov	r3, r1
           if ((int)diff < 0) {
1a000e0c:	2800      	cmp	r0, #0
1a000e0e:	dbe4      	blt.n	1a000dda <Chip_UART_SetBaudFDR+0x2a>
           if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a000e10:	4297      	cmp	r7, r2
1a000e12:	d3ea      	bcc.n	1a000dea <Chip_UART_SetBaudFDR+0x3a>
1a000e14:	2b00      	cmp	r3, #0
1a000e16:	d0e8      	beq.n	1a000dea <Chip_UART_SetBaudFDR+0x3a>
1a000e18:	0c19      	lsrs	r1, r3, #16
1a000e1a:	d1e6      	bne.n	1a000dea <Chip_UART_SetBaudFDR+0x3a>
1a000e1c:	2b02      	cmp	r3, #2
1a000e1e:	d8df      	bhi.n	1a000de0 <Chip_UART_SetBaudFDR+0x30>
1a000e20:	2d00      	cmp	r5, #0
1a000e22:	d0dd      	beq.n	1a000de0 <Chip_UART_SetBaudFDR+0x30>
1a000e24:	e7e1      	b.n	1a000dea <Chip_UART_SetBaudFDR+0x3a>
           odiff = diff;
1a000e26:	4617      	mov	r7, r2
           sd = d;
1a000e28:	9501      	str	r5, [sp, #4]
           sm = m;
1a000e2a:	46a2      	mov	sl, r4
           sdiv = div;
1a000e2c:	4699      	mov	r9, r3
   for (m = 1; odiff && m < 16; m++) {
1a000e2e:	3401      	adds	r4, #1
1a000e30:	b11f      	cbz	r7, 1a000e3a <Chip_UART_SetBaudFDR+0x8a>
1a000e32:	2c0f      	cmp	r4, #15
1a000e34:	d801      	bhi.n	1a000e3a <Chip_UART_SetBaudFDR+0x8a>
       for (d = 0; d < m; d++) {
1a000e36:	2500      	movs	r5, #0
1a000e38:	e7d8      	b.n	1a000dec <Chip_UART_SetBaudFDR+0x3c>
           }
       }
   }

   /* Return 0 if a vaild divisor is not possible */
   if (!sdiv) {
1a000e3a:	f1b9 0f00 	cmp.w	r9, #0
1a000e3e:	d024      	beq.n	1a000e8a <Chip_UART_SetBaudFDR+0xda>
 * @param  pUART   : Pointer to selected UART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
   pUART->LCR |= UART_LCR_DLAB_EN;
1a000e40:	f8db 300c 	ldr.w	r3, [fp, #12]
1a000e44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a000e48:	f8cb 300c 	str.w	r3, [fp, #12]
1a000e4c:	fa5f f389 	uxtb.w	r3, r9
 *         order to access the USART Divisor Latches. This function
 *         doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
   pUART->DLL = (uint32_t) dll;
1a000e50:	f8cb 3000 	str.w	r3, [fp]
1a000e54:	f3c9 2307 	ubfx	r3, r9, #8, #8
   pUART->DLM = (uint32_t) dlm;
1a000e58:	f8cb 3004 	str.w	r3, [fp, #4]
   pUART->LCR &= ~UART_LCR_DLAB_EN;
1a000e5c:	f8db 300c 	ldr.w	r3, [fp, #12]
1a000e60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a000e64:	f8cb 300c 	str.w	r3, [fp, #12]
   Chip_UART_EnableDivisorAccess(pUART);
   Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
   Chip_UART_DisableDivisorAccess(pUART);

   /* Set best fractional divider */
   pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a000e68:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a000e6c:	b2db      	uxtb	r3, r3
1a000e6e:	9901      	ldr	r1, [sp, #4]
1a000e70:	f001 020f 	and.w	r2, r1, #15
1a000e74:	4313      	orrs	r3, r2
1a000e76:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

   /* Return actual baud rate */
   return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a000e7a:	0933      	lsrs	r3, r6, #4
1a000e7c:	fb0a f303 	mul.w	r3, sl, r3
1a000e80:	448a      	add	sl, r1
1a000e82:	fb09 f90a 	mul.w	r9, r9, sl
1a000e86:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a000e8a:	4648      	mov	r0, r9
1a000e8c:	b003      	add	sp, #12
1a000e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a000e92:	bf00      	nop
1a000e94:	1a00247c 	.word	0x1a00247c

1a000e98 <pll_calc_divs>:
       return -val;
   return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000e98:	b4f0      	push	{r4, r5, r6, r7}

   uint32_t prev = freq;
   int n, m, p;

   /* When direct mode is set FBSEL should be a don't care */
   if (ppll->ctrl & (1 << 7)) {
1a000e9a:	680b      	ldr	r3, [r1, #0]
1a000e9c:	f013 0f80 	tst.w	r3, #128	; 0x80
1a000ea0:	d002      	beq.n	1a000ea8 <pll_calc_divs+0x10>
       ppll->ctrl &= ~(1 << 6);
1a000ea2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a000ea6:	600b      	str	r3, [r1, #0]
   }
   for (n = 1; n <= 4; n++) {
       for (p = 0; p < 4; p ++) {
1a000ea8:	4607      	mov	r7, r0
1a000eaa:	2501      	movs	r5, #1
1a000eac:	e03b      	b.n	1a000f26 <pll_calc_divs+0x8e>
           for (m = 1; m <= 256; m++) {
               uint32_t fcco, fout;
               if (ppll->ctrl & (1 << 6)) {
                   fcco = ((m << (p + 1)) * ppll->fin) / n;
               } else {
                   fcco = (m * ppll->fin) / n;
1a000eae:	694b      	ldr	r3, [r1, #20]
1a000eb0:	fb03 f302 	mul.w	r3, r3, r2
1a000eb4:	fbb3 f3f5 	udiv	r3, r3, r5
1a000eb8:	e014      	b.n	1a000ee4 <pll_calc_divs+0x4c>
               }
               if (fcco < PLL_MIN_CCO_FREQ) continue;
               if (fcco > PLL_MAX_CCO_FREQ) break;
               if (ppll->ctrl & (1 << 7)) {
                   fout = fcco;
1a000eba:	461c      	mov	r4, r3
1a000ebc:	e020      	b.n	1a000f00 <pll_calc_divs+0x68>
       return -val;
1a000ebe:	f1cc 0c00 	rsb	ip, ip, #0
1a000ec2:	e020      	b.n	1a000f06 <pll_calc_divs+0x6e>
           for (m = 1; m <= 256; m++) {
1a000ec4:	3201      	adds	r2, #1
1a000ec6:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a000eca:	dc26      	bgt.n	1a000f1a <pll_calc_divs+0x82>
               if (ppll->ctrl & (1 << 6)) {
1a000ecc:	680c      	ldr	r4, [r1, #0]
1a000ece:	f014 0f40 	tst.w	r4, #64	; 0x40
1a000ed2:	d0ec      	beq.n	1a000eae <pll_calc_divs+0x16>
                   fcco = ((m << (p + 1)) * ppll->fin) / n;
1a000ed4:	1c73      	adds	r3, r6, #1
1a000ed6:	fa02 fc03 	lsl.w	ip, r2, r3
1a000eda:	694b      	ldr	r3, [r1, #20]
1a000edc:	fb03 f30c 	mul.w	r3, r3, ip
1a000ee0:	fbb3 f3f5 	udiv	r3, r3, r5
               if (fcco < PLL_MIN_CCO_FREQ) continue;
1a000ee4:	f8df c04c 	ldr.w	ip, [pc, #76]	; 1a000f34 <pll_calc_divs+0x9c>
1a000ee8:	4563      	cmp	r3, ip
1a000eea:	d9eb      	bls.n	1a000ec4 <pll_calc_divs+0x2c>
               if (fcco > PLL_MAX_CCO_FREQ) break;
1a000eec:	f8df c048 	ldr.w	ip, [pc, #72]	; 1a000f38 <pll_calc_divs+0xa0>
1a000ef0:	4563      	cmp	r3, ip
1a000ef2:	d812      	bhi.n	1a000f1a <pll_calc_divs+0x82>
               if (ppll->ctrl & (1 << 7)) {
1a000ef4:	f014 0f80 	tst.w	r4, #128	; 0x80
1a000ef8:	d1df      	bne.n	1a000eba <pll_calc_divs+0x22>
               } else {
                   fout = fcco >> (p + 1);
1a000efa:	1c74      	adds	r4, r6, #1
1a000efc:	fa23 f404 	lsr.w	r4, r3, r4
   if (val < 0)
1a000f00:	ebb0 0c04 	subs.w	ip, r0, r4
1a000f04:	d4db      	bmi.n	1a000ebe <pll_calc_divs+0x26>
               }

               if (ABS(freq - fout) < prev) {
1a000f06:	4567      	cmp	r7, ip
1a000f08:	d9dc      	bls.n	1a000ec4 <pll_calc_divs+0x2c>
                   ppll->nsel = n;
1a000f0a:	608d      	str	r5, [r1, #8]
                   ppll->psel = p + 1;
1a000f0c:	1c77      	adds	r7, r6, #1
1a000f0e:	60cf      	str	r7, [r1, #12]
                   ppll->msel = m;
1a000f10:	610a      	str	r2, [r1, #16]
                   ppll->fout = fout;
1a000f12:	618c      	str	r4, [r1, #24]
                   ppll->fcco = fcco;
1a000f14:	61cb      	str	r3, [r1, #28]
                   prev = ABS(freq - fout);
1a000f16:	4667      	mov	r7, ip
1a000f18:	e7d4      	b.n	1a000ec4 <pll_calc_divs+0x2c>
       for (p = 0; p < 4; p ++) {
1a000f1a:	3601      	adds	r6, #1
1a000f1c:	2e03      	cmp	r6, #3
1a000f1e:	dc01      	bgt.n	1a000f24 <pll_calc_divs+0x8c>
           for (m = 1; m <= 256; m++) {
1a000f20:	2201      	movs	r2, #1
1a000f22:	e7d0      	b.n	1a000ec6 <pll_calc_divs+0x2e>
   for (n = 1; n <= 4; n++) {
1a000f24:	3501      	adds	r5, #1
1a000f26:	2d04      	cmp	r5, #4
1a000f28:	dc01      	bgt.n	1a000f2e <pll_calc_divs+0x96>
       for (p = 0; p < 4; p ++) {
1a000f2a:	2600      	movs	r6, #0
1a000f2c:	e7f6      	b.n	1a000f1c <pll_calc_divs+0x84>
               }
           }
       }
   }
}
1a000f2e:	bcf0      	pop	{r4, r5, r6, r7}
1a000f30:	4770      	bx	lr
1a000f32:	bf00      	nop
1a000f34:	094c5eff 	.word	0x094c5eff
1a000f38:	1312d000 	.word	0x1312d000

1a000f3c <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000f3e:	b099      	sub	sp, #100	; 0x64
1a000f40:	4605      	mov	r5, r0
1a000f42:	460c      	mov	r4, r1
   int diff[3];
   PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a000f44:	225c      	movs	r2, #92	; 0x5c
1a000f46:	2100      	movs	r1, #0
1a000f48:	a801      	add	r0, sp, #4
1a000f4a:	f001 fa83 	bl	1a002454 <memset>

   /* Try direct mode */
   pll[0].ctrl |= (1 << 7);
1a000f4e:	2380      	movs	r3, #128	; 0x80
1a000f50:	9300      	str	r3, [sp, #0]
   pll[0].fin = ppll->fin;
1a000f52:	6963      	ldr	r3, [r4, #20]
1a000f54:	9305      	str	r3, [sp, #20]
   pll[0].srcin = ppll->srcin;
1a000f56:	7923      	ldrb	r3, [r4, #4]
1a000f58:	f88d 3004 	strb.w	r3, [sp, #4]
   pll_calc_divs(freq, &pll[0]);
1a000f5c:	4669      	mov	r1, sp
1a000f5e:	4628      	mov	r0, r5
1a000f60:	f7ff ff9a 	bl	1a000e98 <pll_calc_divs>
   if (pll[0].fout == freq) {
1a000f64:	9b06      	ldr	r3, [sp, #24]
1a000f66:	42ab      	cmp	r3, r5
1a000f68:	d02f      	beq.n	1a000fca <pll_get_frac+0x8e>
   if (val < 0)
1a000f6a:	1aeb      	subs	r3, r5, r3
1a000f6c:	d436      	bmi.n	1a000fdc <pll_get_frac+0xa0>
       *ppll = pll[0];
       return ;
   }
   diff[0] = ABS(freq - pll[0].fout);
1a000f6e:	461e      	mov	r6, r3

   /* Try non-Integer mode */
   pll[2].ctrl = (1 << 6);
1a000f70:	2340      	movs	r3, #64	; 0x40
1a000f72:	9310      	str	r3, [sp, #64]	; 0x40
   pll[2].fin = ppll->fin;
1a000f74:	6963      	ldr	r3, [r4, #20]
1a000f76:	9315      	str	r3, [sp, #84]	; 0x54
   pll[2].srcin = ppll->srcin;
1a000f78:	7923      	ldrb	r3, [r4, #4]
1a000f7a:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
   pll_calc_divs(freq, &pll[2]);
1a000f7e:	a910      	add	r1, sp, #64	; 0x40
1a000f80:	4628      	mov	r0, r5
1a000f82:	f7ff ff89 	bl	1a000e98 <pll_calc_divs>
   if (pll[2].fout == freq) {
1a000f86:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a000f88:	42ab      	cmp	r3, r5
1a000f8a:	d029      	beq.n	1a000fe0 <pll_get_frac+0xa4>
   if (val < 0)
1a000f8c:	1aeb      	subs	r3, r5, r3
1a000f8e:	d42f      	bmi.n	1a000ff0 <pll_get_frac+0xb4>
       *ppll = pll[2];
       return ;
   }

   diff[2] = ABS(freq - pll[2].fout);
1a000f90:	461f      	mov	r7, r3
   /* Try integer mode */
   pll[1].ctrl = (1 << 6);
1a000f92:	2340      	movs	r3, #64	; 0x40
1a000f94:	9308      	str	r3, [sp, #32]
   pll[1].fin = ppll->fin;
1a000f96:	6963      	ldr	r3, [r4, #20]
1a000f98:	930d      	str	r3, [sp, #52]	; 0x34
   pll[1].srcin = ppll->srcin;
1a000f9a:	7923      	ldrb	r3, [r4, #4]
1a000f9c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   pll_calc_divs(freq, &pll[1]);
1a000fa0:	a908      	add	r1, sp, #32
1a000fa2:	4628      	mov	r0, r5
1a000fa4:	f7ff ff78 	bl	1a000e98 <pll_calc_divs>
   if (pll[1].fout == freq) {
1a000fa8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a000faa:	42ab      	cmp	r3, r5
1a000fac:	d022      	beq.n	1a000ff4 <pll_get_frac+0xb8>
   if (val < 0)
1a000fae:	1aed      	subs	r5, r5, r3
1a000fb0:	d428      	bmi.n	1a001004 <pll_get_frac+0xc8>
       return ;
   }
   diff[1] = ABS(freq - pll[1].fout);

   /* Find the min of 3 and return */
   if (diff[0] <= diff[1]) {
1a000fb2:	42ae      	cmp	r6, r5
1a000fb4:	dc30      	bgt.n	1a001018 <pll_get_frac+0xdc>
       if (diff[0] <= diff[2]) {
1a000fb6:	42be      	cmp	r6, r7
1a000fb8:	dc26      	bgt.n	1a001008 <pll_get_frac+0xcc>
           *ppll = pll[0];
1a000fba:	466d      	mov	r5, sp
1a000fbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000fbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000fc0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000fc4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000fc8:	e006      	b.n	1a000fd8 <pll_get_frac+0x9c>
       *ppll = pll[0];
1a000fca:	466d      	mov	r5, sp
1a000fcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000fce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000fd0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000fd4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
           *ppll = pll[1];
       } else {
           *ppll = pll[2];
       }
   }
}
1a000fd8:	b019      	add	sp, #100	; 0x64
1a000fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
       return -val;
1a000fdc:	425b      	negs	r3, r3
1a000fde:	e7c6      	b.n	1a000f6e <pll_get_frac+0x32>
       *ppll = pll[2];
1a000fe0:	ad10      	add	r5, sp, #64	; 0x40
1a000fe2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000fe4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000fe6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000fea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
       return ;
1a000fee:	e7f3      	b.n	1a000fd8 <pll_get_frac+0x9c>
       return -val;
1a000ff0:	425b      	negs	r3, r3
1a000ff2:	e7cd      	b.n	1a000f90 <pll_get_frac+0x54>
       *ppll = pll[1];
1a000ff4:	ad08      	add	r5, sp, #32
1a000ff6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000ff8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000ffa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000ffe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
       return ;
1a001002:	e7e9      	b.n	1a000fd8 <pll_get_frac+0x9c>
       return -val;
1a001004:	426d      	negs	r5, r5
1a001006:	e7d4      	b.n	1a000fb2 <pll_get_frac+0x76>
           *ppll = pll[2];
1a001008:	ad10      	add	r5, sp, #64	; 0x40
1a00100a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00100c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00100e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001012:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001016:	e7df      	b.n	1a000fd8 <pll_get_frac+0x9c>
       if (diff[1] <= diff[2]) {
1a001018:	42af      	cmp	r7, r5
1a00101a:	db07      	blt.n	1a00102c <pll_get_frac+0xf0>
           *ppll = pll[1];
1a00101c:	ad08      	add	r5, sp, #32
1a00101e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001020:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001022:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001026:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a00102a:	e7d5      	b.n	1a000fd8 <pll_get_frac+0x9c>
           *ppll = pll[2];
1a00102c:	ad10      	add	r5, sp, #64	; 0x40
1a00102e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001030:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001032:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001036:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a00103a:	e7cd      	b.n	1a000fd8 <pll_get_frac+0x9c>

1a00103c <Chip_Clock_FindBaseClock>:
   return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a00103c:	b430      	push	{r4, r5}
1a00103e:	4605      	mov	r5, r0
   CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
   int i = 0;
1a001040:	2300      	movs	r3, #0
   CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a001042:	201c      	movs	r0, #28

   while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a001044:	e000      	b.n	1a001048 <Chip_Clock_FindBaseClock+0xc>
       if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
           baseclk = periph_to_base[i].clkbase;
       }
       else {
           i++;
1a001046:	3301      	adds	r3, #1
   while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a001048:	281c      	cmp	r0, #28
1a00104a:	d118      	bne.n	1a00107e <Chip_Clock_FindBaseClock+0x42>
1a00104c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a001050:	0051      	lsls	r1, r2, #1
1a001052:	4a0c      	ldr	r2, [pc, #48]	; (1a001084 <Chip_Clock_FindBaseClock+0x48>)
1a001054:	440a      	add	r2, r1
1a001056:	7914      	ldrb	r4, [r2, #4]
1a001058:	4284      	cmp	r4, r0
1a00105a:	d010      	beq.n	1a00107e <Chip_Clock_FindBaseClock+0x42>
       if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a00105c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a001060:	004a      	lsls	r2, r1, #1
1a001062:	4908      	ldr	r1, [pc, #32]	; (1a001084 <Chip_Clock_FindBaseClock+0x48>)
1a001064:	5a8a      	ldrh	r2, [r1, r2]
1a001066:	42aa      	cmp	r2, r5
1a001068:	d8ed      	bhi.n	1a001046 <Chip_Clock_FindBaseClock+0xa>
1a00106a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a00106e:	0051      	lsls	r1, r2, #1
1a001070:	4a04      	ldr	r2, [pc, #16]	; (1a001084 <Chip_Clock_FindBaseClock+0x48>)
1a001072:	440a      	add	r2, r1
1a001074:	8852      	ldrh	r2, [r2, #2]
1a001076:	42aa      	cmp	r2, r5
1a001078:	d3e5      	bcc.n	1a001046 <Chip_Clock_FindBaseClock+0xa>
           baseclk = periph_to_base[i].clkbase;
1a00107a:	4620      	mov	r0, r4
1a00107c:	e7e4      	b.n	1a001048 <Chip_Clock_FindBaseClock+0xc>
       }
   }

   return baseclk;
}
1a00107e:	bc30      	pop	{r4, r5}
1a001080:	4770      	bx	lr
1a001082:	bf00      	nop
1a001084:	1a002498 	.word	0x1a002498

1a001088 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a001088:	b082      	sub	sp, #8
   volatile uint32_t delay = 1000;
1a00108a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a00108e:	9301      	str	r3, [sp, #4]

   uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a001090:	4a0d      	ldr	r2, [pc, #52]	; (1a0010c8 <Chip_Clock_EnableCrystal+0x40>)
1a001092:	6993      	ldr	r3, [r2, #24]

   /* Clear bypass mode */
   OldCrystalConfig &= (~2);
1a001094:	f023 0102 	bic.w	r1, r3, #2
   if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a001098:	6992      	ldr	r2, [r2, #24]
1a00109a:	428a      	cmp	r2, r1
1a00109c:	d001      	beq.n	1a0010a2 <Chip_Clock_EnableCrystal+0x1a>
       LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a00109e:	4a0a      	ldr	r2, [pc, #40]	; (1a0010c8 <Chip_Clock_EnableCrystal+0x40>)
1a0010a0:	6191      	str	r1, [r2, #24]
   }

   /* Enable crystal oscillator */
   OldCrystalConfig &= (~1);
1a0010a2:	f023 0303 	bic.w	r3, r3, #3
   if (OscRateIn >= 20000000) {
1a0010a6:	4a09      	ldr	r2, [pc, #36]	; (1a0010cc <Chip_Clock_EnableCrystal+0x44>)
1a0010a8:	6811      	ldr	r1, [r2, #0]
1a0010aa:	4a09      	ldr	r2, [pc, #36]	; (1a0010d0 <Chip_Clock_EnableCrystal+0x48>)
1a0010ac:	4291      	cmp	r1, r2
1a0010ae:	d901      	bls.n	1a0010b4 <Chip_Clock_EnableCrystal+0x2c>
       OldCrystalConfig |= 4;  /* Set high frequency mode */
1a0010b0:	f043 0304 	orr.w	r3, r3, #4

   }
   LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0010b4:	4a04      	ldr	r2, [pc, #16]	; (1a0010c8 <Chip_Clock_EnableCrystal+0x40>)
1a0010b6:	6193      	str	r3, [r2, #24]

   /* Delay for 250uSec */
   while(delay--) {}
1a0010b8:	9b01      	ldr	r3, [sp, #4]
1a0010ba:	1e5a      	subs	r2, r3, #1
1a0010bc:	9201      	str	r2, [sp, #4]
1a0010be:	2b00      	cmp	r3, #0
1a0010c0:	d1fa      	bne.n	1a0010b8 <Chip_Clock_EnableCrystal+0x30>
}
1a0010c2:	b002      	add	sp, #8
1a0010c4:	4770      	bx	lr
1a0010c6:	bf00      	nop
1a0010c8:	40050000 	.word	0x40050000
1a0010cc:	1a0025bc 	.word	0x1a0025bc
1a0010d0:	01312cff 	.word	0x01312cff

1a0010d4 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
   uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a0010d4:	3012      	adds	r0, #18
1a0010d6:	4b05      	ldr	r3, [pc, #20]	; (1a0010ec <Chip_Clock_GetDividerSource+0x18>)
1a0010d8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

   if (reg & 1) {  /* divider is powered down */
1a0010dc:	f010 0f01 	tst.w	r0, #1
1a0010e0:	d102      	bne.n	1a0010e8 <Chip_Clock_GetDividerSource+0x14>
       return CLKINPUT_PD;
   }

   return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a0010e2:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a0010e6:	4770      	bx	lr
       return CLKINPUT_PD;
1a0010e8:	2011      	movs	r0, #17
}
1a0010ea:	4770      	bx	lr
1a0010ec:	40050000 	.word	0x40050000

1a0010f0 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
   return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a0010f0:	f100 0212 	add.w	r2, r0, #18
1a0010f4:	4b03      	ldr	r3, [pc, #12]	; (1a001104 <Chip_Clock_GetDividerDivisor+0x14>)
1a0010f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a0010fa:	4b03      	ldr	r3, [pc, #12]	; (1a001108 <Chip_Clock_GetDividerDivisor+0x18>)
1a0010fc:	5c18      	ldrb	r0, [r3, r0]
}
1a0010fe:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a001102:	4770      	bx	lr
1a001104:	40050000 	.word	0x40050000
1a001108:	1a002490 	.word	0x1a002490

1a00110c <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a00110c:	b508      	push	{r3, lr}
   uint32_t rate = 0;

   switch (input) {
1a00110e:	2810      	cmp	r0, #16
1a001110:	d80a      	bhi.n	1a001128 <Chip_Clock_GetClockInputHz+0x1c>
1a001112:	e8df f000 	tbb	[pc, r0]
1a001116:	0b42      	.short	0x0b42
1a001118:	091f160d 	.word	0x091f160d
1a00111c:	2b282522 	.word	0x2b282522
1a001120:	322e0909 	.word	0x322e0909
1a001124:	3a36      	.short	0x3a36
1a001126:	3e          	.byte	0x3e
1a001127:	00          	.byte	0x00
   uint32_t rate = 0;
1a001128:	2000      	movs	r0, #0
1a00112a:	e038      	b.n	1a00119e <Chip_Clock_GetClockInputHz+0x92>
   case CLKIN_32K:
       rate = CRYSTAL_32K_FREQ_IN;
       break;

   case CLKIN_IRC:
       rate = CGU_IRC_FREQ;
1a00112c:	481e      	ldr	r0, [pc, #120]	; (1a0011a8 <Chip_Clock_GetClockInputHz+0x9c>)
       break;
1a00112e:	e036      	b.n	1a00119e <Chip_Clock_GetClockInputHz+0x92>

   case CLKIN_ENET_RX:
       if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a001130:	4b1e      	ldr	r3, [pc, #120]	; (1a0011ac <Chip_Clock_GetClockInputHz+0xa0>)
1a001132:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a001136:	f003 0307 	and.w	r3, r3, #7
1a00113a:	2b04      	cmp	r3, #4
1a00113c:	d130      	bne.n	1a0011a0 <Chip_Clock_GetClockInputHz+0x94>
   uint32_t rate = 0;
1a00113e:	2000      	movs	r0, #0
1a001140:	e02d      	b.n	1a00119e <Chip_Clock_GetClockInputHz+0x92>
           rate = 25000000;
       }
       break;

   case CLKIN_ENET_TX:
       if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a001142:	4b1a      	ldr	r3, [pc, #104]	; (1a0011ac <Chip_Clock_GetClockInputHz+0xa0>)
1a001144:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a001148:	f003 0307 	and.w	r3, r3, #7
1a00114c:	2b04      	cmp	r3, #4
1a00114e:	d029      	beq.n	1a0011a4 <Chip_Clock_GetClockInputHz+0x98>
           rate = 25000000; /* MII uses 25 MHz */
1a001150:	4817      	ldr	r0, [pc, #92]	; (1a0011b0 <Chip_Clock_GetClockInputHz+0xa4>)
1a001152:	e024      	b.n	1a00119e <Chip_Clock_GetClockInputHz+0x92>
           rate = 50000000; /* RMII uses 50 MHz */
       }
       break;

   case CLKIN_CLKIN:
       rate = ExtRateIn;
1a001154:	4b17      	ldr	r3, [pc, #92]	; (1a0011b4 <Chip_Clock_GetClockInputHz+0xa8>)
1a001156:	6818      	ldr	r0, [r3, #0]
       break;
1a001158:	e021      	b.n	1a00119e <Chip_Clock_GetClockInputHz+0x92>

   case CLKIN_CRYSTAL:
       rate = OscRateIn;
1a00115a:	4b17      	ldr	r3, [pc, #92]	; (1a0011b8 <Chip_Clock_GetClockInputHz+0xac>)
1a00115c:	6818      	ldr	r0, [r3, #0]
       break;
1a00115e:	e01e      	b.n	1a00119e <Chip_Clock_GetClockInputHz+0x92>

   case CLKIN_USBPLL:
       rate = audio_usb_pll_freq[CGU_USB_PLL];
1a001160:	4b16      	ldr	r3, [pc, #88]	; (1a0011bc <Chip_Clock_GetClockInputHz+0xb0>)
1a001162:	6818      	ldr	r0, [r3, #0]
       break;
1a001164:	e01b      	b.n	1a00119e <Chip_Clock_GetClockInputHz+0x92>

   case CLKIN_AUDIOPLL:
       rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a001166:	4b15      	ldr	r3, [pc, #84]	; (1a0011bc <Chip_Clock_GetClockInputHz+0xb0>)
1a001168:	6858      	ldr	r0, [r3, #4]
       break;
1a00116a:	e018      	b.n	1a00119e <Chip_Clock_GetClockInputHz+0x92>

   case CLKIN_MAINPLL:
       rate = Chip_Clock_GetMainPLLHz();
1a00116c:	f000 f86a 	bl	1a001244 <Chip_Clock_GetMainPLLHz>
       break;
1a001170:	e015      	b.n	1a00119e <Chip_Clock_GetClockInputHz+0x92>

   case CLKIN_IDIVA:
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a001172:	2100      	movs	r1, #0
1a001174:	f000 f89c 	bl	1a0012b0 <Chip_Clock_GetDivRate>
       break;
1a001178:	e011      	b.n	1a00119e <Chip_Clock_GetClockInputHz+0x92>

   case CLKIN_IDIVB:
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a00117a:	2101      	movs	r1, #1
1a00117c:	f000 f898 	bl	1a0012b0 <Chip_Clock_GetDivRate>
       break;
1a001180:	e00d      	b.n	1a00119e <Chip_Clock_GetClockInputHz+0x92>

   case CLKIN_IDIVC:
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a001182:	2102      	movs	r1, #2
1a001184:	f000 f894 	bl	1a0012b0 <Chip_Clock_GetDivRate>
       break;
1a001188:	e009      	b.n	1a00119e <Chip_Clock_GetClockInputHz+0x92>

   case CLKIN_IDIVD:
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a00118a:	2103      	movs	r1, #3
1a00118c:	f000 f890 	bl	1a0012b0 <Chip_Clock_GetDivRate>
       break;
1a001190:	e005      	b.n	1a00119e <Chip_Clock_GetClockInputHz+0x92>

   case CLKIN_IDIVE:
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a001192:	2104      	movs	r1, #4
1a001194:	f000 f88c 	bl	1a0012b0 <Chip_Clock_GetDivRate>
       break;
1a001198:	e001      	b.n	1a00119e <Chip_Clock_GetClockInputHz+0x92>
       rate = CRYSTAL_32K_FREQ_IN;
1a00119a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   default:
       break;
   }

   return rate;
}
1a00119e:	bd08      	pop	{r3, pc}
           rate = 25000000;
1a0011a0:	4803      	ldr	r0, [pc, #12]	; (1a0011b0 <Chip_Clock_GetClockInputHz+0xa4>)
1a0011a2:	e7fc      	b.n	1a00119e <Chip_Clock_GetClockInputHz+0x92>
           rate = 50000000; /* RMII uses 50 MHz */
1a0011a4:	4806      	ldr	r0, [pc, #24]	; (1a0011c0 <Chip_Clock_GetClockInputHz+0xb4>)
   return rate;
1a0011a6:	e7fa      	b.n	1a00119e <Chip_Clock_GetClockInputHz+0x92>
1a0011a8:	00b71b00 	.word	0x00b71b00
1a0011ac:	40043000 	.word	0x40043000
1a0011b0:	017d7840 	.word	0x017d7840
1a0011b4:	1a0025b8 	.word	0x1a0025b8
1a0011b8:	1a0025bc 	.word	0x1a0025bc
1a0011bc:	10000020 	.word	0x10000020
1a0011c0:	02faf080 	.word	0x02faf080

1a0011c4 <Chip_Clock_CalcMainPLLValue>:
{
1a0011c4:	b538      	push	{r3, r4, r5, lr}
1a0011c6:	4605      	mov	r5, r0
1a0011c8:	460c      	mov	r4, r1
   ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a0011ca:	7908      	ldrb	r0, [r1, #4]
1a0011cc:	f7ff ff9e 	bl	1a00110c <Chip_Clock_GetClockInputHz>
1a0011d0:	6160      	str	r0, [r4, #20]
   if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a0011d2:	4b19      	ldr	r3, [pc, #100]	; (1a001238 <Chip_Clock_CalcMainPLLValue+0x74>)
1a0011d4:	442b      	add	r3, r5
1a0011d6:	4a19      	ldr	r2, [pc, #100]	; (1a00123c <Chip_Clock_CalcMainPLLValue+0x78>)
1a0011d8:	4293      	cmp	r3, r2
1a0011da:	d821      	bhi.n	1a001220 <Chip_Clock_CalcMainPLLValue+0x5c>
1a0011dc:	b318      	cbz	r0, 1a001226 <Chip_Clock_CalcMainPLLValue+0x62>
   ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a0011de:	2380      	movs	r3, #128	; 0x80
1a0011e0:	6023      	str	r3, [r4, #0]
   ppll->nsel = 0;
1a0011e2:	2300      	movs	r3, #0
1a0011e4:	60a3      	str	r3, [r4, #8]
   ppll->psel = 0;
1a0011e6:	60e3      	str	r3, [r4, #12]
   ppll->msel = freq / ppll->fin;
1a0011e8:	fbb5 f3f0 	udiv	r3, r5, r0
1a0011ec:	6123      	str	r3, [r4, #16]
   if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a0011ee:	4a14      	ldr	r2, [pc, #80]	; (1a001240 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a0011f0:	4295      	cmp	r5, r2
1a0011f2:	d903      	bls.n	1a0011fc <Chip_Clock_CalcMainPLLValue+0x38>
1a0011f4:	fb03 f000 	mul.w	r0, r3, r0
1a0011f8:	42a8      	cmp	r0, r5
1a0011fa:	d007      	beq.n	1a00120c <Chip_Clock_CalcMainPLLValue+0x48>
       pll_get_frac(freq, ppll);
1a0011fc:	4621      	mov	r1, r4
1a0011fe:	4628      	mov	r0, r5
1a001200:	f7ff fe9c 	bl	1a000f3c <pll_get_frac>
       if (!ppll->nsel) {
1a001204:	68a3      	ldr	r3, [r4, #8]
1a001206:	b18b      	cbz	r3, 1a00122c <Chip_Clock_CalcMainPLLValue+0x68>
       ppll->nsel --;
1a001208:	3b01      	subs	r3, #1
1a00120a:	60a3      	str	r3, [r4, #8]
   if (ppll->msel == 0) {
1a00120c:	6923      	ldr	r3, [r4, #16]
1a00120e:	b183      	cbz	r3, 1a001232 <Chip_Clock_CalcMainPLLValue+0x6e>
   if (ppll->psel) {
1a001210:	68e2      	ldr	r2, [r4, #12]
1a001212:	b10a      	cbz	r2, 1a001218 <Chip_Clock_CalcMainPLLValue+0x54>
       ppll->psel --;
1a001214:	3a01      	subs	r2, #1
1a001216:	60e2      	str	r2, [r4, #12]
   ppll->msel --;
1a001218:	3b01      	subs	r3, #1
1a00121a:	6123      	str	r3, [r4, #16]
   return 0;
1a00121c:	2000      	movs	r0, #0
}
1a00121e:	bd38      	pop	{r3, r4, r5, pc}
       return -1;
1a001220:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001224:	e7fb      	b.n	1a00121e <Chip_Clock_CalcMainPLLValue+0x5a>
1a001226:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00122a:	e7f8      	b.n	1a00121e <Chip_Clock_CalcMainPLLValue+0x5a>
           return -1;
1a00122c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001230:	e7f5      	b.n	1a00121e <Chip_Clock_CalcMainPLLValue+0x5a>
       return - 1;
1a001232:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001236:	e7f2      	b.n	1a00121e <Chip_Clock_CalcMainPLLValue+0x5a>
1a001238:	ff6b3a10 	.word	0xff6b3a10
1a00123c:	0b940510 	.word	0x0b940510
1a001240:	094c5eff 	.word	0x094c5eff

1a001244 <Chip_Clock_GetMainPLLHz>:
{
1a001244:	b530      	push	{r4, r5, lr}
1a001246:	b083      	sub	sp, #12
   uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a001248:	4d17      	ldr	r5, [pc, #92]	; (1a0012a8 <Chip_Clock_GetMainPLLHz+0x64>)
1a00124a:	6c6c      	ldr	r4, [r5, #68]	; 0x44
   uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a00124c:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a001250:	f7ff ff5c 	bl	1a00110c <Chip_Clock_GetClockInputHz>
   const uint8_t ptab[] = {1, 2, 4, 8};
1a001254:	4b15      	ldr	r3, [pc, #84]	; (1a0012ac <Chip_Clock_GetMainPLLHz+0x68>)
1a001256:	681b      	ldr	r3, [r3, #0]
1a001258:	9301      	str	r3, [sp, #4]
   if (!(LPC_CGU->PLL1_STAT & 1)) {
1a00125a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a00125c:	f013 0f01 	tst.w	r3, #1
1a001260:	d01f      	beq.n	1a0012a2 <Chip_Clock_GetMainPLLHz+0x5e>
   msel = (PLLReg >> 16) & 0xFF;
1a001262:	f3c4 4307 	ubfx	r3, r4, #16, #8
   nsel = (PLLReg >> 12) & 0x3;
1a001266:	f3c4 3201 	ubfx	r2, r4, #12, #2
   psel = (PLLReg >> 8) & 0x3;
1a00126a:	f3c4 2101 	ubfx	r1, r4, #8, #2
   fbsel = (PLLReg >> 6) & 0x1;
1a00126e:	f3c4 1580 	ubfx	r5, r4, #6, #1
   m = msel + 1;
1a001272:	3301      	adds	r3, #1
   n = nsel + 1;
1a001274:	3201      	adds	r2, #1
   p = ptab[psel];
1a001276:	f10d 0c08 	add.w	ip, sp, #8
1a00127a:	4461      	add	r1, ip
1a00127c:	f811 1c04 	ldrb.w	r1, [r1, #-4]
   if (direct || fbsel) {
1a001280:	f014 0f80 	tst.w	r4, #128	; 0x80
1a001284:	d108      	bne.n	1a001298 <Chip_Clock_GetMainPLLHz+0x54>
1a001286:	b93d      	cbnz	r5, 1a001298 <Chip_Clock_GetMainPLLHz+0x54>
   return (m / (2 * p)) * (freq / n);
1a001288:	0049      	lsls	r1, r1, #1
1a00128a:	fbb3 f3f1 	udiv	r3, r3, r1
1a00128e:	fbb0 f0f2 	udiv	r0, r0, r2
1a001292:	fb00 f003 	mul.w	r0, r0, r3
1a001296:	e005      	b.n	1a0012a4 <Chip_Clock_GetMainPLLHz+0x60>
       return m * (freq / n);
1a001298:	fbb0 f0f2 	udiv	r0, r0, r2
1a00129c:	fb03 f000 	mul.w	r0, r3, r0
1a0012a0:	e000      	b.n	1a0012a4 <Chip_Clock_GetMainPLLHz+0x60>
       return 0;
1a0012a2:	2000      	movs	r0, #0
}
1a0012a4:	b003      	add	sp, #12
1a0012a6:	bd30      	pop	{r4, r5, pc}
1a0012a8:	40050000 	.word	0x40050000
1a0012ac:	1a00248c 	.word	0x1a00248c

1a0012b0 <Chip_Clock_GetDivRate>:
{
1a0012b0:	b538      	push	{r3, r4, r5, lr}
1a0012b2:	460c      	mov	r4, r1
   input = Chip_Clock_GetDividerSource(divider);
1a0012b4:	4608      	mov	r0, r1
1a0012b6:	f7ff ff0d 	bl	1a0010d4 <Chip_Clock_GetDividerSource>
1a0012ba:	4605      	mov	r5, r0
   div = Chip_Clock_GetDividerDivisor(divider);
1a0012bc:	4620      	mov	r0, r4
1a0012be:	f7ff ff17 	bl	1a0010f0 <Chip_Clock_GetDividerDivisor>
1a0012c2:	4604      	mov	r4, r0
   return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a0012c4:	4628      	mov	r0, r5
1a0012c6:	f7ff ff21 	bl	1a00110c <Chip_Clock_GetClockInputHz>
1a0012ca:	3401      	adds	r4, #1
}
1a0012cc:	fbb0 f0f4 	udiv	r0, r0, r4
1a0012d0:	bd38      	pop	{r3, r4, r5, pc}
1a0012d2:	Address 0x000000001a0012d2 is out of bounds.


1a0012d4 <Chip_Clock_SetBaseClock>:
   return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a0012d4:	b430      	push	{r4, r5}
   uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a0012d6:	f100 0416 	add.w	r4, r0, #22
1a0012da:	00a4      	lsls	r4, r4, #2
1a0012dc:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a0012e0:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a0012e4:	6864      	ldr	r4, [r4, #4]

   if (BaseClock < CLK_BASE_NONE) {
1a0012e6:	281b      	cmp	r0, #27
1a0012e8:	d813      	bhi.n	1a001312 <Chip_Clock_SetBaseClock+0x3e>
       if (Input != CLKINPUT_PD) {
1a0012ea:	2911      	cmp	r1, #17
1a0012ec:	d01a      	beq.n	1a001324 <Chip_Clock_SetBaseClock+0x50>
           /* Mask off fields we plan to update */
           reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a0012ee:	4d0e      	ldr	r5, [pc, #56]	; (1a001328 <Chip_Clock_SetBaseClock+0x54>)
1a0012f0:	4025      	ands	r5, r4

           if (autoblocken) {
1a0012f2:	b10a      	cbz	r2, 1a0012f8 <Chip_Clock_SetBaseClock+0x24>
               reg |= (1 << 11);
1a0012f4:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
           }
           if (powerdn) {
1a0012f8:	b10b      	cbz	r3, 1a0012fe <Chip_Clock_SetBaseClock+0x2a>
               reg |= (1 << 0);
1a0012fa:	f045 0501 	orr.w	r5, r5, #1
           }

           /* Set clock source */
           reg |= (Input << 24);
1a0012fe:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

           LPC_CGU->BASE_CLK[BaseClock] = reg;
1a001302:	3016      	adds	r0, #22
1a001304:	0080      	lsls	r0, r0, #2
1a001306:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a00130a:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a00130e:	6045      	str	r5, [r0, #4]
1a001310:	e008      	b.n	1a001324 <Chip_Clock_SetBaseClock+0x50>
       }
   }
   else {
       LPC_CGU->BASE_CLK[BaseClock] = reg | 1; /* Power down this base clock */
1a001312:	f044 0401 	orr.w	r4, r4, #1
1a001316:	3016      	adds	r0, #22
1a001318:	0080      	lsls	r0, r0, #2
1a00131a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a00131e:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a001322:	6044      	str	r4, [r0, #4]
   }
}
1a001324:	bc30      	pop	{r4, r5}
1a001326:	4770      	bx	lr
1a001328:	e0fff7fe 	.word	0xe0fff7fe

1a00132c <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
   uint32_t reg;

   if (BaseClock >= CLK_BASE_NONE) {
1a00132c:	281b      	cmp	r0, #27
1a00132e:	d80c      	bhi.n	1a00134a <Chip_Clock_GetBaseClock+0x1e>
       return CLKINPUT_PD;
   }

   reg = LPC_CGU->BASE_CLK[BaseClock];
1a001330:	3016      	adds	r0, #22
1a001332:	0080      	lsls	r0, r0, #2
1a001334:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a001338:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a00133c:	6840      	ldr	r0, [r0, #4]

   /* base clock is powered down? */
   if (reg & 1) {
1a00133e:	f010 0f01 	tst.w	r0, #1
1a001342:	d104      	bne.n	1a00134e <Chip_Clock_GetBaseClock+0x22>
       return CLKINPUT_PD;
   }

   return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a001344:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a001348:	4770      	bx	lr
       return CLKINPUT_PD;
1a00134a:	2011      	movs	r0, #17
1a00134c:	4770      	bx	lr
       return CLKINPUT_PD;
1a00134e:	2011      	movs	r0, #17
}
1a001350:	4770      	bx	lr

1a001352 <Chip_Clock_GetBaseClocktHz>:
{
1a001352:	b508      	push	{r3, lr}
   return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a001354:	f7ff ffea 	bl	1a00132c <Chip_Clock_GetBaseClock>
1a001358:	f7ff fed8 	bl	1a00110c <Chip_Clock_GetClockInputHz>
}
1a00135c:	bd08      	pop	{r3, pc}
1a00135e:	Address 0x000000001a00135e is out of bounds.


1a001360 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
   uint32_t reg = 1;

   if (autoen) {
1a001360:	b969      	cbnz	r1, 1a00137e <Chip_Clock_EnableOpts+0x1e>
   uint32_t reg = 1;
1a001362:	2101      	movs	r1, #1
       reg |= (1 << 1);
   }
   if (wakeupen) {
1a001364:	b10a      	cbz	r2, 1a00136a <Chip_Clock_EnableOpts+0xa>
       reg |= (1 << 2);
1a001366:	f041 0104 	orr.w	r1, r1, #4
   }

   /* Not all clocks support a divider, but we won't check that here. Only
      dividers of 1 and 2 are allowed. Assume 1 if not 2 */
   if (div == 2) {
1a00136a:	2b02      	cmp	r3, #2
1a00136c:	d009      	beq.n	1a001382 <Chip_Clock_EnableOpts+0x22>
       reg |= (1 << 5);
   }

   /* Setup peripheral clock and start running */
   if (clk >= CLK_CCU2_START) {
1a00136e:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001372:	d209      	bcs.n	1a001388 <Chip_Clock_EnableOpts+0x28>
       LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
   }
   else {
       LPC_CCU1->CLKCCU[clk].CFG = reg;
1a001374:	3020      	adds	r0, #32
1a001376:	4b07      	ldr	r3, [pc, #28]	; (1a001394 <Chip_Clock_EnableOpts+0x34>)
1a001378:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
   }
}
1a00137c:	4770      	bx	lr
       reg |= (1 << 1);
1a00137e:	2103      	movs	r1, #3
1a001380:	e7f0      	b.n	1a001364 <Chip_Clock_EnableOpts+0x4>
       reg |= (1 << 5);
1a001382:	f041 0120 	orr.w	r1, r1, #32
1a001386:	e7f2      	b.n	1a00136e <Chip_Clock_EnableOpts+0xe>
       LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a001388:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a00138c:	4b02      	ldr	r3, [pc, #8]	; (1a001398 <Chip_Clock_EnableOpts+0x38>)
1a00138e:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a001392:	4770      	bx	lr
1a001394:	40051000 	.word	0x40051000
1a001398:	40052000 	.word	0x40052000

1a00139c <Chip_Clock_GetRate>:
   LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a00139c:	b510      	push	{r4, lr}
   CHIP_CGU_BASE_CLK_T baseclk;
   uint32_t reg, div, rate;

   /* Get CCU config register for clock */
   if (clk >= CLK_CCU2_START) {
1a00139e:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0013a2:	d309      	bcc.n	1a0013b8 <Chip_Clock_GetRate+0x1c>
       reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a0013a4:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a0013a8:	4a0d      	ldr	r2, [pc, #52]	; (1a0013e0 <Chip_Clock_GetRate+0x44>)
1a0013aa:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
   else {
       reg = LPC_CCU1->CLKCCU[clk].CFG;
   }

   /* Is the clock enabled? */
   if (reg & 1) {
1a0013ae:	f014 0f01 	tst.w	r4, #1
1a0013b2:	d107      	bne.n	1a0013c4 <Chip_Clock_GetRate+0x28>

       }
       rate = rate / div;
   }
   else {
       rate = 0;
1a0013b4:	2000      	movs	r0, #0
   }

   return rate;
}
1a0013b6:	bd10      	pop	{r4, pc}
       reg = LPC_CCU1->CLKCCU[clk].CFG;
1a0013b8:	f100 0320 	add.w	r3, r0, #32
1a0013bc:	4a09      	ldr	r2, [pc, #36]	; (1a0013e4 <Chip_Clock_GetRate+0x48>)
1a0013be:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a0013c2:	e7f4      	b.n	1a0013ae <Chip_Clock_GetRate+0x12>
       baseclk = Chip_Clock_FindBaseClock(clk);
1a0013c4:	f7ff fe3a 	bl	1a00103c <Chip_Clock_FindBaseClock>
       rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a0013c8:	f7ff ffc3 	bl	1a001352 <Chip_Clock_GetBaseClocktHz>
       if (((reg >> 5) & 0x7) == 0) {
1a0013cc:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a0013d0:	d103      	bne.n	1a0013da <Chip_Clock_GetRate+0x3e>
           div = 1;
1a0013d2:	2301      	movs	r3, #1
       rate = rate / div;
1a0013d4:	fbb0 f0f3 	udiv	r0, r0, r3
1a0013d8:	e7ed      	b.n	1a0013b6 <Chip_Clock_GetRate+0x1a>
           div = 2;/* No other dividers supported */
1a0013da:	2302      	movs	r3, #2
1a0013dc:	e7fa      	b.n	1a0013d4 <Chip_Clock_GetRate+0x38>
1a0013de:	bf00      	nop
1a0013e0:	40052000 	.word	0x40052000
1a0013e4:	40051000 	.word	0x40051000

1a0013e8 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a0013e8:	b570      	push	{r4, r5, r6, lr}
1a0013ea:	b092      	sub	sp, #72	; 0x48
1a0013ec:	4605      	mov	r5, r0
1a0013ee:	460e      	mov	r6, r1
1a0013f0:	4614      	mov	r4, r2
   int i;
   volatile uint32_t delay = 5500;
1a0013f2:	f241 537c 	movw	r3, #5500	; 0x157c
1a0013f6:	9311      	str	r3, [sp, #68]	; 0x44
   uint32_t direct = 0;
   PLL_PARAM_T ppll;

   if (clkin == CLKIN_CRYSTAL) {
1a0013f8:	2806      	cmp	r0, #6
1a0013fa:	d044      	beq.n	1a001486 <Chip_SetupCoreClock+0x9e>
       /* Switch main system clocking to crystal */
       Chip_Clock_EnableCrystal();
   }
   Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a0013fc:	2300      	movs	r3, #0
1a0013fe:	2201      	movs	r2, #1
1a001400:	4629      	mov	r1, r5
1a001402:	2004      	movs	r0, #4
1a001404:	f7ff ff66 	bl	1a0012d4 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
   /* power down main PLL */
   LPC_CGU->PLL1_CTRL |= 1;
1a001408:	4a4a      	ldr	r2, [pc, #296]	; (1a001534 <Chip_SetupCoreClock+0x14c>)
1a00140a:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a00140c:	f043 0301 	orr.w	r3, r3, #1
1a001410:	6453      	str	r3, [r2, #68]	; 0x44
   Chip_Clock_DisableMainPLL(); /* Disable PLL */

   /* Calculate the PLL Parameters */
   ppll.srcin = clkin;
1a001412:	f88d 5028 	strb.w	r5, [sp, #40]	; 0x28
   Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a001416:	a909      	add	r1, sp, #36	; 0x24
1a001418:	4630      	mov	r0, r6
1a00141a:	f7ff fed3 	bl	1a0011c4 <Chip_Clock_CalcMainPLLValue>

   if (core_freq > 110000000UL) {
1a00141e:	4b46      	ldr	r3, [pc, #280]	; (1a001538 <Chip_SetupCoreClock+0x150>)
1a001420:	429e      	cmp	r6, r3
1a001422:	d938      	bls.n	1a001496 <Chip_SetupCoreClock+0xae>
       if (!(ppll.ctrl & (1 << 7)) || ppll.psel) {
1a001424:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a001426:	f013 0f80 	tst.w	r3, #128	; 0x80
1a00142a:	d001      	beq.n	1a001430 <Chip_SetupCoreClock+0x48>
1a00142c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a00142e:	b36a      	cbz	r2, 1a00148c <Chip_SetupCoreClock+0xa4>
           PLL_PARAM_T lpll;
           /* Calculate the PLL Parameters */
           lpll.srcin = clkin;
1a001430:	f88d 5008 	strb.w	r5, [sp, #8]
           Chip_Clock_CalcMainPLLValue(110000000UL, &lpll);
1a001434:	a901      	add	r1, sp, #4
1a001436:	4840      	ldr	r0, [pc, #256]	; (1a001538 <Chip_SetupCoreClock+0x150>)
1a001438:	f7ff fec4 	bl	1a0011c4 <Chip_Clock_CalcMainPLLValue>
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
   /* power up main PLL */
   LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8);
1a00143c:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a001440:	9b01      	ldr	r3, [sp, #4]
1a001442:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a001446:	9a05      	ldr	r2, [sp, #20]
1a001448:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a00144c:	9a03      	ldr	r2, [sp, #12]
1a00144e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a001452:	9a04      	ldr	r2, [sp, #16]
1a001454:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a001458:	4a36      	ldr	r2, [pc, #216]	; (1a001534 <Chip_SetupCoreClock+0x14c>)
1a00145a:	6453      	str	r3, [r2, #68]	; 0x44
 * @note   The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
   /* Return true if locked */
   return (LPC_CGU->PLL1_STAT & 1) != 0;
1a00145c:	4b35      	ldr	r3, [pc, #212]	; (1a001534 <Chip_SetupCoreClock+0x14c>)
1a00145e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
           Chip_Clock_SetupMainPLL(&lpll);
           /* Wait for the PLL to lock */
           while(!Chip_Clock_MainPLLLocked()) {}
1a001460:	f013 0f01 	tst.w	r3, #1
1a001464:	d0fa      	beq.n	1a00145c <Chip_SetupCoreClock+0x74>
           Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a001466:	2300      	movs	r3, #0
1a001468:	2201      	movs	r2, #1
1a00146a:	2109      	movs	r1, #9
1a00146c:	2004      	movs	r0, #4
1a00146e:	f7ff ff31 	bl	1a0012d4 <Chip_Clock_SetBaseClock>
           while(delay --){}
1a001472:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a001474:	1e5a      	subs	r2, r3, #1
1a001476:	9211      	str	r2, [sp, #68]	; 0x44
1a001478:	2b00      	cmp	r3, #0
1a00147a:	d1fa      	bne.n	1a001472 <Chip_SetupCoreClock+0x8a>
           delay = 5500;
1a00147c:	f241 537c 	movw	r3, #5500	; 0x157c
1a001480:	9311      	str	r3, [sp, #68]	; 0x44
   uint32_t direct = 0;
1a001482:	2500      	movs	r5, #0
       if (!(ppll.ctrl & (1 << 7)) || ppll.psel) {
1a001484:	e008      	b.n	1a001498 <Chip_SetupCoreClock+0xb0>
       Chip_Clock_EnableCrystal();
1a001486:	f7ff fdff 	bl	1a001088 <Chip_Clock_EnableCrystal>
1a00148a:	e7b7      	b.n	1a0013fc <Chip_SetupCoreClock+0x14>
       } else {
           direct = 1;
           ppll.ctrl &= ~(1 << 7);
1a00148c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a001490:	9309      	str	r3, [sp, #36]	; 0x24
           direct = 1;
1a001492:	2501      	movs	r5, #1
1a001494:	e000      	b.n	1a001498 <Chip_SetupCoreClock+0xb0>
   uint32_t direct = 0;
1a001496:	2500      	movs	r5, #0
   LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8);
1a001498:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
1a00149c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00149e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a0014a2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1a0014a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0014a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a0014aa:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0014ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a0014b0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0014b4:	4a1f      	ldr	r2, [pc, #124]	; (1a001534 <Chip_SetupCoreClock+0x14c>)
1a0014b6:	6453      	str	r3, [r2, #68]	; 0x44
   return (LPC_CGU->PLL1_STAT & 1) != 0;
1a0014b8:	4b1e      	ldr	r3, [pc, #120]	; (1a001534 <Chip_SetupCoreClock+0x14c>)
1a0014ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40

   /* Setup and start the PLL */
   Chip_Clock_SetupMainPLL(&ppll);

   /* Wait for the PLL to lock */
   while(!Chip_Clock_MainPLLLocked()) {}
1a0014bc:	f013 0f01 	tst.w	r3, #1
1a0014c0:	d0fa      	beq.n	1a0014b8 <Chip_SetupCoreClock+0xd0>

   /* Set core clock base as PLL1 */
   Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a0014c2:	2300      	movs	r3, #0
1a0014c4:	2201      	movs	r2, #1
1a0014c6:	2109      	movs	r1, #9
1a0014c8:	2004      	movs	r0, #4
1a0014ca:	f7ff ff03 	bl	1a0012d4 <Chip_Clock_SetBaseClock>

   while(delay --){} /* Wait for approx 50 uSec */
1a0014ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a0014d0:	1e5a      	subs	r2, r3, #1
1a0014d2:	9211      	str	r2, [sp, #68]	; 0x44
1a0014d4:	2b00      	cmp	r3, #0
1a0014d6:	d1fa      	bne.n	1a0014ce <Chip_SetupCoreClock+0xe6>
   if (direct) {
1a0014d8:	b1d5      	cbz	r5, 1a001510 <Chip_SetupCoreClock+0x128>
       delay = 5500;
1a0014da:	f241 537c 	movw	r3, #5500	; 0x157c
1a0014de:	9311      	str	r3, [sp, #68]	; 0x44
       ppll.ctrl |= 1 << 7;
1a0014e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0014e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0014e6:	9309      	str	r3, [sp, #36]	; 0x24
   LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8);
1a0014e8:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
1a0014ec:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a0014f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1a0014f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0014f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a0014f8:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0014fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a0014fe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a001502:	4a0c      	ldr	r2, [pc, #48]	; (1a001534 <Chip_SetupCoreClock+0x14c>)
1a001504:	6453      	str	r3, [r2, #68]	; 0x44
       Chip_Clock_SetupMainPLL(&ppll); /* Set DIRECT to operate at full frequency */
       while(delay --){} /* Wait for approx 50 uSec */
1a001506:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a001508:	1e5a      	subs	r2, r3, #1
1a00150a:	9211      	str	r2, [sp, #68]	; 0x44
1a00150c:	2b00      	cmp	r3, #0
1a00150e:	d1fa      	bne.n	1a001506 <Chip_SetupCoreClock+0x11e>
   }

   if (setbase) {
1a001510:	b174      	cbz	r4, 1a001530 <Chip_SetupCoreClock+0x148>
       /* Setup system base clocks and initial states. This won't enable and
          disable individual clocks, but sets up the base clock sources for
          each individual peripheral clock. */
       for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a001512:	2400      	movs	r4, #0
1a001514:	e00a      	b.n	1a00152c <Chip_SetupCoreClock+0x144>
           Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a001516:	4809      	ldr	r0, [pc, #36]	; (1a00153c <Chip_SetupCoreClock+0x154>)
1a001518:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a00151c:	78cb      	ldrb	r3, [r1, #3]
1a00151e:	788a      	ldrb	r2, [r1, #2]
1a001520:	7849      	ldrb	r1, [r1, #1]
1a001522:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a001526:	f7ff fed5 	bl	1a0012d4 <Chip_Clock_SetBaseClock>
       for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a00152a:	3401      	adds	r4, #1
1a00152c:	2c11      	cmp	r4, #17
1a00152e:	d9f2      	bls.n	1a001516 <Chip_SetupCoreClock+0x12e>
                                   InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
       }
   }
}
1a001530:	b012      	add	sp, #72	; 0x48
1a001532:	bd70      	pop	{r4, r5, r6, pc}
1a001534:	40050000 	.word	0x40050000
1a001538:	068e7780 	.word	0x068e7780
1a00153c:	1a002504 	.word	0x1a002504

1a001540 <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a001540:	4770      	bx	lr
1a001542:	Address 0x000000001a001542 is out of bounds.


1a001544 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a001544:	b508      	push	{r3, lr}
   /* CPU core speed */
   SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a001546:	2069      	movs	r0, #105	; 0x69
1a001548:	f7ff ff28 	bl	1a00139c <Chip_Clock_GetRate>
1a00154c:	4b01      	ldr	r3, [pc, #4]	; (1a001554 <SystemCoreClockUpdate+0x10>)
1a00154e:	6018      	str	r0, [r3, #0]
}
1a001550:	bd08      	pop	{r3, pc}
1a001552:	bf00      	nop
1a001554:	10000aa4 	.word	0x10000aa4

1a001558 <fpuInit>:
 * Public functions
 ****************************************************************************/

/* Early initialization of the FPU */
void fpuInit(void)
{
1a001558:	b084      	sub	sp, #16
   volatile uint32_t Cpacr;
   volatile uint32_t Mvfr0;
   volatile uint32_t Mvfr1;
   char vfpPresent = 0;

   Mvfr0 = *regMvfr0;
1a00155a:	4b0f      	ldr	r3, [pc, #60]	; (1a001598 <fpuInit+0x40>)
1a00155c:	681b      	ldr	r3, [r3, #0]
1a00155e:	9302      	str	r3, [sp, #8]
   Mvfr1 = *regMvfr1;
1a001560:	4b0e      	ldr	r3, [pc, #56]	; (1a00159c <fpuInit+0x44>)
1a001562:	681b      	ldr	r3, [r3, #0]
1a001564:	9301      	str	r3, [sp, #4]

   vfpPresent = ((SCB_MVFR0_RESET == Mvfr0) && (SCB_MVFR1_RESET == Mvfr1));
1a001566:	9a02      	ldr	r2, [sp, #8]
1a001568:	4b0d      	ldr	r3, [pc, #52]	; (1a0015a0 <fpuInit+0x48>)
1a00156a:	429a      	cmp	r2, r3
1a00156c:	d00c      	beq.n	1a001588 <fpuInit+0x30>
1a00156e:	2300      	movs	r3, #0

   if (vfpPresent) {
1a001570:	b143      	cbz	r3, 1a001584 <fpuInit+0x2c>
       Cpacr = *regCpacr;
1a001572:	4a0c      	ldr	r2, [pc, #48]	; (1a0015a4 <fpuInit+0x4c>)
1a001574:	6813      	ldr	r3, [r2, #0]
1a001576:	9303      	str	r3, [sp, #12]
       Cpacr |= (0xF << 20);
1a001578:	9b03      	ldr	r3, [sp, #12]
1a00157a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a00157e:	9303      	str	r3, [sp, #12]
       *regCpacr = Cpacr;  // enable CP10 and CP11 for full access
1a001580:	9b03      	ldr	r3, [sp, #12]
1a001582:	6013      	str	r3, [r2, #0]
   }
#endif /* __FPU_PRESENT != 0 */
}
1a001584:	b004      	add	sp, #16
1a001586:	4770      	bx	lr
   vfpPresent = ((SCB_MVFR0_RESET == Mvfr0) && (SCB_MVFR1_RESET == Mvfr1));
1a001588:	9a01      	ldr	r2, [sp, #4]
1a00158a:	4b07      	ldr	r3, [pc, #28]	; (1a0015a8 <fpuInit+0x50>)
1a00158c:	429a      	cmp	r2, r3
1a00158e:	d001      	beq.n	1a001594 <fpuInit+0x3c>
1a001590:	2300      	movs	r3, #0
1a001592:	e7ed      	b.n	1a001570 <fpuInit+0x18>
1a001594:	2301      	movs	r3, #1
1a001596:	e7eb      	b.n	1a001570 <fpuInit+0x18>
1a001598:	e000ef40 	.word	0xe000ef40
1a00159c:	e000ef44 	.word	0xe000ef44
1a0015a0:	10110021 	.word	0x10110021
1a0015a4:	e000ed88 	.word	0xe000ed88
1a0015a8:	11000011 	.word	0x11000011

1a0015ac <ResetISR>:
void ResetISR(void) {
1a0015ac:	b510      	push	{r4, lr}
    __asm volatile ("cpsid i");
1a0015ae:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a0015b0:	4b16      	ldr	r3, [pc, #88]	; (1a00160c <ResetISR+0x60>)
1a0015b2:	4a17      	ldr	r2, [pc, #92]	; (1a001610 <ResetISR+0x64>)
1a0015b4:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a0015b6:	3304      	adds	r3, #4
1a0015b8:	4a16      	ldr	r2, [pc, #88]	; (1a001614 <ResetISR+0x68>)
1a0015ba:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0015bc:	2300      	movs	r3, #0
1a0015be:	e005      	b.n	1a0015cc <ResetISR+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a0015c0:	4a15      	ldr	r2, [pc, #84]	; (1a001618 <ResetISR+0x6c>)
1a0015c2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a0015c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0015ca:	3301      	adds	r3, #1
1a0015cc:	2b07      	cmp	r3, #7
1a0015ce:	d9f7      	bls.n	1a0015c0 <ResetISR+0x14>
    __asm volatile ("cpsie i");
1a0015d0:	b662      	cpsie	i
    SystemInit();
1a0015d2:	f000 f90b 	bl	1a0017ec <SystemInit>
    SectionTableAddr = &__data_section_table;
1a0015d6:	4b11      	ldr	r3, [pc, #68]	; (1a00161c <ResetISR+0x70>)
    while (SectionTableAddr < &__data_section_table_end) {
1a0015d8:	e007      	b.n	1a0015ea <ResetISR+0x3e>
        SectionLen = *SectionTableAddr++;
1a0015da:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a0015de:	689a      	ldr	r2, [r3, #8]
1a0015e0:	6859      	ldr	r1, [r3, #4]
1a0015e2:	6818      	ldr	r0, [r3, #0]
1a0015e4:	f7fe fdd1 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a0015e8:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a0015ea:	4a0d      	ldr	r2, [pc, #52]	; (1a001620 <ResetISR+0x74>)
1a0015ec:	4293      	cmp	r3, r2
1a0015ee:	d3f4      	bcc.n	1a0015da <ResetISR+0x2e>
1a0015f0:	e006      	b.n	1a001600 <ResetISR+0x54>
        ExeAddr = *SectionTableAddr++;
1a0015f2:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a0015f4:	6859      	ldr	r1, [r3, #4]
1a0015f6:	f854 0b08 	ldr.w	r0, [r4], #8
1a0015fa:	f7fe fdd5 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a0015fe:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a001600:	4a08      	ldr	r2, [pc, #32]	; (1a001624 <ResetISR+0x78>)
1a001602:	4293      	cmp	r3, r2
1a001604:	d3f5      	bcc.n	1a0015f2 <ResetISR+0x46>
    main();
1a001606:	f7ff fb4d 	bl	1a000ca4 <main>
1a00160a:	e7fe      	b.n	1a00160a <ResetISR+0x5e>
1a00160c:	40053100 	.word	0x40053100
1a001610:	10df1000 	.word	0x10df1000
1a001614:	01dff7ff 	.word	0x01dff7ff
1a001618:	e000e280 	.word	0xe000e280
1a00161c:	1a000114 	.word	0x1a000114
1a001620:	1a000150 	.word	0x1a000150
1a001624:	1a000178 	.word	0x1a000178

1a001628 <Board_SetupMuxing>:
 * @return Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
   uint32_t ix;
   for (ix = 0; ix < arrayLength; ix++ ) {
1a001628:	2300      	movs	r3, #0
1a00162a:	2b17      	cmp	r3, #23
1a00162c:	d812      	bhi.n	1a001654 <Board_SetupMuxing+0x2c>
 * Public functions
 ****************************************************************************/

/* Sets up system pin muxing */
void Board_SetupMuxing(void)
{
1a00162e:	b410      	push	{r4}
       Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a001630:	4a09      	ldr	r2, [pc, #36]	; (1a001658 <Board_SetupMuxing+0x30>)
1a001632:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a001636:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a00163a:	784a      	ldrb	r2, [r1, #1]
1a00163c:	8848      	ldrh	r0, [r1, #2]
   LPC_SCU->SFSP[port][pin] = modefunc;
1a00163e:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a001642:	4906      	ldr	r1, [pc, #24]	; (1a00165c <Board_SetupMuxing+0x34>)
1a001644:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
   for (ix = 0; ix < arrayLength; ix++ ) {
1a001648:	3301      	adds	r3, #1
1a00164a:	2b17      	cmp	r3, #23
1a00164c:	d9f0      	bls.n	1a001630 <Board_SetupMuxing+0x8>
   /* Setup system level pin muxing */
   Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a00164e:	f85d 4b04 	ldr.w	r4, [sp], #4
1a001652:	4770      	bx	lr
1a001654:	4770      	bx	lr
1a001656:	bf00      	nop
1a001658:	1a002558 	.word	0x1a002558
1a00165c:	40086000 	.word	0x40086000

1a001660 <Board_SetupClocking>:

/* Set up and initialize clocking prior to call to main */
void Board_SetupClocking(void)
{
1a001660:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
   uint32_t FAValue = Hz / 21510000;

   LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a001662:	4a17      	ldr	r2, [pc, #92]	; (1a0016c0 <Board_SetupClocking+0x60>)
1a001664:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a001668:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a00166c:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a001670:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
   LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a001674:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a001678:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a00167c:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a001680:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124

   /* Enable Flash acceleration and setup wait states */
   Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);

   /* Setup System core frequency to MAX_CLOCK_FREQ */
   Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a001684:	2201      	movs	r2, #1
1a001686:	490f      	ldr	r1, [pc, #60]	; (1a0016c4 <Board_SetupClocking+0x64>)
1a001688:	2006      	movs	r0, #6
1a00168a:	f7ff fead 	bl	1a0013e8 <Chip_SetupCoreClock>

   /* Setup system base clocks and initial states. This won't enable and
      disable individual clocks, but sets up the base clock sources for
      each individual peripheral clock. */
   for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a00168e:	2400      	movs	r4, #0
1a001690:	e00a      	b.n	1a0016a8 <Board_SetupClocking+0x48>
       Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a001692:	480d      	ldr	r0, [pc, #52]	; (1a0016c8 <Board_SetupClocking+0x68>)
1a001694:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a001698:	78cb      	ldrb	r3, [r1, #3]
1a00169a:	788a      	ldrb	r2, [r1, #2]
1a00169c:	7849      	ldrb	r1, [r1, #1]
1a00169e:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a0016a2:	f7ff fe17 	bl	1a0012d4 <Chip_Clock_SetBaseClock>
   for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a0016a6:	3401      	adds	r4, #1
1a0016a8:	2c02      	cmp	r4, #2
1a0016aa:	d9f2      	bls.n	1a001692 <Board_SetupClocking+0x32>
                               InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
   }

   /* Reset and enable 32Khz oscillator */
   LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a0016ac:	4b04      	ldr	r3, [pc, #16]	; (1a0016c0 <Board_SetupClocking+0x60>)
1a0016ae:	685a      	ldr	r2, [r3, #4]
1a0016b0:	f022 020c 	bic.w	r2, r2, #12
1a0016b4:	605a      	str	r2, [r3, #4]
   LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a0016b6:	685a      	ldr	r2, [r3, #4]
1a0016b8:	f042 0203 	orr.w	r2, r2, #3
1a0016bc:	605a      	str	r2, [r3, #4]
}
1a0016be:	bd10      	pop	{r4, pc}
1a0016c0:	40043000 	.word	0x40043000
1a0016c4:	0c28cb00 	.word	0x0c28cb00
1a0016c8:	1a00254c 	.word	0x1a00254c

1a0016cc <Board_SystemInit>:

/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a0016cc:	b508      	push	{r3, lr}
   /* Setup system clocking and memory. This is done early to allow the
      application and tools to clear memory and use scatter loading to
      external memory. */
   Board_SetupMuxing();
1a0016ce:	f7ff ffab 	bl	1a001628 <Board_SetupMuxing>
   Board_SetupClocking();
1a0016d2:	f7ff ffc5 	bl	1a001660 <Board_SetupClocking>
}
1a0016d6:	bd08      	pop	{r3, pc}

1a0016d8 <Board_LED_Init>:

static void Board_LED_Init()
{
   uint32_t idx;

   for (idx = 0; idx < (sizeof(gpioLEDBits) / sizeof(io_port_t)); ++idx) {
1a0016d8:	2200      	movs	r2, #0
1a0016da:	2a05      	cmp	r2, #5
1a0016dc:	d819      	bhi.n	1a001712 <Board_LED_Init+0x3a>
{
1a0016de:	b470      	push	{r4, r5, r6}
       /* Set pin direction and init to off */
       Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, gpioLEDBits[idx].port, gpioLEDBits[idx].pin);
1a0016e0:	490c      	ldr	r1, [pc, #48]	; (1a001714 <Board_LED_Init+0x3c>)
1a0016e2:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a0016e6:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a0016ea:	784c      	ldrb	r4, [r1, #1]
 * @param  pin     : GPIO pin to set direction on as output
 * @return Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
   pGPIO->DIR[port] |= 1UL << pin;
1a0016ec:	4b0a      	ldr	r3, [pc, #40]	; (1a001718 <Board_LED_Init+0x40>)
1a0016ee:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a0016f2:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a0016f6:	2001      	movs	r0, #1
1a0016f8:	40a0      	lsls	r0, r4
1a0016fa:	4301      	orrs	r1, r0
1a0016fc:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
   pGPIO->B[port][pin] = setting;
1a001700:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a001704:	2100      	movs	r1, #0
1a001706:	5519      	strb	r1, [r3, r4]
   for (idx = 0; idx < (sizeof(gpioLEDBits) / sizeof(io_port_t)); ++idx) {
1a001708:	3201      	adds	r2, #1
1a00170a:	2a05      	cmp	r2, #5
1a00170c:	d9e8      	bls.n	1a0016e0 <Board_LED_Init+0x8>
       Chip_GPIO_SetPinState(LPC_GPIO_PORT, gpioLEDBits[idx].port, gpioLEDBits[idx].pin, (bool) false);
   }
}
1a00170e:	bc70      	pop	{r4, r5, r6}
1a001710:	4770      	bx	lr
1a001712:	4770      	bx	lr
1a001714:	1a0025c0 	.word	0x1a0025c0
1a001718:	400f4000 	.word	0x400f4000

1a00171c <Board_UART_Init>:
   LPC_SCU->SFSP[port][pin] = modefunc;
1a00171c:	4b03      	ldr	r3, [pc, #12]	; (1a00172c <Board_UART_Init+0x10>)
1a00171e:	2212      	movs	r2, #18
1a001720:	f8c3 2310 	str.w	r2, [r3, #784]	; 0x310
1a001724:	22d1      	movs	r2, #209	; 0xd1
1a001726:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
}
1a00172a:	4770      	bx	lr
1a00172c:	40086000 	.word	0x40086000

1a001730 <Board_Debug_Init>:
{
1a001730:	b510      	push	{r4, lr}
   Board_UART_Init(DEBUG_UART);
1a001732:	4c08      	ldr	r4, [pc, #32]	; (1a001754 <Board_Debug_Init+0x24>)
1a001734:	4620      	mov	r0, r4
1a001736:	f7ff fff1 	bl	1a00171c <Board_UART_Init>
   Chip_UART_Init(DEBUG_UART);
1a00173a:	4620      	mov	r0, r4
1a00173c:	f7ff fb0e 	bl	1a000d5c <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, 115200);
1a001740:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a001744:	4620      	mov	r0, r4
1a001746:	f7ff fb33 	bl	1a000db0 <Chip_UART_SetBaudFDR>
   pUART->LCR = config;
1a00174a:	2303      	movs	r3, #3
1a00174c:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a00174e:	2301      	movs	r3, #1
1a001750:	65e3      	str	r3, [r4, #92]	; 0x5c
}
1a001752:	bd10      	pop	{r4, pc}
1a001754:	400c1000 	.word	0x400c1000

1a001758 <Board_LED_Set>:

void Board_LED_Set(uint8_t LEDNumber, bool On)
{
   if (LEDNumber < (sizeof(gpioLEDBits) / sizeof(io_port_t)))
1a001758:	2805      	cmp	r0, #5
1a00175a:	d80d      	bhi.n	1a001778 <Board_LED_Set+0x20>
        Chip_GPIO_SetPinState(LPC_GPIO_PORT, gpioLEDBits[LEDNumber].port, gpioLEDBits[LEDNumber].pin, (bool) !On);
1a00175c:	4a07      	ldr	r2, [pc, #28]	; (1a00177c <Board_LED_Set+0x24>)
1a00175e:	f812 3010 	ldrb.w	r3, [r2, r0, lsl #1]
1a001762:	eb02 0040 	add.w	r0, r2, r0, lsl #1
1a001766:	7842      	ldrb	r2, [r0, #1]
1a001768:	f081 0101 	eor.w	r1, r1, #1
1a00176c:	015b      	lsls	r3, r3, #5
1a00176e:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a001772:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a001776:	5499      	strb	r1, [r3, r2]
}
1a001778:	4770      	bx	lr
1a00177a:	bf00      	nop
1a00177c:	1a0025c0 	.word	0x1a0025c0

1a001780 <Board_LED_Test>:

bool Board_LED_Test(uint8_t LEDNumber)
{
   if (LEDNumber < (sizeof(gpioLEDBits) / sizeof(io_port_t)))
1a001780:	2805      	cmp	r0, #5
1a001782:	d80f      	bhi.n	1a0017a4 <Board_LED_Test+0x24>
       return (bool) !Chip_GPIO_GetPinState(LPC_GPIO_PORT, gpioLEDBits[LEDNumber].port, gpioLEDBits[LEDNumber].pin);
1a001784:	4a08      	ldr	r2, [pc, #32]	; (1a0017a8 <Board_LED_Test+0x28>)
1a001786:	f812 3010 	ldrb.w	r3, [r2, r0, lsl #1]
1a00178a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
1a00178e:	7842      	ldrb	r2, [r0, #1]
   return (bool) pGPIO->B[port][pin];
1a001790:	015b      	lsls	r3, r3, #5
1a001792:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a001796:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a00179a:	5c98      	ldrb	r0, [r3, r2]
1a00179c:	fab0 f080 	clz	r0, r0
1a0017a0:	0940      	lsrs	r0, r0, #5
1a0017a2:	4770      	bx	lr

   return false;
1a0017a4:	2000      	movs	r0, #0
}
1a0017a6:	4770      	bx	lr
1a0017a8:	1a0025c0 	.word	0x1a0025c0

1a0017ac <Board_LED_Toggle>:

void Board_LED_Toggle(uint8_t LEDNumber)
{
1a0017ac:	b510      	push	{r4, lr}
1a0017ae:	4604      	mov	r4, r0
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
1a0017b0:	f7ff ffe6 	bl	1a001780 <Board_LED_Test>
1a0017b4:	f080 0101 	eor.w	r1, r0, #1
1a0017b8:	b2c9      	uxtb	r1, r1
1a0017ba:	4620      	mov	r0, r4
1a0017bc:	f7ff ffcc 	bl	1a001758 <Board_LED_Set>
}
1a0017c0:	bd10      	pop	{r4, pc}
1a0017c2:	Address 0x000000001a0017c2 is out of bounds.


1a0017c4 <Board_Init>:
}

/* Set up and initialize all required blocks and functions related to the
   board hardware */
void Board_Init(void)
{
1a0017c4:	b508      	push	{r3, lr}
   /* Sets up DEBUG UART */
   DEBUGINIT();
1a0017c6:	f7ff ffb3 	bl	1a001730 <Board_Debug_Init>

   /* Initializes GPIO */
   Chip_GPIO_Init(LPC_GPIO_PORT);
1a0017ca:	4806      	ldr	r0, [pc, #24]	; (1a0017e4 <Board_Init+0x20>)
1a0017cc:	f7ff feb8 	bl	1a001540 <Chip_GPIO_Init>

   /* Initialize LEDs */
   Board_LED_Init();
1a0017d0:	f7ff ff82 	bl	1a0016d8 <Board_LED_Init>
 * RMII PHY, and must be called before calling any Ethernet
 * functions.
 */
STATIC INLINE void Chip_ENET_RMIIEnable(LPC_ENET_T *pENET)
{
   LPC_CREG->CREG6 |= 0x4;
1a0017d4:	4a04      	ldr	r2, [pc, #16]	; (1a0017e8 <Board_Init+0x24>)
1a0017d6:	f8d2 312c 	ldr.w	r3, [r2, #300]	; 0x12c
1a0017da:	f043 0304 	orr.w	r3, r3, #4
1a0017de:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
}
1a0017e2:	bd08      	pop	{r3, pc}
1a0017e4:	400f4000 	.word	0x400f4000
1a0017e8:	40043000 	.word	0x40043000

1a0017ec <SystemInit>:
 * Public functions
 ****************************************************************************/

/* Set up and initialize hardware prior to call to main */
void SystemInit(void)
{
1a0017ec:	b508      	push	{r3, lr}

   *pSCB_VTOR = (unsigned int) &__Vectors;
#endif

#if defined(__FPU_PRESENT) && __FPU_PRESENT == 1
   fpuInit();
1a0017ee:	f7ff feb3 	bl	1a001558 <fpuInit>
#if defined(NO_BOARD_LIB)
   /* Chip specific SystemInit */
   Chip_SystemInit();
#else
   /* Board specific SystemInit */
   Board_SystemInit();
1a0017f2:	f7ff ff6b 	bl	1a0016cc <Board_SystemInit>
#endif

#endif /* defined(CORE_M3) || defined(CORE_M4) */
}
1a0017f6:	bd08      	pop	{r3, pc}

1a0017f8 <gpioObtainPinConfig>:
/*==================[internal functions definition]==========================*/

static void gpioObtainPinConfig( gpioMap_t pin,
                                int8_t *pinNamePort, int8_t *pinNamePin,
																int8_t *func, int8_t *gpioPort,
																int8_t *gpioPin ){
1a0017f8:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsConfig[pin].pinName.port;
1a0017fa:	4d0b      	ldr	r5, [pc, #44]	; (1a001828 <gpioObtainPinConfig+0x30>)
1a0017fc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a001800:	182c      	adds	r4, r5, r0
1a001802:	5628      	ldrsb	r0, [r5, r0]
1a001804:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsConfig[pin].pinName.pin;
1a001806:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a00180a:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsConfig[pin].func;
1a00180c:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a001810:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsConfig[pin].gpio.port;
1a001812:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a001816:	9b02      	ldr	r3, [sp, #8]
1a001818:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsConfig[pin].gpio.pin;
1a00181a:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a00181e:	9b03      	ldr	r3, [sp, #12]
1a001820:	701a      	strb	r2, [r3, #0]
}
1a001822:	bc30      	pop	{r4, r5}
1a001824:	4770      	bx	lr
1a001826:	bf00      	nop
1a001828:	1a0025cc 	.word	0x1a0025cc

1a00182c <gpioWrite>:
   return ret_val;

}


bool_t gpioWrite( gpioMap_t pin, bool_t value ){
1a00182c:	b510      	push	{r4, lr}
1a00182e:	b084      	sub	sp, #16
1a001830:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a001832:	2300      	movs	r3, #0
1a001834:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a001838:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a00183c:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a001840:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a001844:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinConfig( pin, &pinNamePort, &pinNamePin, &func,
1a001848:	f10d 030b 	add.w	r3, sp, #11
1a00184c:	9301      	str	r3, [sp, #4]
1a00184e:	ab03      	add	r3, sp, #12
1a001850:	9300      	str	r3, [sp, #0]
1a001852:	f10d 030d 	add.w	r3, sp, #13
1a001856:	f10d 020e 	add.w	r2, sp, #14
1a00185a:	f10d 010f 	add.w	r1, sp, #15
1a00185e:	f7ff ffcb 	bl	1a0017f8 <gpioObtainPinConfig>
                           &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a001862:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001866:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a00186a:	3400      	adds	r4, #0
1a00186c:	bf18      	it	ne
1a00186e:	2401      	movne	r4, #1
   pGPIO->B[port][pin] = setting;
1a001870:	015b      	lsls	r3, r3, #5
1a001872:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a001876:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a00187a:	549c      	strb	r4, [r3, r2]

   return ret_val;
}
1a00187c:	2001      	movs	r0, #1
1a00187e:	b004      	add	sp, #16
1a001880:	bd10      	pop	{r4, pc}

1a001882 <gpioRead>:

   return gpioWrite( pin, !gpioRead(pin) );
}


bool_t gpioRead( gpioMap_t pin ){
1a001882:	b500      	push	{lr}
1a001884:	b085      	sub	sp, #20

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a001886:	2300      	movs	r3, #0
1a001888:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a00188c:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a001890:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a001894:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a001898:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinConfig( pin, &pinNamePort, &pinNamePin, &func,
1a00189c:	f10d 030b 	add.w	r3, sp, #11
1a0018a0:	9301      	str	r3, [sp, #4]
1a0018a2:	ab03      	add	r3, sp, #12
1a0018a4:	9300      	str	r3, [sp, #0]
1a0018a6:	f10d 030d 	add.w	r3, sp, #13
1a0018aa:	f10d 020e 	add.w	r2, sp, #14
1a0018ae:	f10d 010f 	add.w	r1, sp, #15
1a0018b2:	f7ff ffa1 	bl	1a0017f8 <gpioObtainPinConfig>
                           &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a0018b6:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a0018ba:	f89d 200b 	ldrb.w	r2, [sp, #11]
   return (bool) pGPIO->B[port][pin];
1a0018be:	015b      	lsls	r3, r3, #5
1a0018c0:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a0018c4:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a0018c8:	5c98      	ldrb	r0, [r3, r2]

   return ret_val;
}
1a0018ca:	3000      	adds	r0, #0
1a0018cc:	bf18      	it	ne
1a0018ce:	2001      	movne	r0, #1
1a0018d0:	b005      	add	sp, #20
1a0018d2:	f85d fb04 	ldr.w	pc, [sp], #4

1a0018d6 <gpioToggle>:
bool_t gpioToggle( gpioMap_t pin ){
1a0018d6:	b510      	push	{r4, lr}
1a0018d8:	4604      	mov	r4, r0
   return gpioWrite( pin, !gpioRead(pin) );
1a0018da:	f7ff ffd2 	bl	1a001882 <gpioRead>
1a0018de:	fab0 f180 	clz	r1, r0
1a0018e2:	0949      	lsrs	r1, r1, #5
1a0018e4:	4620      	mov	r0, r4
1a0018e6:	f7ff ffa1 	bl	1a00182c <gpioWrite>
}
1a0018ea:	bd10      	pop	{r4, pc}

1a0018ec <PendSV_Handler>:
	.thumb_func


PendSV_Handler:
	//-----Contexto FPU-----
	tst lr,0x10			//lr (EXc_RETURN) and 0x10 comparación
1a0018ec:	f01e 0f10 	tst.w	lr, #16
	it eq				//si el resultado es igual a cero
1a0018f0:	bf08      	it	eq
	vpusheq {s16-s31}	//pusheo s16 a s32 a la pila fuerzo al staking s0-s15 fpscr
1a0018f2:	ed2d 8a10 	vpusheq	{s16-s31}
	//----------------------
	push {r4-r11,lr}
1a0018f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	mrs r0, msp			//guardo el valor de msp actual(envio msp mediante r0)
1a0018fa:	f3ef 8008 	mrs	r0, MSP
	bl get_next_context	//llamo a la funcion get_next_context
1a0018fe:	f7ff f875 	bl	1a0009ec <get_next_context>
	msr msp,r0			//msp es el stack pointer principal (cargo el siguiente sp devuelto por get_next_context)
1a001902:	f380 8808 	msr	MSP, r0

	pop {r4-r11,lr}
1a001906:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	//----- Contexto FPU-----
	tst lr,0x10
1a00190a:	f01e 0f10 	tst.w	lr, #16
	it eq
1a00190e:	bf08      	it	eq
	vpopeq {s16-s31}
1a001910:	ecbd 8a10 	vpopeq	{s16-s31}

1a001914 <return>:
return:
	bx lr
1a001914:	4770      	bx	lr
1a001916:	Address 0x000000001a001916 is out of bounds.


1a001918 <__aeabi_drsub>:
1a001918:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
1a00191c:	e002      	b.n	1a001924 <__adddf3>
1a00191e:	bf00      	nop

1a001920 <__aeabi_dsub>:
1a001920:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

1a001924 <__adddf3>:
1a001924:	b530      	push	{r4, r5, lr}
1a001926:	ea4f 0441 	mov.w	r4, r1, lsl #1
1a00192a:	ea4f 0543 	mov.w	r5, r3, lsl #1
1a00192e:	ea94 0f05 	teq	r4, r5
1a001932:	bf08      	it	eq
1a001934:	ea90 0f02 	teqeq	r0, r2
1a001938:	bf1f      	itttt	ne
1a00193a:	ea54 0c00 	orrsne.w	ip, r4, r0
1a00193e:	ea55 0c02 	orrsne.w	ip, r5, r2
1a001942:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
1a001946:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a00194a:	f000 80e2 	beq.w	1a001b12 <__adddf3+0x1ee>
1a00194e:	ea4f 5454 	mov.w	r4, r4, lsr #21
1a001952:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
1a001956:	bfb8      	it	lt
1a001958:	426d      	neglt	r5, r5
1a00195a:	dd0c      	ble.n	1a001976 <__adddf3+0x52>
1a00195c:	442c      	add	r4, r5
1a00195e:	ea80 0202 	eor.w	r2, r0, r2
1a001962:	ea81 0303 	eor.w	r3, r1, r3
1a001966:	ea82 0000 	eor.w	r0, r2, r0
1a00196a:	ea83 0101 	eor.w	r1, r3, r1
1a00196e:	ea80 0202 	eor.w	r2, r0, r2
1a001972:	ea81 0303 	eor.w	r3, r1, r3
1a001976:	2d36      	cmp	r5, #54	; 0x36
1a001978:	bf88      	it	hi
1a00197a:	bd30      	pophi	{r4, r5, pc}
1a00197c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a001980:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a001984:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
1a001988:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
1a00198c:	d002      	beq.n	1a001994 <__adddf3+0x70>
1a00198e:	4240      	negs	r0, r0
1a001990:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a001994:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
1a001998:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a00199c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
1a0019a0:	d002      	beq.n	1a0019a8 <__adddf3+0x84>
1a0019a2:	4252      	negs	r2, r2
1a0019a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a0019a8:	ea94 0f05 	teq	r4, r5
1a0019ac:	f000 80a7 	beq.w	1a001afe <__adddf3+0x1da>
1a0019b0:	f1a4 0401 	sub.w	r4, r4, #1
1a0019b4:	f1d5 0e20 	rsbs	lr, r5, #32
1a0019b8:	db0d      	blt.n	1a0019d6 <__adddf3+0xb2>
1a0019ba:	fa02 fc0e 	lsl.w	ip, r2, lr
1a0019be:	fa22 f205 	lsr.w	r2, r2, r5
1a0019c2:	1880      	adds	r0, r0, r2
1a0019c4:	f141 0100 	adc.w	r1, r1, #0
1a0019c8:	fa03 f20e 	lsl.w	r2, r3, lr
1a0019cc:	1880      	adds	r0, r0, r2
1a0019ce:	fa43 f305 	asr.w	r3, r3, r5
1a0019d2:	4159      	adcs	r1, r3
1a0019d4:	e00e      	b.n	1a0019f4 <__adddf3+0xd0>
1a0019d6:	f1a5 0520 	sub.w	r5, r5, #32
1a0019da:	f10e 0e20 	add.w	lr, lr, #32
1a0019de:	2a01      	cmp	r2, #1
1a0019e0:	fa03 fc0e 	lsl.w	ip, r3, lr
1a0019e4:	bf28      	it	cs
1a0019e6:	f04c 0c02 	orrcs.w	ip, ip, #2
1a0019ea:	fa43 f305 	asr.w	r3, r3, r5
1a0019ee:	18c0      	adds	r0, r0, r3
1a0019f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
1a0019f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a0019f8:	d507      	bpl.n	1a001a0a <__adddf3+0xe6>
1a0019fa:	f04f 0e00 	mov.w	lr, #0
1a0019fe:	f1dc 0c00 	rsbs	ip, ip, #0
1a001a02:	eb7e 0000 	sbcs.w	r0, lr, r0
1a001a06:	eb6e 0101 	sbc.w	r1, lr, r1
1a001a0a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
1a001a0e:	d31b      	bcc.n	1a001a48 <__adddf3+0x124>
1a001a10:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
1a001a14:	d30c      	bcc.n	1a001a30 <__adddf3+0x10c>
1a001a16:	0849      	lsrs	r1, r1, #1
1a001a18:	ea5f 0030 	movs.w	r0, r0, rrx
1a001a1c:	ea4f 0c3c 	mov.w	ip, ip, rrx
1a001a20:	f104 0401 	add.w	r4, r4, #1
1a001a24:	ea4f 5244 	mov.w	r2, r4, lsl #21
1a001a28:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
1a001a2c:	f080 809a 	bcs.w	1a001b64 <__adddf3+0x240>
1a001a30:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
1a001a34:	bf08      	it	eq
1a001a36:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a001a3a:	f150 0000 	adcs.w	r0, r0, #0
1a001a3e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a001a42:	ea41 0105 	orr.w	r1, r1, r5
1a001a46:	bd30      	pop	{r4, r5, pc}
1a001a48:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
1a001a4c:	4140      	adcs	r0, r0
1a001a4e:	eb41 0101 	adc.w	r1, r1, r1
1a001a52:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a001a56:	f1a4 0401 	sub.w	r4, r4, #1
1a001a5a:	d1e9      	bne.n	1a001a30 <__adddf3+0x10c>
1a001a5c:	f091 0f00 	teq	r1, #0
1a001a60:	bf04      	itt	eq
1a001a62:	4601      	moveq	r1, r0
1a001a64:	2000      	moveq	r0, #0
1a001a66:	fab1 f381 	clz	r3, r1
1a001a6a:	bf08      	it	eq
1a001a6c:	3320      	addeq	r3, #32
1a001a6e:	f1a3 030b 	sub.w	r3, r3, #11
1a001a72:	f1b3 0220 	subs.w	r2, r3, #32
1a001a76:	da0c      	bge.n	1a001a92 <__adddf3+0x16e>
1a001a78:	320c      	adds	r2, #12
1a001a7a:	dd08      	ble.n	1a001a8e <__adddf3+0x16a>
1a001a7c:	f102 0c14 	add.w	ip, r2, #20
1a001a80:	f1c2 020c 	rsb	r2, r2, #12
1a001a84:	fa01 f00c 	lsl.w	r0, r1, ip
1a001a88:	fa21 f102 	lsr.w	r1, r1, r2
1a001a8c:	e00c      	b.n	1a001aa8 <__adddf3+0x184>
1a001a8e:	f102 0214 	add.w	r2, r2, #20
1a001a92:	bfd8      	it	le
1a001a94:	f1c2 0c20 	rsble	ip, r2, #32
1a001a98:	fa01 f102 	lsl.w	r1, r1, r2
1a001a9c:	fa20 fc0c 	lsr.w	ip, r0, ip
1a001aa0:	bfdc      	itt	le
1a001aa2:	ea41 010c 	orrle.w	r1, r1, ip
1a001aa6:	4090      	lslle	r0, r2
1a001aa8:	1ae4      	subs	r4, r4, r3
1a001aaa:	bfa2      	ittt	ge
1a001aac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
1a001ab0:	4329      	orrge	r1, r5
1a001ab2:	bd30      	popge	{r4, r5, pc}
1a001ab4:	ea6f 0404 	mvn.w	r4, r4
1a001ab8:	3c1f      	subs	r4, #31
1a001aba:	da1c      	bge.n	1a001af6 <__adddf3+0x1d2>
1a001abc:	340c      	adds	r4, #12
1a001abe:	dc0e      	bgt.n	1a001ade <__adddf3+0x1ba>
1a001ac0:	f104 0414 	add.w	r4, r4, #20
1a001ac4:	f1c4 0220 	rsb	r2, r4, #32
1a001ac8:	fa20 f004 	lsr.w	r0, r0, r4
1a001acc:	fa01 f302 	lsl.w	r3, r1, r2
1a001ad0:	ea40 0003 	orr.w	r0, r0, r3
1a001ad4:	fa21 f304 	lsr.w	r3, r1, r4
1a001ad8:	ea45 0103 	orr.w	r1, r5, r3
1a001adc:	bd30      	pop	{r4, r5, pc}
1a001ade:	f1c4 040c 	rsb	r4, r4, #12
1a001ae2:	f1c4 0220 	rsb	r2, r4, #32
1a001ae6:	fa20 f002 	lsr.w	r0, r0, r2
1a001aea:	fa01 f304 	lsl.w	r3, r1, r4
1a001aee:	ea40 0003 	orr.w	r0, r0, r3
1a001af2:	4629      	mov	r1, r5
1a001af4:	bd30      	pop	{r4, r5, pc}
1a001af6:	fa21 f004 	lsr.w	r0, r1, r4
1a001afa:	4629      	mov	r1, r5
1a001afc:	bd30      	pop	{r4, r5, pc}
1a001afe:	f094 0f00 	teq	r4, #0
1a001b02:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
1a001b06:	bf06      	itte	eq
1a001b08:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
1a001b0c:	3401      	addeq	r4, #1
1a001b0e:	3d01      	subne	r5, #1
1a001b10:	e74e      	b.n	1a0019b0 <__adddf3+0x8c>
1a001b12:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a001b16:	bf18      	it	ne
1a001b18:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a001b1c:	d029      	beq.n	1a001b72 <__adddf3+0x24e>
1a001b1e:	ea94 0f05 	teq	r4, r5
1a001b22:	bf08      	it	eq
1a001b24:	ea90 0f02 	teqeq	r0, r2
1a001b28:	d005      	beq.n	1a001b36 <__adddf3+0x212>
1a001b2a:	ea54 0c00 	orrs.w	ip, r4, r0
1a001b2e:	bf04      	itt	eq
1a001b30:	4619      	moveq	r1, r3
1a001b32:	4610      	moveq	r0, r2
1a001b34:	bd30      	pop	{r4, r5, pc}
1a001b36:	ea91 0f03 	teq	r1, r3
1a001b3a:	bf1e      	ittt	ne
1a001b3c:	2100      	movne	r1, #0
1a001b3e:	2000      	movne	r0, #0
1a001b40:	bd30      	popne	{r4, r5, pc}
1a001b42:	ea5f 5c54 	movs.w	ip, r4, lsr #21
1a001b46:	d105      	bne.n	1a001b54 <__adddf3+0x230>
1a001b48:	0040      	lsls	r0, r0, #1
1a001b4a:	4149      	adcs	r1, r1
1a001b4c:	bf28      	it	cs
1a001b4e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
1a001b52:	bd30      	pop	{r4, r5, pc}
1a001b54:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
1a001b58:	bf3c      	itt	cc
1a001b5a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
1a001b5e:	bd30      	popcc	{r4, r5, pc}
1a001b60:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a001b64:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
1a001b68:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a001b6c:	f04f 0000 	mov.w	r0, #0
1a001b70:	bd30      	pop	{r4, r5, pc}
1a001b72:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a001b76:	bf1a      	itte	ne
1a001b78:	4619      	movne	r1, r3
1a001b7a:	4610      	movne	r0, r2
1a001b7c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
1a001b80:	bf1c      	itt	ne
1a001b82:	460b      	movne	r3, r1
1a001b84:	4602      	movne	r2, r0
1a001b86:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a001b8a:	bf06      	itte	eq
1a001b8c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
1a001b90:	ea91 0f03 	teqeq	r1, r3
1a001b94:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
1a001b98:	bd30      	pop	{r4, r5, pc}
1a001b9a:	bf00      	nop

1a001b9c <__aeabi_ui2d>:
1a001b9c:	f090 0f00 	teq	r0, #0
1a001ba0:	bf04      	itt	eq
1a001ba2:	2100      	moveq	r1, #0
1a001ba4:	4770      	bxeq	lr
1a001ba6:	b530      	push	{r4, r5, lr}
1a001ba8:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a001bac:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a001bb0:	f04f 0500 	mov.w	r5, #0
1a001bb4:	f04f 0100 	mov.w	r1, #0
1a001bb8:	e750      	b.n	1a001a5c <__adddf3+0x138>
1a001bba:	bf00      	nop

1a001bbc <__aeabi_i2d>:
1a001bbc:	f090 0f00 	teq	r0, #0
1a001bc0:	bf04      	itt	eq
1a001bc2:	2100      	moveq	r1, #0
1a001bc4:	4770      	bxeq	lr
1a001bc6:	b530      	push	{r4, r5, lr}
1a001bc8:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a001bcc:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a001bd0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
1a001bd4:	bf48      	it	mi
1a001bd6:	4240      	negmi	r0, r0
1a001bd8:	f04f 0100 	mov.w	r1, #0
1a001bdc:	e73e      	b.n	1a001a5c <__adddf3+0x138>
1a001bde:	bf00      	nop

1a001be0 <__aeabi_f2d>:
1a001be0:	0042      	lsls	r2, r0, #1
1a001be2:	ea4f 01e2 	mov.w	r1, r2, asr #3
1a001be6:	ea4f 0131 	mov.w	r1, r1, rrx
1a001bea:	ea4f 7002 	mov.w	r0, r2, lsl #28
1a001bee:	bf1f      	itttt	ne
1a001bf0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
1a001bf4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
1a001bf8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
1a001bfc:	4770      	bxne	lr
1a001bfe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
1a001c02:	bf08      	it	eq
1a001c04:	4770      	bxeq	lr
1a001c06:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
1a001c0a:	bf04      	itt	eq
1a001c0c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
1a001c10:	4770      	bxeq	lr
1a001c12:	b530      	push	{r4, r5, lr}
1a001c14:	f44f 7460 	mov.w	r4, #896	; 0x380
1a001c18:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a001c1c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a001c20:	e71c      	b.n	1a001a5c <__adddf3+0x138>
1a001c22:	bf00      	nop

1a001c24 <__aeabi_ul2d>:
1a001c24:	ea50 0201 	orrs.w	r2, r0, r1
1a001c28:	bf08      	it	eq
1a001c2a:	4770      	bxeq	lr
1a001c2c:	b530      	push	{r4, r5, lr}
1a001c2e:	f04f 0500 	mov.w	r5, #0
1a001c32:	e00a      	b.n	1a001c4a <__aeabi_l2d+0x16>

1a001c34 <__aeabi_l2d>:
1a001c34:	ea50 0201 	orrs.w	r2, r0, r1
1a001c38:	bf08      	it	eq
1a001c3a:	4770      	bxeq	lr
1a001c3c:	b530      	push	{r4, r5, lr}
1a001c3e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
1a001c42:	d502      	bpl.n	1a001c4a <__aeabi_l2d+0x16>
1a001c44:	4240      	negs	r0, r0
1a001c46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a001c4a:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a001c4e:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a001c52:	ea5f 5c91 	movs.w	ip, r1, lsr #22
1a001c56:	f43f aed8 	beq.w	1a001a0a <__adddf3+0xe6>
1a001c5a:	f04f 0203 	mov.w	r2, #3
1a001c5e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a001c62:	bf18      	it	ne
1a001c64:	3203      	addne	r2, #3
1a001c66:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a001c6a:	bf18      	it	ne
1a001c6c:	3203      	addne	r2, #3
1a001c6e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
1a001c72:	f1c2 0320 	rsb	r3, r2, #32
1a001c76:	fa00 fc03 	lsl.w	ip, r0, r3
1a001c7a:	fa20 f002 	lsr.w	r0, r0, r2
1a001c7e:	fa01 fe03 	lsl.w	lr, r1, r3
1a001c82:	ea40 000e 	orr.w	r0, r0, lr
1a001c86:	fa21 f102 	lsr.w	r1, r1, r2
1a001c8a:	4414      	add	r4, r2
1a001c8c:	e6bd      	b.n	1a001a0a <__adddf3+0xe6>
1a001c8e:	bf00      	nop

1a001c90 <__aeabi_dmul>:
1a001c90:	b570      	push	{r4, r5, r6, lr}
1a001c92:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a001c96:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a001c9a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a001c9e:	bf1d      	ittte	ne
1a001ca0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a001ca4:	ea94 0f0c 	teqne	r4, ip
1a001ca8:	ea95 0f0c 	teqne	r5, ip
1a001cac:	f000 f8de 	bleq	1a001e6c <__aeabi_dmul+0x1dc>
1a001cb0:	442c      	add	r4, r5
1a001cb2:	ea81 0603 	eor.w	r6, r1, r3
1a001cb6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
1a001cba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
1a001cbe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
1a001cc2:	bf18      	it	ne
1a001cc4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
1a001cc8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a001ccc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
1a001cd0:	d038      	beq.n	1a001d44 <__aeabi_dmul+0xb4>
1a001cd2:	fba0 ce02 	umull	ip, lr, r0, r2
1a001cd6:	f04f 0500 	mov.w	r5, #0
1a001cda:	fbe1 e502 	umlal	lr, r5, r1, r2
1a001cde:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
1a001ce2:	fbe0 e503 	umlal	lr, r5, r0, r3
1a001ce6:	f04f 0600 	mov.w	r6, #0
1a001cea:	fbe1 5603 	umlal	r5, r6, r1, r3
1a001cee:	f09c 0f00 	teq	ip, #0
1a001cf2:	bf18      	it	ne
1a001cf4:	f04e 0e01 	orrne.w	lr, lr, #1
1a001cf8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
1a001cfc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
1a001d00:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
1a001d04:	d204      	bcs.n	1a001d10 <__aeabi_dmul+0x80>
1a001d06:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
1a001d0a:	416d      	adcs	r5, r5
1a001d0c:	eb46 0606 	adc.w	r6, r6, r6
1a001d10:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
1a001d14:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
1a001d18:	ea4f 20c5 	mov.w	r0, r5, lsl #11
1a001d1c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
1a001d20:	ea4f 2ece 	mov.w	lr, lr, lsl #11
1a001d24:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a001d28:	bf88      	it	hi
1a001d2a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a001d2e:	d81e      	bhi.n	1a001d6e <__aeabi_dmul+0xde>
1a001d30:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
1a001d34:	bf08      	it	eq
1a001d36:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
1a001d3a:	f150 0000 	adcs.w	r0, r0, #0
1a001d3e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a001d42:	bd70      	pop	{r4, r5, r6, pc}
1a001d44:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
1a001d48:	ea46 0101 	orr.w	r1, r6, r1
1a001d4c:	ea40 0002 	orr.w	r0, r0, r2
1a001d50:	ea81 0103 	eor.w	r1, r1, r3
1a001d54:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
1a001d58:	bfc2      	ittt	gt
1a001d5a:	ebd4 050c 	rsbsgt	r5, r4, ip
1a001d5e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a001d62:	bd70      	popgt	{r4, r5, r6, pc}
1a001d64:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a001d68:	f04f 0e00 	mov.w	lr, #0
1a001d6c:	3c01      	subs	r4, #1
1a001d6e:	f300 80ab 	bgt.w	1a001ec8 <__aeabi_dmul+0x238>
1a001d72:	f114 0f36 	cmn.w	r4, #54	; 0x36
1a001d76:	bfde      	ittt	le
1a001d78:	2000      	movle	r0, #0
1a001d7a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
1a001d7e:	bd70      	pople	{r4, r5, r6, pc}
1a001d80:	f1c4 0400 	rsb	r4, r4, #0
1a001d84:	3c20      	subs	r4, #32
1a001d86:	da35      	bge.n	1a001df4 <__aeabi_dmul+0x164>
1a001d88:	340c      	adds	r4, #12
1a001d8a:	dc1b      	bgt.n	1a001dc4 <__aeabi_dmul+0x134>
1a001d8c:	f104 0414 	add.w	r4, r4, #20
1a001d90:	f1c4 0520 	rsb	r5, r4, #32
1a001d94:	fa00 f305 	lsl.w	r3, r0, r5
1a001d98:	fa20 f004 	lsr.w	r0, r0, r4
1a001d9c:	fa01 f205 	lsl.w	r2, r1, r5
1a001da0:	ea40 0002 	orr.w	r0, r0, r2
1a001da4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
1a001da8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a001dac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a001db0:	fa21 f604 	lsr.w	r6, r1, r4
1a001db4:	eb42 0106 	adc.w	r1, r2, r6
1a001db8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a001dbc:	bf08      	it	eq
1a001dbe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a001dc2:	bd70      	pop	{r4, r5, r6, pc}
1a001dc4:	f1c4 040c 	rsb	r4, r4, #12
1a001dc8:	f1c4 0520 	rsb	r5, r4, #32
1a001dcc:	fa00 f304 	lsl.w	r3, r0, r4
1a001dd0:	fa20 f005 	lsr.w	r0, r0, r5
1a001dd4:	fa01 f204 	lsl.w	r2, r1, r4
1a001dd8:	ea40 0002 	orr.w	r0, r0, r2
1a001ddc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a001de0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a001de4:	f141 0100 	adc.w	r1, r1, #0
1a001de8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a001dec:	bf08      	it	eq
1a001dee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a001df2:	bd70      	pop	{r4, r5, r6, pc}
1a001df4:	f1c4 0520 	rsb	r5, r4, #32
1a001df8:	fa00 f205 	lsl.w	r2, r0, r5
1a001dfc:	ea4e 0e02 	orr.w	lr, lr, r2
1a001e00:	fa20 f304 	lsr.w	r3, r0, r4
1a001e04:	fa01 f205 	lsl.w	r2, r1, r5
1a001e08:	ea43 0302 	orr.w	r3, r3, r2
1a001e0c:	fa21 f004 	lsr.w	r0, r1, r4
1a001e10:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a001e14:	fa21 f204 	lsr.w	r2, r1, r4
1a001e18:	ea20 0002 	bic.w	r0, r0, r2
1a001e1c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
1a001e20:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a001e24:	bf08      	it	eq
1a001e26:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a001e2a:	bd70      	pop	{r4, r5, r6, pc}
1a001e2c:	f094 0f00 	teq	r4, #0
1a001e30:	d10f      	bne.n	1a001e52 <__aeabi_dmul+0x1c2>
1a001e32:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
1a001e36:	0040      	lsls	r0, r0, #1
1a001e38:	eb41 0101 	adc.w	r1, r1, r1
1a001e3c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a001e40:	bf08      	it	eq
1a001e42:	3c01      	subeq	r4, #1
1a001e44:	d0f7      	beq.n	1a001e36 <__aeabi_dmul+0x1a6>
1a001e46:	ea41 0106 	orr.w	r1, r1, r6
1a001e4a:	f095 0f00 	teq	r5, #0
1a001e4e:	bf18      	it	ne
1a001e50:	4770      	bxne	lr
1a001e52:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
1a001e56:	0052      	lsls	r2, r2, #1
1a001e58:	eb43 0303 	adc.w	r3, r3, r3
1a001e5c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
1a001e60:	bf08      	it	eq
1a001e62:	3d01      	subeq	r5, #1
1a001e64:	d0f7      	beq.n	1a001e56 <__aeabi_dmul+0x1c6>
1a001e66:	ea43 0306 	orr.w	r3, r3, r6
1a001e6a:	4770      	bx	lr
1a001e6c:	ea94 0f0c 	teq	r4, ip
1a001e70:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a001e74:	bf18      	it	ne
1a001e76:	ea95 0f0c 	teqne	r5, ip
1a001e7a:	d00c      	beq.n	1a001e96 <__aeabi_dmul+0x206>
1a001e7c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a001e80:	bf18      	it	ne
1a001e82:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a001e86:	d1d1      	bne.n	1a001e2c <__aeabi_dmul+0x19c>
1a001e88:	ea81 0103 	eor.w	r1, r1, r3
1a001e8c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a001e90:	f04f 0000 	mov.w	r0, #0
1a001e94:	bd70      	pop	{r4, r5, r6, pc}
1a001e96:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a001e9a:	bf06      	itte	eq
1a001e9c:	4610      	moveq	r0, r2
1a001e9e:	4619      	moveq	r1, r3
1a001ea0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a001ea4:	d019      	beq.n	1a001eda <__aeabi_dmul+0x24a>
1a001ea6:	ea94 0f0c 	teq	r4, ip
1a001eaa:	d102      	bne.n	1a001eb2 <__aeabi_dmul+0x222>
1a001eac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
1a001eb0:	d113      	bne.n	1a001eda <__aeabi_dmul+0x24a>
1a001eb2:	ea95 0f0c 	teq	r5, ip
1a001eb6:	d105      	bne.n	1a001ec4 <__aeabi_dmul+0x234>
1a001eb8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
1a001ebc:	bf1c      	itt	ne
1a001ebe:	4610      	movne	r0, r2
1a001ec0:	4619      	movne	r1, r3
1a001ec2:	d10a      	bne.n	1a001eda <__aeabi_dmul+0x24a>
1a001ec4:	ea81 0103 	eor.w	r1, r1, r3
1a001ec8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a001ecc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a001ed0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a001ed4:	f04f 0000 	mov.w	r0, #0
1a001ed8:	bd70      	pop	{r4, r5, r6, pc}
1a001eda:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a001ede:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
1a001ee2:	bd70      	pop	{r4, r5, r6, pc}

1a001ee4 <__aeabi_ddiv>:
1a001ee4:	b570      	push	{r4, r5, r6, lr}
1a001ee6:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a001eea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a001eee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a001ef2:	bf1d      	ittte	ne
1a001ef4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a001ef8:	ea94 0f0c 	teqne	r4, ip
1a001efc:	ea95 0f0c 	teqne	r5, ip
1a001f00:	f000 f8a7 	bleq	1a002052 <__aeabi_ddiv+0x16e>
1a001f04:	eba4 0405 	sub.w	r4, r4, r5
1a001f08:	ea81 0e03 	eor.w	lr, r1, r3
1a001f0c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a001f10:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a001f14:	f000 8088 	beq.w	1a002028 <__aeabi_ddiv+0x144>
1a001f18:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a001f1c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
1a001f20:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
1a001f24:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
1a001f28:	ea4f 2202 	mov.w	r2, r2, lsl #8
1a001f2c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
1a001f30:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
1a001f34:	ea4f 2600 	mov.w	r6, r0, lsl #8
1a001f38:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
1a001f3c:	429d      	cmp	r5, r3
1a001f3e:	bf08      	it	eq
1a001f40:	4296      	cmpeq	r6, r2
1a001f42:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
1a001f46:	f504 7440 	add.w	r4, r4, #768	; 0x300
1a001f4a:	d202      	bcs.n	1a001f52 <__aeabi_ddiv+0x6e>
1a001f4c:	085b      	lsrs	r3, r3, #1
1a001f4e:	ea4f 0232 	mov.w	r2, r2, rrx
1a001f52:	1ab6      	subs	r6, r6, r2
1a001f54:	eb65 0503 	sbc.w	r5, r5, r3
1a001f58:	085b      	lsrs	r3, r3, #1
1a001f5a:	ea4f 0232 	mov.w	r2, r2, rrx
1a001f5e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
1a001f62:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
1a001f66:	ebb6 0e02 	subs.w	lr, r6, r2
1a001f6a:	eb75 0e03 	sbcs.w	lr, r5, r3
1a001f6e:	bf22      	ittt	cs
1a001f70:	1ab6      	subcs	r6, r6, r2
1a001f72:	4675      	movcs	r5, lr
1a001f74:	ea40 000c 	orrcs.w	r0, r0, ip
1a001f78:	085b      	lsrs	r3, r3, #1
1a001f7a:	ea4f 0232 	mov.w	r2, r2, rrx
1a001f7e:	ebb6 0e02 	subs.w	lr, r6, r2
1a001f82:	eb75 0e03 	sbcs.w	lr, r5, r3
1a001f86:	bf22      	ittt	cs
1a001f88:	1ab6      	subcs	r6, r6, r2
1a001f8a:	4675      	movcs	r5, lr
1a001f8c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
1a001f90:	085b      	lsrs	r3, r3, #1
1a001f92:	ea4f 0232 	mov.w	r2, r2, rrx
1a001f96:	ebb6 0e02 	subs.w	lr, r6, r2
1a001f9a:	eb75 0e03 	sbcs.w	lr, r5, r3
1a001f9e:	bf22      	ittt	cs
1a001fa0:	1ab6      	subcs	r6, r6, r2
1a001fa2:	4675      	movcs	r5, lr
1a001fa4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
1a001fa8:	085b      	lsrs	r3, r3, #1
1a001faa:	ea4f 0232 	mov.w	r2, r2, rrx
1a001fae:	ebb6 0e02 	subs.w	lr, r6, r2
1a001fb2:	eb75 0e03 	sbcs.w	lr, r5, r3
1a001fb6:	bf22      	ittt	cs
1a001fb8:	1ab6      	subcs	r6, r6, r2
1a001fba:	4675      	movcs	r5, lr
1a001fbc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
1a001fc0:	ea55 0e06 	orrs.w	lr, r5, r6
1a001fc4:	d018      	beq.n	1a001ff8 <__aeabi_ddiv+0x114>
1a001fc6:	ea4f 1505 	mov.w	r5, r5, lsl #4
1a001fca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
1a001fce:	ea4f 1606 	mov.w	r6, r6, lsl #4
1a001fd2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
1a001fd6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
1a001fda:	ea4f 02c2 	mov.w	r2, r2, lsl #3
1a001fde:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
1a001fe2:	d1c0      	bne.n	1a001f66 <__aeabi_ddiv+0x82>
1a001fe4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a001fe8:	d10b      	bne.n	1a002002 <__aeabi_ddiv+0x11e>
1a001fea:	ea41 0100 	orr.w	r1, r1, r0
1a001fee:	f04f 0000 	mov.w	r0, #0
1a001ff2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
1a001ff6:	e7b6      	b.n	1a001f66 <__aeabi_ddiv+0x82>
1a001ff8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a001ffc:	bf04      	itt	eq
1a001ffe:	4301      	orreq	r1, r0
1a002000:	2000      	moveq	r0, #0
1a002002:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a002006:	bf88      	it	hi
1a002008:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a00200c:	f63f aeaf 	bhi.w	1a001d6e <__aeabi_dmul+0xde>
1a002010:	ebb5 0c03 	subs.w	ip, r5, r3
1a002014:	bf04      	itt	eq
1a002016:	ebb6 0c02 	subseq.w	ip, r6, r2
1a00201a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a00201e:	f150 0000 	adcs.w	r0, r0, #0
1a002022:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a002026:	bd70      	pop	{r4, r5, r6, pc}
1a002028:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
1a00202c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
1a002030:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
1a002034:	bfc2      	ittt	gt
1a002036:	ebd4 050c 	rsbsgt	r5, r4, ip
1a00203a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a00203e:	bd70      	popgt	{r4, r5, r6, pc}
1a002040:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a002044:	f04f 0e00 	mov.w	lr, #0
1a002048:	3c01      	subs	r4, #1
1a00204a:	e690      	b.n	1a001d6e <__aeabi_dmul+0xde>
1a00204c:	ea45 0e06 	orr.w	lr, r5, r6
1a002050:	e68d      	b.n	1a001d6e <__aeabi_dmul+0xde>
1a002052:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a002056:	ea94 0f0c 	teq	r4, ip
1a00205a:	bf08      	it	eq
1a00205c:	ea95 0f0c 	teqeq	r5, ip
1a002060:	f43f af3b 	beq.w	1a001eda <__aeabi_dmul+0x24a>
1a002064:	ea94 0f0c 	teq	r4, ip
1a002068:	d10a      	bne.n	1a002080 <__aeabi_ddiv+0x19c>
1a00206a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a00206e:	f47f af34 	bne.w	1a001eda <__aeabi_dmul+0x24a>
1a002072:	ea95 0f0c 	teq	r5, ip
1a002076:	f47f af25 	bne.w	1a001ec4 <__aeabi_dmul+0x234>
1a00207a:	4610      	mov	r0, r2
1a00207c:	4619      	mov	r1, r3
1a00207e:	e72c      	b.n	1a001eda <__aeabi_dmul+0x24a>
1a002080:	ea95 0f0c 	teq	r5, ip
1a002084:	d106      	bne.n	1a002094 <__aeabi_ddiv+0x1b0>
1a002086:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a00208a:	f43f aefd 	beq.w	1a001e88 <__aeabi_dmul+0x1f8>
1a00208e:	4610      	mov	r0, r2
1a002090:	4619      	mov	r1, r3
1a002092:	e722      	b.n	1a001eda <__aeabi_dmul+0x24a>
1a002094:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a002098:	bf18      	it	ne
1a00209a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a00209e:	f47f aec5 	bne.w	1a001e2c <__aeabi_dmul+0x19c>
1a0020a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
1a0020a6:	f47f af0d 	bne.w	1a001ec4 <__aeabi_dmul+0x234>
1a0020aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
1a0020ae:	f47f aeeb 	bne.w	1a001e88 <__aeabi_dmul+0x1f8>
1a0020b2:	e712      	b.n	1a001eda <__aeabi_dmul+0x24a>

1a0020b4 <__aeabi_d2f>:
1a0020b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
1a0020b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
1a0020bc:	bf24      	itt	cs
1a0020be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
1a0020c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
1a0020c6:	d90d      	bls.n	1a0020e4 <__aeabi_d2f+0x30>
1a0020c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
1a0020cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
1a0020d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
1a0020d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
1a0020d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
1a0020dc:	bf08      	it	eq
1a0020de:	f020 0001 	biceq.w	r0, r0, #1
1a0020e2:	4770      	bx	lr
1a0020e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
1a0020e8:	d121      	bne.n	1a00212e <__aeabi_d2f+0x7a>
1a0020ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
1a0020ee:	bfbc      	itt	lt
1a0020f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
1a0020f4:	4770      	bxlt	lr
1a0020f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a0020fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
1a0020fe:	f1c2 0218 	rsb	r2, r2, #24
1a002102:	f1c2 0c20 	rsb	ip, r2, #32
1a002106:	fa10 f30c 	lsls.w	r3, r0, ip
1a00210a:	fa20 f002 	lsr.w	r0, r0, r2
1a00210e:	bf18      	it	ne
1a002110:	f040 0001 	orrne.w	r0, r0, #1
1a002114:	ea4f 23c1 	mov.w	r3, r1, lsl #11
1a002118:	ea4f 23d3 	mov.w	r3, r3, lsr #11
1a00211c:	fa03 fc0c 	lsl.w	ip, r3, ip
1a002120:	ea40 000c 	orr.w	r0, r0, ip
1a002124:	fa23 f302 	lsr.w	r3, r3, r2
1a002128:	ea4f 0343 	mov.w	r3, r3, lsl #1
1a00212c:	e7cc      	b.n	1a0020c8 <__aeabi_d2f+0x14>
1a00212e:	ea7f 5362 	mvns.w	r3, r2, asr #21
1a002132:	d107      	bne.n	1a002144 <__aeabi_d2f+0x90>
1a002134:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
1a002138:	bf1e      	ittt	ne
1a00213a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
1a00213e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
1a002142:	4770      	bxne	lr
1a002144:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
1a002148:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
1a00214c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
1a002150:	4770      	bx	lr
1a002152:	bf00      	nop

1a002154 <__aeabi_uldivmod>:
1a002154:	b953      	cbnz	r3, 1a00216c <__aeabi_uldivmod+0x18>
1a002156:	b94a      	cbnz	r2, 1a00216c <__aeabi_uldivmod+0x18>
1a002158:	2900      	cmp	r1, #0
1a00215a:	bf08      	it	eq
1a00215c:	2800      	cmpeq	r0, #0
1a00215e:	bf1c      	itt	ne
1a002160:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a002164:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a002168:	f000 b972 	b.w	1a002450 <__aeabi_idiv0>
1a00216c:	f1ad 0c08 	sub.w	ip, sp, #8
1a002170:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a002174:	f000 f806 	bl	1a002184 <__udivmoddi4>
1a002178:	f8dd e004 	ldr.w	lr, [sp, #4]
1a00217c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a002180:	b004      	add	sp, #16
1a002182:	4770      	bx	lr

1a002184 <__udivmoddi4>:
1a002184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a002188:	9e08      	ldr	r6, [sp, #32]
1a00218a:	4604      	mov	r4, r0
1a00218c:	4688      	mov	r8, r1
1a00218e:	2b00      	cmp	r3, #0
1a002190:	d14b      	bne.n	1a00222a <__udivmoddi4+0xa6>
1a002192:	428a      	cmp	r2, r1
1a002194:	4615      	mov	r5, r2
1a002196:	d967      	bls.n	1a002268 <__udivmoddi4+0xe4>
1a002198:	fab2 f282 	clz	r2, r2
1a00219c:	b14a      	cbz	r2, 1a0021b2 <__udivmoddi4+0x2e>
1a00219e:	f1c2 0720 	rsb	r7, r2, #32
1a0021a2:	fa01 f302 	lsl.w	r3, r1, r2
1a0021a6:	fa20 f707 	lsr.w	r7, r0, r7
1a0021aa:	4095      	lsls	r5, r2
1a0021ac:	ea47 0803 	orr.w	r8, r7, r3
1a0021b0:	4094      	lsls	r4, r2
1a0021b2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0021b6:	0c23      	lsrs	r3, r4, #16
1a0021b8:	fbb8 f7fe 	udiv	r7, r8, lr
1a0021bc:	fa1f fc85 	uxth.w	ip, r5
1a0021c0:	fb0e 8817 	mls	r8, lr, r7, r8
1a0021c4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a0021c8:	fb07 f10c 	mul.w	r1, r7, ip
1a0021cc:	4299      	cmp	r1, r3
1a0021ce:	d909      	bls.n	1a0021e4 <__udivmoddi4+0x60>
1a0021d0:	18eb      	adds	r3, r5, r3
1a0021d2:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a0021d6:	f080 811b 	bcs.w	1a002410 <__udivmoddi4+0x28c>
1a0021da:	4299      	cmp	r1, r3
1a0021dc:	f240 8118 	bls.w	1a002410 <__udivmoddi4+0x28c>
1a0021e0:	3f02      	subs	r7, #2
1a0021e2:	442b      	add	r3, r5
1a0021e4:	1a5b      	subs	r3, r3, r1
1a0021e6:	b2a4      	uxth	r4, r4
1a0021e8:	fbb3 f0fe 	udiv	r0, r3, lr
1a0021ec:	fb0e 3310 	mls	r3, lr, r0, r3
1a0021f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a0021f4:	fb00 fc0c 	mul.w	ip, r0, ip
1a0021f8:	45a4      	cmp	ip, r4
1a0021fa:	d909      	bls.n	1a002210 <__udivmoddi4+0x8c>
1a0021fc:	192c      	adds	r4, r5, r4
1a0021fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a002202:	f080 8107 	bcs.w	1a002414 <__udivmoddi4+0x290>
1a002206:	45a4      	cmp	ip, r4
1a002208:	f240 8104 	bls.w	1a002414 <__udivmoddi4+0x290>
1a00220c:	3802      	subs	r0, #2
1a00220e:	442c      	add	r4, r5
1a002210:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a002214:	eba4 040c 	sub.w	r4, r4, ip
1a002218:	2700      	movs	r7, #0
1a00221a:	b11e      	cbz	r6, 1a002224 <__udivmoddi4+0xa0>
1a00221c:	40d4      	lsrs	r4, r2
1a00221e:	2300      	movs	r3, #0
1a002220:	e9c6 4300 	strd	r4, r3, [r6]
1a002224:	4639      	mov	r1, r7
1a002226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00222a:	428b      	cmp	r3, r1
1a00222c:	d909      	bls.n	1a002242 <__udivmoddi4+0xbe>
1a00222e:	2e00      	cmp	r6, #0
1a002230:	f000 80eb 	beq.w	1a00240a <__udivmoddi4+0x286>
1a002234:	2700      	movs	r7, #0
1a002236:	e9c6 0100 	strd	r0, r1, [r6]
1a00223a:	4638      	mov	r0, r7
1a00223c:	4639      	mov	r1, r7
1a00223e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a002242:	fab3 f783 	clz	r7, r3
1a002246:	2f00      	cmp	r7, #0
1a002248:	d147      	bne.n	1a0022da <__udivmoddi4+0x156>
1a00224a:	428b      	cmp	r3, r1
1a00224c:	d302      	bcc.n	1a002254 <__udivmoddi4+0xd0>
1a00224e:	4282      	cmp	r2, r0
1a002250:	f200 80fa 	bhi.w	1a002448 <__udivmoddi4+0x2c4>
1a002254:	1a84      	subs	r4, r0, r2
1a002256:	eb61 0303 	sbc.w	r3, r1, r3
1a00225a:	2001      	movs	r0, #1
1a00225c:	4698      	mov	r8, r3
1a00225e:	2e00      	cmp	r6, #0
1a002260:	d0e0      	beq.n	1a002224 <__udivmoddi4+0xa0>
1a002262:	e9c6 4800 	strd	r4, r8, [r6]
1a002266:	e7dd      	b.n	1a002224 <__udivmoddi4+0xa0>
1a002268:	b902      	cbnz	r2, 1a00226c <__udivmoddi4+0xe8>
1a00226a:	deff      	udf	#255	; 0xff
1a00226c:	fab2 f282 	clz	r2, r2
1a002270:	2a00      	cmp	r2, #0
1a002272:	f040 808f 	bne.w	1a002394 <__udivmoddi4+0x210>
1a002276:	1b49      	subs	r1, r1, r5
1a002278:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a00227c:	fa1f f885 	uxth.w	r8, r5
1a002280:	2701      	movs	r7, #1
1a002282:	fbb1 fcfe 	udiv	ip, r1, lr
1a002286:	0c23      	lsrs	r3, r4, #16
1a002288:	fb0e 111c 	mls	r1, lr, ip, r1
1a00228c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a002290:	fb08 f10c 	mul.w	r1, r8, ip
1a002294:	4299      	cmp	r1, r3
1a002296:	d907      	bls.n	1a0022a8 <__udivmoddi4+0x124>
1a002298:	18eb      	adds	r3, r5, r3
1a00229a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a00229e:	d202      	bcs.n	1a0022a6 <__udivmoddi4+0x122>
1a0022a0:	4299      	cmp	r1, r3
1a0022a2:	f200 80cd 	bhi.w	1a002440 <__udivmoddi4+0x2bc>
1a0022a6:	4684      	mov	ip, r0
1a0022a8:	1a59      	subs	r1, r3, r1
1a0022aa:	b2a3      	uxth	r3, r4
1a0022ac:	fbb1 f0fe 	udiv	r0, r1, lr
1a0022b0:	fb0e 1410 	mls	r4, lr, r0, r1
1a0022b4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a0022b8:	fb08 f800 	mul.w	r8, r8, r0
1a0022bc:	45a0      	cmp	r8, r4
1a0022be:	d907      	bls.n	1a0022d0 <__udivmoddi4+0x14c>
1a0022c0:	192c      	adds	r4, r5, r4
1a0022c2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a0022c6:	d202      	bcs.n	1a0022ce <__udivmoddi4+0x14a>
1a0022c8:	45a0      	cmp	r8, r4
1a0022ca:	f200 80b6 	bhi.w	1a00243a <__udivmoddi4+0x2b6>
1a0022ce:	4618      	mov	r0, r3
1a0022d0:	eba4 0408 	sub.w	r4, r4, r8
1a0022d4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a0022d8:	e79f      	b.n	1a00221a <__udivmoddi4+0x96>
1a0022da:	f1c7 0c20 	rsb	ip, r7, #32
1a0022de:	40bb      	lsls	r3, r7
1a0022e0:	fa22 fe0c 	lsr.w	lr, r2, ip
1a0022e4:	ea4e 0e03 	orr.w	lr, lr, r3
1a0022e8:	fa01 f407 	lsl.w	r4, r1, r7
1a0022ec:	fa20 f50c 	lsr.w	r5, r0, ip
1a0022f0:	fa21 f30c 	lsr.w	r3, r1, ip
1a0022f4:	ea4f 481e 	mov.w	r8, lr, lsr #16
1a0022f8:	4325      	orrs	r5, r4
1a0022fa:	fbb3 f9f8 	udiv	r9, r3, r8
1a0022fe:	0c2c      	lsrs	r4, r5, #16
1a002300:	fb08 3319 	mls	r3, r8, r9, r3
1a002304:	fa1f fa8e 	uxth.w	sl, lr
1a002308:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
1a00230c:	fb09 f40a 	mul.w	r4, r9, sl
1a002310:	429c      	cmp	r4, r3
1a002312:	fa02 f207 	lsl.w	r2, r2, r7
1a002316:	fa00 f107 	lsl.w	r1, r0, r7
1a00231a:	d90b      	bls.n	1a002334 <__udivmoddi4+0x1b0>
1a00231c:	eb1e 0303 	adds.w	r3, lr, r3
1a002320:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a002324:	f080 8087 	bcs.w	1a002436 <__udivmoddi4+0x2b2>
1a002328:	429c      	cmp	r4, r3
1a00232a:	f240 8084 	bls.w	1a002436 <__udivmoddi4+0x2b2>
1a00232e:	f1a9 0902 	sub.w	r9, r9, #2
1a002332:	4473      	add	r3, lr
1a002334:	1b1b      	subs	r3, r3, r4
1a002336:	b2ad      	uxth	r5, r5
1a002338:	fbb3 f0f8 	udiv	r0, r3, r8
1a00233c:	fb08 3310 	mls	r3, r8, r0, r3
1a002340:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
1a002344:	fb00 fa0a 	mul.w	sl, r0, sl
1a002348:	45a2      	cmp	sl, r4
1a00234a:	d908      	bls.n	1a00235e <__udivmoddi4+0x1da>
1a00234c:	eb1e 0404 	adds.w	r4, lr, r4
1a002350:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a002354:	d26b      	bcs.n	1a00242e <__udivmoddi4+0x2aa>
1a002356:	45a2      	cmp	sl, r4
1a002358:	d969      	bls.n	1a00242e <__udivmoddi4+0x2aa>
1a00235a:	3802      	subs	r0, #2
1a00235c:	4474      	add	r4, lr
1a00235e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a002362:	fba0 8902 	umull	r8, r9, r0, r2
1a002366:	eba4 040a 	sub.w	r4, r4, sl
1a00236a:	454c      	cmp	r4, r9
1a00236c:	46c2      	mov	sl, r8
1a00236e:	464b      	mov	r3, r9
1a002370:	d354      	bcc.n	1a00241c <__udivmoddi4+0x298>
1a002372:	d051      	beq.n	1a002418 <__udivmoddi4+0x294>
1a002374:	2e00      	cmp	r6, #0
1a002376:	d069      	beq.n	1a00244c <__udivmoddi4+0x2c8>
1a002378:	ebb1 050a 	subs.w	r5, r1, sl
1a00237c:	eb64 0403 	sbc.w	r4, r4, r3
1a002380:	fa04 fc0c 	lsl.w	ip, r4, ip
1a002384:	40fd      	lsrs	r5, r7
1a002386:	40fc      	lsrs	r4, r7
1a002388:	ea4c 0505 	orr.w	r5, ip, r5
1a00238c:	e9c6 5400 	strd	r5, r4, [r6]
1a002390:	2700      	movs	r7, #0
1a002392:	e747      	b.n	1a002224 <__udivmoddi4+0xa0>
1a002394:	f1c2 0320 	rsb	r3, r2, #32
1a002398:	fa20 f703 	lsr.w	r7, r0, r3
1a00239c:	4095      	lsls	r5, r2
1a00239e:	fa01 f002 	lsl.w	r0, r1, r2
1a0023a2:	fa21 f303 	lsr.w	r3, r1, r3
1a0023a6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0023aa:	4338      	orrs	r0, r7
1a0023ac:	0c01      	lsrs	r1, r0, #16
1a0023ae:	fbb3 f7fe 	udiv	r7, r3, lr
1a0023b2:	fa1f f885 	uxth.w	r8, r5
1a0023b6:	fb0e 3317 	mls	r3, lr, r7, r3
1a0023ba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a0023be:	fb07 f308 	mul.w	r3, r7, r8
1a0023c2:	428b      	cmp	r3, r1
1a0023c4:	fa04 f402 	lsl.w	r4, r4, r2
1a0023c8:	d907      	bls.n	1a0023da <__udivmoddi4+0x256>
1a0023ca:	1869      	adds	r1, r5, r1
1a0023cc:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a0023d0:	d22f      	bcs.n	1a002432 <__udivmoddi4+0x2ae>
1a0023d2:	428b      	cmp	r3, r1
1a0023d4:	d92d      	bls.n	1a002432 <__udivmoddi4+0x2ae>
1a0023d6:	3f02      	subs	r7, #2
1a0023d8:	4429      	add	r1, r5
1a0023da:	1acb      	subs	r3, r1, r3
1a0023dc:	b281      	uxth	r1, r0
1a0023de:	fbb3 f0fe 	udiv	r0, r3, lr
1a0023e2:	fb0e 3310 	mls	r3, lr, r0, r3
1a0023e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a0023ea:	fb00 f308 	mul.w	r3, r0, r8
1a0023ee:	428b      	cmp	r3, r1
1a0023f0:	d907      	bls.n	1a002402 <__udivmoddi4+0x27e>
1a0023f2:	1869      	adds	r1, r5, r1
1a0023f4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a0023f8:	d217      	bcs.n	1a00242a <__udivmoddi4+0x2a6>
1a0023fa:	428b      	cmp	r3, r1
1a0023fc:	d915      	bls.n	1a00242a <__udivmoddi4+0x2a6>
1a0023fe:	3802      	subs	r0, #2
1a002400:	4429      	add	r1, r5
1a002402:	1ac9      	subs	r1, r1, r3
1a002404:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a002408:	e73b      	b.n	1a002282 <__udivmoddi4+0xfe>
1a00240a:	4637      	mov	r7, r6
1a00240c:	4630      	mov	r0, r6
1a00240e:	e709      	b.n	1a002224 <__udivmoddi4+0xa0>
1a002410:	4607      	mov	r7, r0
1a002412:	e6e7      	b.n	1a0021e4 <__udivmoddi4+0x60>
1a002414:	4618      	mov	r0, r3
1a002416:	e6fb      	b.n	1a002210 <__udivmoddi4+0x8c>
1a002418:	4541      	cmp	r1, r8
1a00241a:	d2ab      	bcs.n	1a002374 <__udivmoddi4+0x1f0>
1a00241c:	ebb8 0a02 	subs.w	sl, r8, r2
1a002420:	eb69 020e 	sbc.w	r2, r9, lr
1a002424:	3801      	subs	r0, #1
1a002426:	4613      	mov	r3, r2
1a002428:	e7a4      	b.n	1a002374 <__udivmoddi4+0x1f0>
1a00242a:	4660      	mov	r0, ip
1a00242c:	e7e9      	b.n	1a002402 <__udivmoddi4+0x27e>
1a00242e:	4618      	mov	r0, r3
1a002430:	e795      	b.n	1a00235e <__udivmoddi4+0x1da>
1a002432:	4667      	mov	r7, ip
1a002434:	e7d1      	b.n	1a0023da <__udivmoddi4+0x256>
1a002436:	4681      	mov	r9, r0
1a002438:	e77c      	b.n	1a002334 <__udivmoddi4+0x1b0>
1a00243a:	3802      	subs	r0, #2
1a00243c:	442c      	add	r4, r5
1a00243e:	e747      	b.n	1a0022d0 <__udivmoddi4+0x14c>
1a002440:	f1ac 0c02 	sub.w	ip, ip, #2
1a002444:	442b      	add	r3, r5
1a002446:	e72f      	b.n	1a0022a8 <__udivmoddi4+0x124>
1a002448:	4638      	mov	r0, r7
1a00244a:	e708      	b.n	1a00225e <__udivmoddi4+0xda>
1a00244c:	4637      	mov	r7, r6
1a00244e:	e6e9      	b.n	1a002224 <__udivmoddi4+0xa0>

1a002450 <__aeabi_idiv0>:
1a002450:	4770      	bx	lr
1a002452:	bf00      	nop

1a002454 <memset>:
1a002454:	4402      	add	r2, r0
1a002456:	4603      	mov	r3, r0
1a002458:	4293      	cmp	r3, r2
1a00245a:	d100      	bne.n	1a00245e <memset+0xa>
1a00245c:	4770      	bx	lr
1a00245e:	f803 1b01 	strb.w	r1, [r3], #1
1a002462:	e7f9      	b.n	1a002458 <memset+0x4>
1a002464:	65726174 	.word	0x65726174
1a002468:	00003161 	.word	0x00003161
1a00246c:	65726174 	.word	0x65726174
1a002470:	00003261 	.word	0x00003261
1a002474:	65726174 	.word	0x65726174
1a002478:	ff003361 	.word	0xff003361

1a00247c <UART_BClock>:
1a00247c:	01a201c2 01620182                       ......b.

1a002484 <UART_PClock>:
1a002484:	00820081 00a200a1 08040201 0f0f0f03     ................
1a002494:	000000ff                                ....

1a002498 <periph_to_base>:
1a002498:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a0024a8:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a0024b8:	000100e0 01000100 01200003 00060120     .......... . ...
1a0024c8:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a0024d8:	01820013 00120182 01a201a2 01c20011     ................
1a0024e8:	001001c2 01e201e2 0202000f 000e0202     ................
1a0024f8:	02220222 0223000d 001c0223              "."...#.#...

1a002504 <InitClkStates>:
1a002504:	00010100 00010909 0001090a 01010701     ................
1a002514:	00010902 00010906 0101090c 0001090d     ................
1a002524:	0001090e 0001090f 00010910 00010911     ................
1a002534:	00010912 00010913 00011114 00011119     ................
1a002544:	0001111a 0001111b                       ........

1a00254c <InitClkStates>:
1a00254c:	00010308 00010307 01010f01              ............

1a002558 <pinmuxing>:
1a002558:	00400a02 00400b02 00400c02 00440002     ..@...@...@...D.
1a002568:	00440102 00440202 00520302 00520402     ..D...D...R...R.
1a002578:	00520509 00570609 00570206 00500001     ..R...W...W...P.
1a002588:	00500101 00500201 00500601 00f30f01     ..P...P...P.....
1a002598:	00f71001 00f31101 00b31201 00f01301     ................
1a0025a8:	00b31401 00b60707 00f20000 00b60100     ................

1a0025b8 <ExtRateIn>:
1a0025b8:	00000000                                ....

1a0025bc <OscRateIn>:
1a0025bc:	00b71b00                                ....

1a0025c0 <gpioLEDBits>:
1a0025c0:	0b010e00 00050c01 02050105              ............

1a0025cc <gpioPinsConfig>:
1a0025cc:	02000104 00050701 05010d03 04080100     ................
1a0025dc:	02020002 02000304 00000403 04070002     ................
1a0025ec:	030c0300 09050402 05040103 04030208     ................
1a0025fc:	04020305 06040504 0802000c 03000b06     ................
1a00260c:	00090607 07060503 060f0504 03030004     ................
1a00261c:	02000404 00050404 06040502 04060200     ................
1a00262c:	0c050408 05040a04 0003010e 14010a00     ................
1a00263c:	010f0000 0d000012 00001101 0010010c     ................
1a00264c:	07070300 000f0300 01000001 00000000     ................
1a00265c:	000a0600 08060603 06100504 04030005     ................
1a00266c:	03000106 04090400 04010d05 010b0000     ................
1a00267c:	0200000f 00000001 00010104 02010800     ................
1a00268c:	01090000 09010006 05040002 04010200     ................
1a00269c:	02020105 02020504 0e00000a 01000b02     ................
1a0026ac:	000c020b 00040c01 04000200 01020001     ................
1a0026bc:	02000204 00030402 03070302 070b0300     ................
1a0026cc:	0c030004 03000507 0006070d 01020e03     ................
1a0026dc:	04010504 06020006 02000504 00040405     ................
1a0026ec:	08040402 040c0504 0d050409 05040a04     ................
1a0026fc:	0005010e ffff0801                       ........
